
TIMER_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000041c6  0000425a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800068  00800068  00004262  2**0
                  ALLOC
  3 .stab         00003534  00000000  00000000  00004264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001736  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000900e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000917e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000adc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d61b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__ctors_end>
       4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      10:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      14:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      18:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      1c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      20:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      24:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__vector_9>
      28:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__vector_10>
      2c:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__vector_11>
      30:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      34:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      38:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      3c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      40:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__vector_16>
      44:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      48:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      4c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      50:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>

00000054 <hesham>:
      54:	74 61 80 0d 00 00 7b 79 7c 7a 76 79 7d 7d 79 79     ta....{y|zvy}}yy
      64:	7b 75 6f 6f 75 7a 7b 7f 89 89 8d a0 a6 9f a0 9e     {uoouz{.........
      74:	93 82 77 7c 7e 7a 7e 85 85 7f 77 77 78 71 72 7a     ..w|~z~...wwxqrz
      84:	7e 7f 7e 80 82 7c 78 7b 7c 7c 7c 7e 82 82 7e 81     ~.~..|x{|||~..~.
      94:	7f 81 99 af ae ab a8 9e 8a 75 6f 74 73 74 7d 84     .........uotst}.
      a4:	83 79 74 75 73 70 76 80 86 87 86 89 86 7f 7d 7f     .ytuspv.......}.
      b4:	80 81 80 84 86 82 80 81 7e 8b a7 b1 ac a9 a3 93     ........~.......
      c4:	7d 6d 6f 72 71 76 80 85 80 77 76 75 72 72 7a 84     }morqv...wvurrz.
      d4:	88 87 89 8a 84 7e 7d 7e 7e 7f 81 85 84 80 80 7e     .....~}~~......~
      e4:	80 96 ad ae a9 a5 9b 8a 74 6c 71 73 74 7b 82 84     ........tlqst{..
      f4:	7c 75 75 74 72 75 7d 85 88 87 88 88 82 7d 7c 7e     |uutru}......}|~
     104:	80 80 81 85 84 80 7f 7d 8a a5 b0 ac a7 9e 92 7e     .......}.......~
     114:	6d 6e 74 75 79 7e 83 81 77 73 74 74 74 79 81 88     mntuy~..wsttty..
     124:	88 86 87 84 80 7d 7d 80 82 81 83 84 82 7f 7c 78     .....}}.......|x
     134:	85 a1 af ac a5 9e 93 80 6f 6e 74 77 79 7d 83 82     ........ontwy}..
     144:	79 72 73 75 76 78 7f 87 89 86 84 84 82 7e 7c 7f     yrsuvx.......~|.
     154:	83 82 82 83 82 80 7e 7b 87 a2 af ac a5 9e 94 82     ......~{........
     164:	6f 6e 74 76 78 7b 81 83 7a 74 74 76 77 77 7c 85     ontvx{..zttvww|.
     174:	88 86 84 84 84 80 7d 7e 81 82 81 81 82 82 7f 7d     ......}~.......}
     184:	88 9f ab a9 a5 a0 98 87 76 73 75 75 76 79 7f 81     ........vsuuvy..
     194:	7b 77 77 77 76 75 79 81 84 83 84 85 85 82 7f 80     {wwwvuy.........
     1a4:	81 80 80 81 82 82 80 7d 86 99 a3 a3 a2 a0 9b 8d     .......}........
     1b4:	7e 7a 7a 77 75 77 7d 7e 7a 78 79 78 76 74 78 7d     ~zzwuw}~zxyxvtx}
     1c4:	7f 80 82 85 86 83 81 82 82 81 80 81 83 82 80 80     ................
     1d4:	88 98 a0 a1 a2 a1 9c 91 85 82 7f 7a 77 78 7b 7b     ...........zwx{{
     1e4:	78 77 78 76 74 73 75 79 7a 7b 7f 82 83 83 82 84     xwxvtsuyz{......
     1f4:	84 83 82 83 84 83 82 83 86 90 99 9c 9e 9f 9e 99     ................
     204:	91 8b 88 82 7e 7c 7b 7b 78 77 77 75 73 72 72 74     ....~|{{xwwusrrt
     214:	74 74 77 7a 7c 7e 7f 82 83 83 84 85 86 85 85 87     ttwz|~..........
     224:	86 8c 94 96 99 9a 9a 99 93 90 8e 8a 86 83 81 80     ................
     234:	7d 7b 7b 79 77 75 74 75 74 73 75 76 77 78 78 7b     }{{ywututsuvwxx{
     244:	7d 7d 7e 80 81 82 82 84 84 86 8f 91 92 95 95 96     }}~.............
     254:	94 91 92 8f 8d 8c 8a 89 86 84 83 81 7e 7d 7b 7a     ............~}{z
     264:	79 78 77 77 76 76 76 76 77 78 78 79 7a 7b 7c 7c     yxwwvvvvwxxyz{||
     274:	7d 7f 85 86 87 8a 8b 8b 8c 8b 8c 8c 8c 8d 8c 8a     }...............
     284:	8a 8a 87 87 86 84 84 82 81 81 7f 7e 7e 7c 7b 7c     ...........~~|{|
     294:	7a 7a 7a 79 7a 79 79 7d 7c 7c 7f 7f 7f 7e 82 83     zzzyzyy}||...~..
     2a4:	80 82 82 81 82 81 81 84 83 80 82 81 80 7e 7e 7e     .............~~~
     2b4:	80 80 7d 82 7f 7d 81 7d 7d 80 7d 7d 7d 7f 80 7b     ..}..}.}}.}}}..{
     2c4:	80 81 7d 80 80 7d 83 82 7f 86 81 84 83 80 85 83     ..}..}..........
     2d4:	80 83 82 81 80 7f 80 7d 7d 7f 7e 7b 7b 7d 7d 7d     .......}}.~{{}}}
     2e4:	7c 7d 7f 7f 7d 7f 81 7f 84 7f 80 80 80 81 7e 84     |}..}.........~.
     2f4:	7e 81 81 7d 80 80 7f 7f 7e 7f 7f 81 7f 7e 84 7b     ~..}....~....~.{
     304:	80 81 7d 81 7d 80 81 7c 7f 80 80 80 7e 82 80 7d     ..}.}..|....~..}
     314:	82 7f 7f 81 7f 81 7f 7f 82 7e 7f 82 80 7e 80 81     .........~...~..
     324:	7d 80 7f 81 7f 7f 82 7f 80 7c 83 80 7c 81 7e 80     }........|..|.~.
     334:	80 7f 81 80 7e 83 7f 7f 81 81 80 7f 80 7f 81 7c     ....~..........|
     344:	81 80 7f 7e 82 7f 7f 80 7b 85 7f 7d 80 81 7f 80     ...~....{..}....
     354:	7d 82 7f 7d 83 7d 83 7e 7f 82 7d 81 7e 80 80 7f     }..}.}.~..}.~...
     364:	80 81 81 7e 7f 81 83 7d 81 83 7e 80 80 7d 82 7e     ...~...}..~..}.~
     374:	7e 82 7e 80 7e 83 7e 7e 82 7e 7e 83 7e 80 82 7d     ~.~.~.~~.~~.~..}
     384:	85 7d 7f 83 7e 7d 82 7f 7e 81 7e 81 80 7e 80 82     .}..~}..~.~..~..
     394:	7c 81 80 80 7f 7f 82 7c 80 7f 81 7e 80 81 7f 81     |......|...~....
     3a4:	7b 84 7f 7d 82 7d 80 80 7e 80 80 7f 81 7f 7f 82     {..}.}..~.......
     3b4:	7f 7e 81 7e 7d 82 7e 7f 83 7c 7f 81 7e 80 81 7e     .~.~}.~..|..~..~
     3c4:	80 81 7c 83 7e 7e 82 7e 81 7f 7d 84 7f 7c 83 7e     ..|.~~.~..}..|.~
     3d4:	81 7e 7d 80 80 7f 80 7f 80 80 7f 81 7f 7f 81 80     .~}.............
     3e4:	7e 82 7e 7f 80 7f 7f 81 7f 7d 81 7e 81 7f 7d 84     ~.~......}.~..}.
     3f4:	7d 7f 82 7d 84 7e 7d 84 7c 80 81 7c 82 7f 7e 82     }..}.~}.|..|..~.
     404:	7d 7f 83 7c 80 81 7d 83 7c 81 83 7a 83 7f 80 83     }..|..}.|..z....
     414:	7b 82 81 7d 82 7d 80 83 7b 81 81 7d 82 7d 80 82     {..}.}..{..}.}..
     424:	7e 81 80 7f 81 7d 7f 86 7a 80 83 7b 83 7e 7d 84     ~....}..z..{.~}.
     434:	7b 7f 84 7a 83 7e 7c 83 7f 7d 83 7f 7e 85 7a 82     {..z.~|..}..~.z.
     444:	81 7c 83 7d 7e 81 7e 80 7e 7f 82 7f 7e 80 80 7e     .|.}~.~.~...~..~
     454:	82 7c 81 82 7a 82 82 7c 84 7e 80 85 79 84 81 7c     .|..z..|.~..y..|
     464:	84 7e 7e 82 7c 81 7f 7b 84 7e 7e 80 7e 80 81 7c     .~~.|..{.~~.~..|
     474:	81 81 7e 81 7d 80 83 7c 80 82 7e 80 7d 7f 81 7e     ..~.}..|..~.}..~
     484:	7c 84 81 7c 85 7d 82 81 7c 84 7f 7c 83 80 7e 82     |..|.}..|..|..~.
     494:	7f 80 80 7f 80 7e 81 7f 7d 82 7f 7f 7e 80 81 7d     .....~..}...~..}
     4a4:	7f 7d 7f 82 7d 7e 84 7b 83 7f 7d 84 7c 81 81 7b     .}..}~.{..}.|..{
     4b4:	81 81 7f 7f 7e 82 80 7e 7f 82 7e 7e 7f 82 7f 7e     ....~..~..~~...~
     4c4:	82 81 80 7b 81 83 7a 7e 82 7e 82 7f 7d 84 7c 80     ...{..z~.~..}.|.
     4d4:	81 7e 84 7c 83 82 7b 82 80 7e 80 7d 81 81 7f 7e     .~.|..{..~.}...~
     4e4:	82 82 79 82 80 7e 7f 7c 84 7e 7a 83 80 80 7e 7e     ..y..~.|.~z...~~
     4f4:	85 7d 7d 80 80 81 7c 7f 81 7c 7f 81 7d 82 7e 7e     .}}...|..|..}.~~
     504:	84 7b 7f 81 7e 82 7d 7e 83 7f 7f 7e 80 82 7e 7f     .{..~.}~...~..~.
     514:	81 80 7e 7e 80 82 7c 80 81 7f 82 7c 81 83 7d 80     ..~~..|....|..}.
     524:	80 80 81 7c 80 83 7e 80 81 7f 80 7e 7f 80 7f 80     ...|..~....~....
     534:	7e 80 81 7e 7f 7f 82 7f 7e 81 80 81 7f 7f 82 7f     ~..~....~.......
     544:	7f 80 7f 81 7f 7e 7f 7f 80 7f 7f 81 80 7e 80 80     .....~.......~..
     554:	80 80 7f 81 80 7e 7f 80 80 80 7f 7f 81 7f 7f 80     .....~..........
     564:	81 81 7e 7f 82 81 7e 7f 81 80 7e 7e 80 7f 7e 7e     ..~...~...~~..~~
     574:	80 80 7e 7e 7f 7f 7f 7e 80 81 7f 80 80 7f 7f 7f     ..~~...~........
     584:	80 80 7e 7f 80 80 7f 7e 80 81 7f 7f 80 80 7f 7f     ..~....~........
     594:	7f 81 7f 7e 81 80 7f 7f 7f 80 80 80 81 81 80 81     ...~............
     5a4:	80 81 81 7f 81 81 80 80 7f 7f 80 7e 7f 7f 7f 7f     ...........~....
     5b4:	7e 7e 7f 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f 80 7f 7f     ~~.~~...........
     5c4:	81 83 84 84 85 86 86 85 85 85 84 83 82 82 81 80     ................
     5d4:	7f 80 7f 7e 7e 7f 7e 7e 7e 7e 7e 7e 7e 7e 7f 7e     ...~~.~~~~~~~~.~
     5e4:	7e 7f 7f 7f 7f 80 80 7f 7f 80 7f 7f 80 80 7f 7f     ~...............
     5f4:	7e 83 89 8a 8c 90 91 92 90 8e 8d 89 85 83 81 7f     ~...............
     604:	7c 7b 7b 7a 79 7a 7b 7c 7c 7d 7f 7f 80 81 82 82     |{{zyz{||}......
     614:	82 82 81 81 81 81 80 80 81 81 7f 7f 80 80 7f 7f     ................
     624:	7f 81 8e 9a 9c a1 a5 a6 a1 96 90 8b 81 79 75 74     .............yut
     634:	74 71 71 75 76 78 78 7b 80 80 80 84 85 86 85 84     tqquvxx{........
     644:	87 84 82 82 81 81 7f 7d 7f 7e 7d 7d 7c 7e 7e 7c     .......}.~}}|~~|
     654:	7f 7e 8a a1 a7 a8 ad ae ab 9b 8a 87 7e 73 6c 69     .~..........~sli
     664:	6e 6e 6a 6f 77 7b 7d 7e 84 88 87 86 88 89 88 84     nnjow{}~........
     674:	82 84 82 7e 7c 7d 7e 7c 7b 7d 7e 7e 7d 7f 80 80     ...~|}~|{}~~}...
     684:	7f 7e 8c a7 b0 ac ac ac a7 94 80 7b 78 6f 66 65     .~.........{xofe
     694:	6d 72 6e 71 7a 81 83 80 84 8c 8a 85 85 87 87 81     mrnqz...........
     6a4:	7d 7f 81 7e 7a 7a 7f 81 7e 7d 80 83 81 7e 7f 83     }..~zz..~}...~..
     6b4:	82 7d 89 a5 b1 ab a5 a7 a5 93 7c 76 78 72 67 63     .}........|vxrgc
     6c4:	6d 76 72 70 7a 84 86 82 82 8b 8d 86 82 84 87 83     mvrpz...........
     6d4:	7c 7b 7f 7f 7b 79 7c 80 7f 7b 7d 81 83 80 7e 81     |{..{y|..{}...~.
     6e4:	84 80 88 a1 b0 ad a6 a2 a1 95 7f 74 76 74 6c 66     ...........tvtlf
     6f4:	6a 75 76 73 77 80 87 86 82 87 8d 8b 85 81 84 85     juvsw...........
     704:	7f 7a 7b 7d 7e 7a 78 7d 80 7f 7c 7d 82 84 80 7f     .z{}~zx}..|}....
     714:	81 81 8a 9e ab ac a7 a1 9e 94 83 79 77 74 6f 69     ...........ywtoi
     724:	68 70 74 73 75 7b 83 87 85 86 8a 8c 89 85 83 84     hptsu{..........
     734:	83 7e 7b 7b 7d 7d 7a 79 7d 7f 7f 7e 7f 82 83 81     .~{{}}zy}..~....
     744:	81 80 89 9d aa aa a7 a4 a2 9c 8b 7e 79 75 70 69     ...........~yupi
     754:	65 6b 70 71 72 76 7e 84 84 84 87 8a 8b 88 84 84     ekpqrv~.........
     764:	86 83 7f 7c 7d 7f 7d 7a 7a 7d 7f 7e 7d 7e 81 81     ...|}.}zz}.~}~..
     774:	80 7e 82 93 a2 a6 a6 a5 a6 a5 99 8b 82 7d 77 6f     .~...........}wo
     784:	67 67 6b 6e 6f 70 75 7d 81 81 82 85 89 8a 87 84     ggknopu}........
     794:	85 86 85 81 7f 7f 81 80 7e 7c 7d 7f 80 7e 7d 7e     ........~|}..~}~
     7a4:	80 7f 81 8c 9a a3 a5 a4 a3 a4 9f 94 88 80 7a 74     ..............zt
     7b4:	6d 67 67 6a 6e 70 71 76 7d 81 82 82 84 87 88 85     mggjnpqv}.......
     7c4:	83 82 83 83 81 7f 80 81 82 82 80 80 81 81 80 7e     ...............~
     7d4:	7e 7e 81 89 93 9a 9e a0 a1 a1 9e 96 8e 86 7f 79     ~~.............y
     7e4:	71 6b 6a 6a 6b 6d 6f 73 78 7d 80 82 83 85 85 85     qkjjkmosx}......
     7f4:	83 82 81 81 81 80 80 80 81 82 82 82 82 82 82 81     ................
     804:	80 7f 7f 83 8c 93 97 9a 9c 9e 9f 9b 95 8e 87 80     ................
     814:	79 71 6b 68 67 67 68 6a 6f 74 79 7e 81 84 87 89     yqkhgghjoty~....
     824:	89 88 86 85 84 82 80 7f 7f 7f 80 7f 80 81 82 82     ................
     834:	82 82 81 82 88 8f 93 97 99 9c 9f 9f 9d 98 92 8c     ................
     844:	87 7f 77 71 6c 69 67 66 66 69 6d 72 76 7a 7e 82     ..wqligffimrvz~.
     854:	85 87 88 88 88 87 85 84 82 81 80 80 7f 80 81 82     ................
     864:	84 85 85 86 89 8e 93 95 96 98 99 99 97 93 8f 8a     ................
     874:	85 80 7a 74 70 6d 6c 6b 6b 6c 6f 72 75 79 7b 7f     ..ztpmlkkloruy{.
     884:	82 84 85 85 85 85 85 84 83 82 82 82 82 83 83 84     ................
     894:	85 86 86 86 86 89 8d 90 92 94 95 96 98 96 94 91     ................
     8a4:	8c 88 84 7e 78 74 70 6e 6b 6a 6a 6c 6e 71 73 76     ...~xtpnkjjlnqsv
     8b4:	7a 7d 7f 81 83 83 84 84 84 83 83 82 82 82 81 82     z}..............
     8c4:	82 83 84 84 84 85 86 8a 8f 92 94 96 99 9b 9b 99     ................
     8d4:	96 92 8f 8a 84 7e 78 73 6e 6b 68 67 67 68 6b 6d     .....~xsnkhgghkm
     8e4:	70 74 78 7c 80 82 84 86 87 87 87 86 86 85 84 83     ptx|............
     8f4:	83 82 83 82 83 83 83 84 88 8c 90 93 96 98 9b 9d     ................
     904:	9c 99 96 92 8e 88 82 7c 76 71 6d 6a 68 67 68 69     .......|vqmjhghi
     914:	6c 6f 72 76 7a 7e 81 83 85 86 87 87 87 86 85 84     lorvz~..........
     924:	83 83 82 82 82 83 82 83 84 86 8a 8f 92 95 98 9b     ................
     934:	9d 9e 9c 99 95 91 8c 85 7e 78 73 6e 6b 68 67 67     ........~xsnkhgg
     944:	68 6a 6d 70 74 78 7c 7f 82 84 86 87 87 87 86 86     hjmptx|.........
     954:	85 84 83 82 82 82 82 82 83 83 84 87 8c 90 93 96     ................
     964:	98 9b 9d 9c 9a 97 93 8f 89 82 7c 77 72 6d 6a 68     ..........|wrmjh
     974:	67 67 69 6c 6f 72 76 79 7d 7f 81 83 84 85 84 84     ggilorvy}.......
     984:	84 83 83 82 81 81 82 83 83 84 85 86 89 8e 91 94     ................
     994:	98 9a 9d 9e 9d 9b 98 94 8f 89 82 7c 76 71 6c 68     ...........|vqlh
     9a4:	65 64 64 66 68 6b 6e 73 77 7b 7e 81 84 87 88 89     eddfhknsw{~.....
     9b4:	89 88 88 87 86 85 84 84 84 83 83 83 84 87 8b 8f     ................
     9c4:	92 95 98 9b 9d 9c 9b 98 94 90 8a 83 7d 77 72 6d     ............}wrm
     9d4:	69 66 65 65 67 69 6c 70 74 78 7d 80 83 86 88 89     ifeegilptx}.....
     9e4:	89 89 88 87 86 85 83 82 82 81 81 81 81 82 86 8b     ................
     9f4:	8e 91 95 98 9c 9d 9d 9b 98 94 90 8b 84 7d 77 72     .............}wr
     a04:	6d 69 66 65 65 67 69 6c 70 74 79 7e 81 84 86 88     mifeegilpty~....
     a14:	89 8a 89 88 87 85 84 83 82 81 81 81 82 82 83 87     ................
     a24:	8c 90 93 97 9b 9e a0 a0 9e 9c 98 93 8d 86 7f 78     ...............x
     a34:	73 6e 69 66 64 64 65 67 6a 6e 72 76 7b 7f 81 84     snifddegjnrv{...
     a44:	86 87 87 86 85 84 83 81 80 7f 7e 7e 7f 80 81 83     ..........~~....
     a54:	88 8e 93 97 9b 9f a3 a4 a4 a3 a0 9b 96 8e 87 80     ................
     a64:	79 73 6d 68 65 63 63 64 66 6a 6e 72 77 7b 7f 82     ysmheccdfjnrw{..
     a74:	85 86 87 87 86 85 84 82 80 7f 7e 7e 7d 7e 7f 80     ..........~~}~..
     a84:	84 8a 8f 94 99 9e a2 a5 a6 a6 a4 a0 9c 95 8e 87     ................
     a94:	7f 79 72 6c 68 66 64 64 65 67 6b 6f 72 77 7a 7e     .yrlhfddegkorwz~
     aa4:	81 82 84 84 84 83 82 80 7f 7e 7d 7d 7d 7d 7e 7f     .........~}}}}~.
     ab4:	82 88 8d 93 98 9c a1 a5 a8 a8 a6 a4 a0 9b 94 8d     ................
     ac4:	86 7f 78 72 6c 68 65 64 65 66 68 6b 6f 73 77 7a     ..xrlhedefhkoswz
     ad4:	7d 7f 81 82 82 82 81 80 7f 7d 7c 7c 7b 7b 7c 7d     }........}||{{|}
     ae4:	7f 83 89 8e 93 97 9c a1 a5 a6 a6 a5 a3 9f 9a 94     ................
     af4:	8d 86 7f 79 73 6e 6b 69 67 67 69 6b 6d 70 74 77     ...ysnkiggikmptw
     b04:	7a 7c 7e 7f 80 80 7f 7e 7d 7c 7a 79 79 79 79 7a     z|~....~}|zyyyyz
     b14:	7b 7e 83 89 8f 94 99 9f a3 a6 a8 a8 a7 a4 a0 9a     {~..............
     b24:	94 8d 86 80 79 74 6f 6c 69 69 69 6a 6c 6f 72 75     ....ytoliiijloru
     b34:	78 7b 7d 7f 80 80 7f 7e 7d 7b 7a 78 77 76 76 77     x{}....~}{zxwvvw
     b44:	78 7a 7d 82 88 8e 93 98 9e a2 a5 a7 a7 a6 a3 9f     xz}.............
     b54:	9a 94 8e 88 81 7b 76 72 6f 6d 6c 6c 6d 6e 70 73     .....{vromllmnps
     b64:	75 77 79 7a 7b 7c 7b 7a 79 78 76 75 74 73 73 73     uwyz{|{zyxvutsss
     b74:	75 76 78 7c 80 86 8c 91 96 9b a0 a3 a5 a6 a6 a4     uvx|............
     b84:	a1 9d 99 94 8e 89 84 80 7d 79 77 76 76 76 77 78     ........}ywvvvwx
     b94:	7a 7b 7c 7d 7d 7d 7c 7b 79 77 75 73 71 6f 6e 6e     z{|}}}|{ywusqonn
     ba4:	6e 6f 70 72 74 77 7c 81 86 8b 8f 94 98 9b 9c 9d     noprtw|.........
     bb4:	9e 9d 9b 98 95 92 8e 8b 88 85 82 80 7e 7e 7d 7d     ............~~}}
     bc4:	7e 7e 7e 7f 7f 80 7f 7e 7d 7c 7b 79 77 75 74 72     ~~~....~}|{ywutr
     bd4:	72 71 71 71 72 74 75 77 79 7c 7f 83 86 89 8c 8e     rqqqrtuwy|......
     be4:	91 92 93 93 93 92 91 8f 8d 8b 89 87 85 84 82 81     ................
     bf4:	80 80 80 7f 7f 80 80 7f 7f 7f 7f 7e 7d 7d 7c 7b     ...........~}}|{
     c04:	7a 7a 79 79 78 78 78 78 79 7a 7a 7b 7c 7e 80 82     zzyyxxxxyzz{|~..
     c14:	83 85 87 89 8b 8c 8d 8d 8e 8d 8c 8b 8a 89 87 86     ................
     c24:	84 83 82 80 80 7f 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ......~~~~~~~~~~
     c34:	7d 7d 7d 7d 7d 7d 7d 7c 7c 7c 7c 7c 7c 7d 7d 7d     }}}}}}}||||||}}}
     c44:	7e 7f 80 81 83 84 85 87 88 88 89 8a 8a 89 89 89     ~...............
     c54:	88 86 85 84 83 82 81 80 7f 7f 7e 7e 7e 7e 7d 7d     ..........~~~~}}
     c64:	7d 7d 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7f     }}~~~~~~~~~~~~~.
     c74:	7e 7f 7f 7e 7f 80 80 81 81 82 82 83 84 84 84 84     ~..~............
     c84:	84 84 84 83 83 83 82 82 81 81 80 80 80 7f 80 7f     ................
     c94:	7e 7f 7f 7e 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ~..~............
     ca4:	80 7f 7f 7f 7f 80 80 80 80 7f 80 80 81 81 81 81     ................
     cb4:	82 82 82 82 82 82 82 82 81 81 81 81 80 80 81 80     ................
     cc4:	7f 7f 7f 80 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
     cd4:	7f 7f 7f 7f 7f 7e 7f 80 80 7f 80 7f 80 80 80 80     .....~..........
     ce4:	7f 80 80 80 80 80 81 81 81 81 80 81 81 80 80 80     ................
     cf4:	80 80 7f 7f 80 7f 7f 7f 7f 7e 7e 7e 7f 7e 7e 7e     .........~~~.~~~
     d04:	7f 7f 7f 7f 7f 80 7f 7f 80 7f 7f 80 80 80 7f 80     ................
     d14:	7f 80 80 80 7f 80 7f 7f 7f 80 80 7f 80 80 80 80     ................
     d24:	80 80 7f 7f 80 7f 80 80 7f 80 7f 80 80 80 80 7f     ................
     d34:	80 7f 7f 7f 7f 7f 7f 7f 7f 80 7f 7f 7f 7f 7f 80     ................
     d44:	80 7f 7f 80 7f 7f 7f 80 80 7f 7f 80 7f 7f 7f 7f     ................
     d54:	7f 7f 7f 80 7f 80 80 7f 80 7f 80 80 80 80 80 80     ................
     d64:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     d74:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     d84:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     d94:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     da4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     db4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     dc4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     dd4:	80 80 80 80 80 80 43 53 45 54 08 00 00 00 af 6f     ......CSET.....o
     de4:	00 00 00 00 00 00 69 64 33 20 9d 00 00 00 49 44     ......id3 ....ID
     df4:	33 03 00 00 00 00 01 13 54 45 4e 43 00 00 00 49     3.......TENC...I
     e04:	00 00 01 ff fe 53 00 77 00 69 00 74 00 63 00 68     .....S.w.i.t.c.h
     e14:	00 20 00 54 00 72 00 69 00 61 00 6c 00 20 00 56     . .T.r.i.a.l. .V
     e24:	00 65 00 72 00 73 00 69 00 6f 00 6e 00 20 00 a9     .e.r.s.i.o.n. ..
     e34:	00 20 00 4e 00 43 00 48 00 20 00 53 00 6f 00 66     . .N.C.H. .S.o.f
     e44:	00 74 00 77 00 61 00 72 00 65 00 54 53 53 45 00     .t.w.a.r.e.TSSE.
     e54:	00 00 1d 00 00 01 ff fe 4c 00 61 00 76 00 66 00     ........L.a.v.f.
     e64:	35 00 38 00 2e 00 32 00 30 00 2e 00 31 00 30 00     5.8...2.0...1.0.
     e74:	30 00 54 49 54 32 00 00 00 0f 00 00 01 ff fe 68     0.TIT2.........h
     e84:	00 65 00 73 00 68 00 61 00 6d 00 00 4c 49 53 54     .e.s.h.a.m..LIST
     e94:	56 00 00 00 49 4e 46 4f 49 4e 41 4d 07 00 00 00     V...INFOINAM....
     ea4:	68 65 73 68 61 6d 00 00 49 53 46 54 0e 00 00 00     hesham..ISFT....
     eb4:	4c 61 76 66 35 38 2e 32 30 2e 31 30 30 00 43 4f     Lavf58.20.100.CO
     ec4:	44 45 24 00 00 00 53 77 69 74 63 68 20 54 72 69     DE$...Switch Tri
     ed4:	61 6c 20 56 65 72 73 69 6f 6e 20 a9 20 4e 43 48     al Version . NCH
     ee4:	20 53 6f 66 74 77 61 72 65 00 44 49 53 50 0c 00      Software.DISP..
     ef4:	00 00 01 00 00 00 68 65 73 68 61 6d 00 00           ......hesham..

00000f02 <__ctors_end>:
     f02:	11 24       	eor	r1, r1
     f04:	1f be       	out	0x3f, r1	; 63
     f06:	cf e5       	ldi	r28, 0x5F	; 95
     f08:	d8 e0       	ldi	r29, 0x08	; 8
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	cd bf       	out	0x3d, r28	; 61

00000f0e <__do_clear_bss>:
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	a8 e6       	ldi	r26, 0x68	; 104
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <.do_clear_bss_start>

00000f16 <.do_clear_bss_loop>:
     f16:	1d 92       	st	X+, r1

00000f18 <.do_clear_bss_start>:
     f18:	a4 37       	cpi	r26, 0x74	; 116
     f1a:	b1 07       	cpc	r27, r17
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <.do_clear_bss_loop>

00000f1e <__do_copy_data>:
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	a0 e6       	ldi	r26, 0x60	; 96
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 ec       	ldi	r30, 0xC6	; 198
     f26:	f1 e4       	ldi	r31, 0x41	; 65
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <.do_copy_data_start>

00000f2a <.do_copy_data_loop>:
     f2a:	05 90       	lpm	r0, Z+
     f2c:	0d 92       	st	X+, r0

00000f2e <.do_copy_data_start>:
     f2e:	a8 36       	cpi	r26, 0x68	; 104
     f30:	b1 07       	cpc	r27, r17
     f32:	d9 f7       	brne	.-10     	; 0xf2a <.do_copy_data_loop>
     f34:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <main>
     f38:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <_exit>

00000f3c <__bad_interrupt>:
     f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f40 <__fixunssfsi>:
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	7b 01       	movw	r14, r22
     f4a:	8c 01       	movw	r16, r24
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	5f e4       	ldi	r21, 0x4F	; 79
     f54:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__gesf2>
     f58:	88 23       	and	r24, r24
     f5a:	8c f0       	brlt	.+34     	; 0xf7e <__fixunssfsi+0x3e>
     f5c:	c8 01       	movw	r24, r16
     f5e:	b7 01       	movw	r22, r14
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	5f e4       	ldi	r21, 0x4F	; 79
     f68:	0e 94 18 09 	call	0x1230	; 0x1230 <__subsf3>
     f6c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fixsfsi>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	20 50       	subi	r18, 0x00	; 0
     f76:	30 40       	sbci	r19, 0x00	; 0
     f78:	40 40       	sbci	r20, 0x00	; 0
     f7a:	50 48       	sbci	r21, 0x80	; 128
     f7c:	06 c0       	rjmp	.+12     	; 0xf8a <__fixunssfsi+0x4a>
     f7e:	c8 01       	movw	r24, r16
     f80:	b7 01       	movw	r22, r14
     f82:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fixsfsi>
     f86:	9b 01       	movw	r18, r22
     f88:	ac 01       	movw	r20, r24
     f8a:	b9 01       	movw	r22, r18
     f8c:	ca 01       	movw	r24, r20
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <_fpadd_parts>:
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 ed       	ldi	r30, 0xD2	; 210
     f9e:	f7 e0       	ldi	r31, 0x07	; 7
     fa0:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__prologue_saves__>
     fa4:	dc 01       	movw	r26, r24
     fa6:	2b 01       	movw	r4, r22
     fa8:	fa 01       	movw	r30, r20
     faa:	9c 91       	ld	r25, X
     fac:	92 30       	cpi	r25, 0x02	; 2
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <_fpadd_parts+0x1a>
     fb0:	39 c1       	rjmp	.+626    	; 0x1224 <_fpadd_parts+0x28c>
     fb2:	eb 01       	movw	r28, r22
     fb4:	88 81       	ld	r24, Y
     fb6:	82 30       	cpi	r24, 0x02	; 2
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <_fpadd_parts+0x24>
     fba:	33 c1       	rjmp	.+614    	; 0x1222 <_fpadd_parts+0x28a>
     fbc:	94 30       	cpi	r25, 0x04	; 4
     fbe:	69 f4       	brne	.+26     	; 0xfda <_fpadd_parts+0x42>
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_fpadd_parts+0x2e>
     fc4:	2f c1       	rjmp	.+606    	; 0x1224 <_fpadd_parts+0x28c>
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 91       	ld	r25, X
     fca:	11 97       	sbiw	r26, 0x01	; 1
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	98 17       	cp	r25, r24
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <_fpadd_parts+0x3c>
     fd2:	28 c1       	rjmp	.+592    	; 0x1224 <_fpadd_parts+0x28c>
     fd4:	a0 e6       	ldi	r26, 0x60	; 96
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	25 c1       	rjmp	.+586    	; 0x1224 <_fpadd_parts+0x28c>
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <_fpadd_parts+0x48>
     fde:	21 c1       	rjmp	.+578    	; 0x1222 <_fpadd_parts+0x28a>
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	a9 f4       	brne	.+42     	; 0x100e <_fpadd_parts+0x76>
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	09 f0       	breq	.+2      	; 0xfea <_fpadd_parts+0x52>
     fe8:	1d c1       	rjmp	.+570    	; 0x1224 <_fpadd_parts+0x28c>
     fea:	9a 01       	movw	r18, r20
     fec:	ad 01       	movw	r20, r26
     fee:	88 e0       	ldi	r24, 0x08	; 8
     ff0:	ea 01       	movw	r28, r20
     ff2:	09 90       	ld	r0, Y+
     ff4:	ae 01       	movw	r20, r28
     ff6:	e9 01       	movw	r28, r18
     ff8:	09 92       	st	Y+, r0
     ffa:	9e 01       	movw	r18, r28
     ffc:	81 50       	subi	r24, 0x01	; 1
     ffe:	c1 f7       	brne	.-16     	; 0xff0 <_fpadd_parts+0x58>
    1000:	e2 01       	movw	r28, r4
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	9c 91       	ld	r25, X
    1008:	89 23       	and	r24, r25
    100a:	81 83       	std	Z+1, r24	; 0x01
    100c:	08 c1       	rjmp	.+528    	; 0x121e <_fpadd_parts+0x286>
    100e:	92 30       	cpi	r25, 0x02	; 2
    1010:	09 f4       	brne	.+2      	; 0x1014 <_fpadd_parts+0x7c>
    1012:	07 c1       	rjmp	.+526    	; 0x1222 <_fpadd_parts+0x28a>
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	2d 90       	ld	r2, X+
    1018:	3c 90       	ld	r3, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	eb 01       	movw	r28, r22
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	ad 90       	ld	r10, X+
    1026:	bd 90       	ld	r11, X+
    1028:	cd 90       	ld	r12, X+
    102a:	dc 90       	ld	r13, X
    102c:	17 97       	sbiw	r26, 0x07	; 7
    102e:	ec 80       	ldd	r14, Y+4	; 0x04
    1030:	fd 80       	ldd	r15, Y+5	; 0x05
    1032:	0e 81       	ldd	r16, Y+6	; 0x06
    1034:	1f 81       	ldd	r17, Y+7	; 0x07
    1036:	91 01       	movw	r18, r2
    1038:	28 1b       	sub	r18, r24
    103a:	39 0b       	sbc	r19, r25
    103c:	b9 01       	movw	r22, r18
    103e:	37 ff       	sbrs	r19, 7
    1040:	04 c0       	rjmp	.+8      	; 0x104a <_fpadd_parts+0xb2>
    1042:	66 27       	eor	r22, r22
    1044:	77 27       	eor	r23, r23
    1046:	62 1b       	sub	r22, r18
    1048:	73 0b       	sbc	r23, r19
    104a:	60 32       	cpi	r22, 0x20	; 32
    104c:	71 05       	cpc	r23, r1
    104e:	0c f0       	brlt	.+2      	; 0x1052 <_fpadd_parts+0xba>
    1050:	61 c0       	rjmp	.+194    	; 0x1114 <_fpadd_parts+0x17c>
    1052:	12 16       	cp	r1, r18
    1054:	13 06       	cpc	r1, r19
    1056:	6c f5       	brge	.+90     	; 0x10b2 <_fpadd_parts+0x11a>
    1058:	37 01       	movw	r6, r14
    105a:	48 01       	movw	r8, r16
    105c:	06 2e       	mov	r0, r22
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <_fpadd_parts+0xd0>
    1060:	96 94       	lsr	r9
    1062:	87 94       	ror	r8
    1064:	77 94       	ror	r7
    1066:	67 94       	ror	r6
    1068:	0a 94       	dec	r0
    106a:	d2 f7       	brpl	.-12     	; 0x1060 <_fpadd_parts+0xc8>
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	04 c0       	rjmp	.+8      	; 0x107e <_fpadd_parts+0xe6>
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	44 1f       	adc	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	6a 95       	dec	r22
    1080:	d2 f7       	brpl	.-12     	; 0x1076 <_fpadd_parts+0xde>
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	30 40       	sbci	r19, 0x00	; 0
    1086:	40 40       	sbci	r20, 0x00	; 0
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	2e 21       	and	r18, r14
    108c:	3f 21       	and	r19, r15
    108e:	40 23       	and	r20, r16
    1090:	51 23       	and	r21, r17
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	41 05       	cpc	r20, r1
    1098:	51 05       	cpc	r21, r1
    109a:	21 f0       	breq	.+8      	; 0x10a4 <_fpadd_parts+0x10c>
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	79 01       	movw	r14, r18
    10a6:	8a 01       	movw	r16, r20
    10a8:	e6 28       	or	r14, r6
    10aa:	f7 28       	or	r15, r7
    10ac:	08 29       	or	r16, r8
    10ae:	19 29       	or	r17, r9
    10b0:	3c c0       	rjmp	.+120    	; 0x112a <_fpadd_parts+0x192>
    10b2:	23 2b       	or	r18, r19
    10b4:	d1 f1       	breq	.+116    	; 0x112a <_fpadd_parts+0x192>
    10b6:	26 0e       	add	r2, r22
    10b8:	37 1e       	adc	r3, r23
    10ba:	35 01       	movw	r6, r10
    10bc:	46 01       	movw	r8, r12
    10be:	06 2e       	mov	r0, r22
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <_fpadd_parts+0x132>
    10c2:	96 94       	lsr	r9
    10c4:	87 94       	ror	r8
    10c6:	77 94       	ror	r7
    10c8:	67 94       	ror	r6
    10ca:	0a 94       	dec	r0
    10cc:	d2 f7       	brpl	.-12     	; 0x10c2 <_fpadd_parts+0x12a>
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <_fpadd_parts+0x148>
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	44 1f       	adc	r20, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	6a 95       	dec	r22
    10e2:	d2 f7       	brpl	.-12     	; 0x10d8 <_fpadd_parts+0x140>
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	30 40       	sbci	r19, 0x00	; 0
    10e8:	40 40       	sbci	r20, 0x00	; 0
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	2a 21       	and	r18, r10
    10ee:	3b 21       	and	r19, r11
    10f0:	4c 21       	and	r20, r12
    10f2:	5d 21       	and	r21, r13
    10f4:	21 15       	cp	r18, r1
    10f6:	31 05       	cpc	r19, r1
    10f8:	41 05       	cpc	r20, r1
    10fa:	51 05       	cpc	r21, r1
    10fc:	21 f0       	breq	.+8      	; 0x1106 <_fpadd_parts+0x16e>
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	59 01       	movw	r10, r18
    1108:	6a 01       	movw	r12, r20
    110a:	a6 28       	or	r10, r6
    110c:	b7 28       	or	r11, r7
    110e:	c8 28       	or	r12, r8
    1110:	d9 28       	or	r13, r9
    1112:	0b c0       	rjmp	.+22     	; 0x112a <_fpadd_parts+0x192>
    1114:	82 15       	cp	r24, r2
    1116:	93 05       	cpc	r25, r3
    1118:	2c f0       	brlt	.+10     	; 0x1124 <_fpadd_parts+0x18c>
    111a:	1c 01       	movw	r2, r24
    111c:	aa 24       	eor	r10, r10
    111e:	bb 24       	eor	r11, r11
    1120:	65 01       	movw	r12, r10
    1122:	03 c0       	rjmp	.+6      	; 0x112a <_fpadd_parts+0x192>
    1124:	ee 24       	eor	r14, r14
    1126:	ff 24       	eor	r15, r15
    1128:	87 01       	movw	r16, r14
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	9c 91       	ld	r25, X
    112e:	d2 01       	movw	r26, r4
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	8c 91       	ld	r24, X
    1134:	98 17       	cp	r25, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <_fpadd_parts+0x1a2>
    1138:	45 c0       	rjmp	.+138    	; 0x11c4 <_fpadd_parts+0x22c>
    113a:	99 23       	and	r25, r25
    113c:	39 f0       	breq	.+14     	; 0x114c <_fpadd_parts+0x1b4>
    113e:	a8 01       	movw	r20, r16
    1140:	97 01       	movw	r18, r14
    1142:	2a 19       	sub	r18, r10
    1144:	3b 09       	sbc	r19, r11
    1146:	4c 09       	sbc	r20, r12
    1148:	5d 09       	sbc	r21, r13
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <_fpadd_parts+0x1c0>
    114c:	a6 01       	movw	r20, r12
    114e:	95 01       	movw	r18, r10
    1150:	2e 19       	sub	r18, r14
    1152:	3f 09       	sbc	r19, r15
    1154:	40 0b       	sbc	r20, r16
    1156:	51 0b       	sbc	r21, r17
    1158:	57 fd       	sbrc	r21, 7
    115a:	08 c0       	rjmp	.+16     	; 0x116c <_fpadd_parts+0x1d4>
    115c:	11 82       	std	Z+1, r1	; 0x01
    115e:	33 82       	std	Z+3, r3	; 0x03
    1160:	22 82       	std	Z+2, r2	; 0x02
    1162:	24 83       	std	Z+4, r18	; 0x04
    1164:	35 83       	std	Z+5, r19	; 0x05
    1166:	46 83       	std	Z+6, r20	; 0x06
    1168:	57 83       	std	Z+7, r21	; 0x07
    116a:	1d c0       	rjmp	.+58     	; 0x11a6 <_fpadd_parts+0x20e>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	81 83       	std	Z+1, r24	; 0x01
    1170:	33 82       	std	Z+3, r3	; 0x03
    1172:	22 82       	std	Z+2, r2	; 0x02
    1174:	88 27       	eor	r24, r24
    1176:	99 27       	eor	r25, r25
    1178:	dc 01       	movw	r26, r24
    117a:	82 1b       	sub	r24, r18
    117c:	93 0b       	sbc	r25, r19
    117e:	a4 0b       	sbc	r26, r20
    1180:	b5 0b       	sbc	r27, r21
    1182:	84 83       	std	Z+4, r24	; 0x04
    1184:	95 83       	std	Z+5, r25	; 0x05
    1186:	a6 83       	std	Z+6, r26	; 0x06
    1188:	b7 83       	std	Z+7, r27	; 0x07
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <_fpadd_parts+0x20e>
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	44 1f       	adc	r20, r20
    1192:	55 1f       	adc	r21, r21
    1194:	24 83       	std	Z+4, r18	; 0x04
    1196:	35 83       	std	Z+5, r19	; 0x05
    1198:	46 83       	std	Z+6, r20	; 0x06
    119a:	57 83       	std	Z+7, r21	; 0x07
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	93 83       	std	Z+3, r25	; 0x03
    11a4:	82 83       	std	Z+2, r24	; 0x02
    11a6:	24 81       	ldd	r18, Z+4	; 0x04
    11a8:	35 81       	ldd	r19, Z+5	; 0x05
    11aa:	46 81       	ldd	r20, Z+6	; 0x06
    11ac:	57 81       	ldd	r21, Z+7	; 0x07
    11ae:	da 01       	movw	r26, r20
    11b0:	c9 01       	movw	r24, r18
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	a1 09       	sbc	r26, r1
    11b6:	b1 09       	sbc	r27, r1
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	af 4f       	sbci	r26, 0xFF	; 255
    11be:	bf 43       	sbci	r27, 0x3F	; 63
    11c0:	28 f3       	brcs	.-54     	; 0x118c <_fpadd_parts+0x1f4>
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <_fpadd_parts+0x242>
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	33 82       	std	Z+3, r3	; 0x03
    11c8:	22 82       	std	Z+2, r2	; 0x02
    11ca:	ea 0c       	add	r14, r10
    11cc:	fb 1c       	adc	r15, r11
    11ce:	0c 1d       	adc	r16, r12
    11d0:	1d 1d       	adc	r17, r13
    11d2:	e4 82       	std	Z+4, r14	; 0x04
    11d4:	f5 82       	std	Z+5, r15	; 0x05
    11d6:	06 83       	std	Z+6, r16	; 0x06
    11d8:	17 83       	std	Z+7, r17	; 0x07
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	80 83       	st	Z, r24
    11de:	24 81       	ldd	r18, Z+4	; 0x04
    11e0:	35 81       	ldd	r19, Z+5	; 0x05
    11e2:	46 81       	ldd	r20, Z+6	; 0x06
    11e4:	57 81       	ldd	r21, Z+7	; 0x07
    11e6:	57 ff       	sbrs	r21, 7
    11e8:	1a c0       	rjmp	.+52     	; 0x121e <_fpadd_parts+0x286>
    11ea:	c9 01       	movw	r24, r18
    11ec:	aa 27       	eor	r26, r26
    11ee:	97 fd       	sbrc	r25, 7
    11f0:	a0 95       	com	r26
    11f2:	ba 2f       	mov	r27, r26
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	a0 70       	andi	r26, 0x00	; 0
    11fa:	b0 70       	andi	r27, 0x00	; 0
    11fc:	56 95       	lsr	r21
    11fe:	47 95       	ror	r20
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	82 2b       	or	r24, r18
    1206:	93 2b       	or	r25, r19
    1208:	a4 2b       	or	r26, r20
    120a:	b5 2b       	or	r27, r21
    120c:	84 83       	std	Z+4, r24	; 0x04
    120e:	95 83       	std	Z+5, r25	; 0x05
    1210:	a6 83       	std	Z+6, r26	; 0x06
    1212:	b7 83       	std	Z+7, r27	; 0x07
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	93 83       	std	Z+3, r25	; 0x03
    121c:	82 83       	std	Z+2, r24	; 0x02
    121e:	df 01       	movw	r26, r30
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <_fpadd_parts+0x28c>
    1222:	d2 01       	movw	r26, r4
    1224:	cd 01       	movw	r24, r26
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	e2 e1       	ldi	r30, 0x12	; 18
    122c:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__epilogue_restores__>

00001230 <__subsf3>:
    1230:	a0 e2       	ldi	r26, 0x20	; 32
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e1       	ldi	r30, 0x1E	; 30
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x18>
    123c:	69 83       	std	Y+1, r22	; 0x01
    123e:	7a 83       	std	Y+2, r23	; 0x02
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	2d 83       	std	Y+5, r18	; 0x05
    1246:	3e 83       	std	Y+6, r19	; 0x06
    1248:	4f 83       	std	Y+7, r20	; 0x07
    124a:	58 87       	std	Y+8, r21	; 0x08
    124c:	e9 e0       	ldi	r30, 0x09	; 9
    124e:	ee 2e       	mov	r14, r30
    1250:	f1 2c       	mov	r15, r1
    1252:	ec 0e       	add	r14, r28
    1254:	fd 1e       	adc	r15, r29
    1256:	ce 01       	movw	r24, r28
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	b7 01       	movw	r22, r14
    125c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1260:	8e 01       	movw	r16, r28
    1262:	0f 5e       	subi	r16, 0xEF	; 239
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	ce 01       	movw	r24, r28
    1268:	05 96       	adiw	r24, 0x05	; 5
    126a:	b8 01       	movw	r22, r16
    126c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1270:	8a 89       	ldd	r24, Y+18	; 0x12
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	89 27       	eor	r24, r25
    1276:	8a 8b       	std	Y+18, r24	; 0x12
    1278:	c7 01       	movw	r24, r14
    127a:	b8 01       	movw	r22, r16
    127c:	ae 01       	movw	r20, r28
    127e:	47 5e       	subi	r20, 0xE7	; 231
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	0e 94 cc 07 	call	0xf98	; 0xf98 <_fpadd_parts>
    1286:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__pack_f>
    128a:	a0 96       	adiw	r28, 0x20	; 32
    128c:	e6 e0       	ldi	r30, 0x06	; 6
    128e:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x18>

00001292 <__addsf3>:
    1292:	a0 e2       	ldi	r26, 0x20	; 32
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f9 e0       	ldi	r31, 0x09	; 9
    129a:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x18>
    129e:	69 83       	std	Y+1, r22	; 0x01
    12a0:	7a 83       	std	Y+2, r23	; 0x02
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	2d 83       	std	Y+5, r18	; 0x05
    12a8:	3e 83       	std	Y+6, r19	; 0x06
    12aa:	4f 83       	std	Y+7, r20	; 0x07
    12ac:	58 87       	std	Y+8, r21	; 0x08
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	ef 2e       	mov	r14, r31
    12b2:	f1 2c       	mov	r15, r1
    12b4:	ec 0e       	add	r14, r28
    12b6:	fd 1e       	adc	r15, r29
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	b7 01       	movw	r22, r14
    12be:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    12c2:	8e 01       	movw	r16, r28
    12c4:	0f 5e       	subi	r16, 0xEF	; 239
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	05 96       	adiw	r24, 0x05	; 5
    12cc:	b8 01       	movw	r22, r16
    12ce:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    12d2:	c7 01       	movw	r24, r14
    12d4:	b8 01       	movw	r22, r16
    12d6:	ae 01       	movw	r20, r28
    12d8:	47 5e       	subi	r20, 0xE7	; 231
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	0e 94 cc 07 	call	0xf98	; 0xf98 <_fpadd_parts>
    12e0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__pack_f>
    12e4:	a0 96       	adiw	r28, 0x20	; 32
    12e6:	e6 e0       	ldi	r30, 0x06	; 6
    12e8:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x18>

000012ec <__mulsf3>:
    12ec:	a0 e2       	ldi	r26, 0x20	; 32
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__prologue_saves__>
    12f8:	69 83       	std	Y+1, r22	; 0x01
    12fa:	7a 83       	std	Y+2, r23	; 0x02
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	2d 83       	std	Y+5, r18	; 0x05
    1302:	3e 83       	std	Y+6, r19	; 0x06
    1304:	4f 83       	std	Y+7, r20	; 0x07
    1306:	58 87       	std	Y+8, r21	; 0x08
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	be 01       	movw	r22, r28
    130e:	67 5f       	subi	r22, 0xF7	; 247
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1316:	ce 01       	movw	r24, r28
    1318:	05 96       	adiw	r24, 0x05	; 5
    131a:	be 01       	movw	r22, r28
    131c:	6f 5e       	subi	r22, 0xEF	; 239
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1324:	99 85       	ldd	r25, Y+9	; 0x09
    1326:	92 30       	cpi	r25, 0x02	; 2
    1328:	88 f0       	brcs	.+34     	; 0x134c <__mulsf3+0x60>
    132a:	89 89       	ldd	r24, Y+17	; 0x11
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	c8 f0       	brcs	.+50     	; 0x1362 <__mulsf3+0x76>
    1330:	94 30       	cpi	r25, 0x04	; 4
    1332:	19 f4       	brne	.+6      	; 0x133a <__mulsf3+0x4e>
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	51 f4       	brne	.+20     	; 0x134c <__mulsf3+0x60>
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__mulsf3+0x56>
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	29 f4       	brne	.+10     	; 0x1348 <__mulsf3+0x5c>
    133e:	92 30       	cpi	r25, 0x02	; 2
    1340:	81 f4       	brne	.+32     	; 0x1362 <__mulsf3+0x76>
    1342:	80 e6       	ldi	r24, 0x60	; 96
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	c6 c0       	rjmp	.+396    	; 0x14d4 <__mulsf3+0x1e8>
    1348:	92 30       	cpi	r25, 0x02	; 2
    134a:	49 f4       	brne	.+18     	; 0x135e <__mulsf3+0x72>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	8a 89       	ldd	r24, Y+18	; 0x12
    1352:	98 13       	cpse	r25, r24
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	2a 87       	std	Y+10, r18	; 0x0a
    1358:	ce 01       	movw	r24, r28
    135a:	09 96       	adiw	r24, 0x09	; 9
    135c:	bb c0       	rjmp	.+374    	; 0x14d4 <__mulsf3+0x1e8>
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	49 f4       	brne	.+18     	; 0x1374 <__mulsf3+0x88>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	8a 89       	ldd	r24, Y+18	; 0x12
    1368:	98 13       	cpse	r25, r24
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	2a 8b       	std	Y+18, r18	; 0x12
    136e:	ce 01       	movw	r24, r28
    1370:	41 96       	adiw	r24, 0x11	; 17
    1372:	b0 c0       	rjmp	.+352    	; 0x14d4 <__mulsf3+0x1e8>
    1374:	2d 84       	ldd	r2, Y+13	; 0x0d
    1376:	3e 84       	ldd	r3, Y+14	; 0x0e
    1378:	4f 84       	ldd	r4, Y+15	; 0x0f
    137a:	58 88       	ldd	r5, Y+16	; 0x10
    137c:	6d 88       	ldd	r6, Y+21	; 0x15
    137e:	7e 88       	ldd	r7, Y+22	; 0x16
    1380:	8f 88       	ldd	r8, Y+23	; 0x17
    1382:	98 8c       	ldd	r9, Y+24	; 0x18
    1384:	ee 24       	eor	r14, r14
    1386:	ff 24       	eor	r15, r15
    1388:	87 01       	movw	r16, r14
    138a:	aa 24       	eor	r10, r10
    138c:	bb 24       	eor	r11, r11
    138e:	65 01       	movw	r12, r10
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	e0 e0       	ldi	r30, 0x00	; 0
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	c1 01       	movw	r24, r2
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	89 2b       	or	r24, r25
    13a4:	e9 f0       	breq	.+58     	; 0x13e0 <__mulsf3+0xf4>
    13a6:	e6 0c       	add	r14, r6
    13a8:	f7 1c       	adc	r15, r7
    13aa:	08 1d       	adc	r16, r8
    13ac:	19 1d       	adc	r17, r9
    13ae:	9a 01       	movw	r18, r20
    13b0:	ab 01       	movw	r20, r22
    13b2:	2a 0d       	add	r18, r10
    13b4:	3b 1d       	adc	r19, r11
    13b6:	4c 1d       	adc	r20, r12
    13b8:	5d 1d       	adc	r21, r13
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e6 14       	cp	r14, r6
    13c4:	f7 04       	cpc	r15, r7
    13c6:	08 05       	cpc	r16, r8
    13c8:	19 05       	cpc	r17, r9
    13ca:	20 f4       	brcc	.+8      	; 0x13d4 <__mulsf3+0xe8>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ba 01       	movw	r22, r20
    13d6:	a9 01       	movw	r20, r18
    13d8:	48 0f       	add	r20, r24
    13da:	59 1f       	adc	r21, r25
    13dc:	6a 1f       	adc	r22, r26
    13de:	7b 1f       	adc	r23, r27
    13e0:	aa 0c       	add	r10, r10
    13e2:	bb 1c       	adc	r11, r11
    13e4:	cc 1c       	adc	r12, r12
    13e6:	dd 1c       	adc	r13, r13
    13e8:	97 fe       	sbrs	r9, 7
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__mulsf3+0x110>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	a8 2a       	or	r10, r24
    13f6:	b9 2a       	or	r11, r25
    13f8:	ca 2a       	or	r12, r26
    13fa:	db 2a       	or	r13, r27
    13fc:	31 96       	adiw	r30, 0x01	; 1
    13fe:	e0 32       	cpi	r30, 0x20	; 32
    1400:	f1 05       	cpc	r31, r1
    1402:	49 f0       	breq	.+18     	; 0x1416 <__mulsf3+0x12a>
    1404:	66 0c       	add	r6, r6
    1406:	77 1c       	adc	r7, r7
    1408:	88 1c       	adc	r8, r8
    140a:	99 1c       	adc	r9, r9
    140c:	56 94       	lsr	r5
    140e:	47 94       	ror	r4
    1410:	37 94       	ror	r3
    1412:	27 94       	ror	r2
    1414:	c3 cf       	rjmp	.-122    	; 0x139c <__mulsf3+0xb0>
    1416:	fa 85       	ldd	r31, Y+10	; 0x0a
    1418:	ea 89       	ldd	r30, Y+18	; 0x12
    141a:	2b 89       	ldd	r18, Y+19	; 0x13
    141c:	3c 89       	ldd	r19, Y+20	; 0x14
    141e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1420:	9c 85       	ldd	r25, Y+12	; 0x0c
    1422:	28 0f       	add	r18, r24
    1424:	39 1f       	adc	r19, r25
    1426:	2e 5f       	subi	r18, 0xFE	; 254
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	17 c0       	rjmp	.+46     	; 0x145a <__mulsf3+0x16e>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	89 2b       	or	r24, r25
    1434:	61 f0       	breq	.+24     	; 0x144e <__mulsf3+0x162>
    1436:	16 95       	lsr	r17
    1438:	07 95       	ror	r16
    143a:	f7 94       	ror	r15
    143c:	e7 94       	ror	r14
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e8       	ldi	r27, 0x80	; 128
    1446:	e8 2a       	or	r14, r24
    1448:	f9 2a       	or	r15, r25
    144a:	0a 2b       	or	r16, r26
    144c:	1b 2b       	or	r17, r27
    144e:	76 95       	lsr	r23
    1450:	67 95       	ror	r22
    1452:	57 95       	ror	r21
    1454:	47 95       	ror	r20
    1456:	2f 5f       	subi	r18, 0xFF	; 255
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	77 fd       	sbrc	r23, 7
    145c:	e7 cf       	rjmp	.-50     	; 0x142c <__mulsf3+0x140>
    145e:	0c c0       	rjmp	.+24     	; 0x1478 <__mulsf3+0x18c>
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	66 1f       	adc	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	17 fd       	sbrc	r17, 7
    146a:	41 60       	ori	r20, 0x01	; 1
    146c:	ee 0c       	add	r14, r14
    146e:	ff 1c       	adc	r15, r15
    1470:	00 1f       	adc	r16, r16
    1472:	11 1f       	adc	r17, r17
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	30 40       	sbci	r19, 0x00	; 0
    1478:	40 30       	cpi	r20, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	59 07       	cpc	r21, r25
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	69 07       	cpc	r22, r25
    1482:	90 e4       	ldi	r25, 0x40	; 64
    1484:	79 07       	cpc	r23, r25
    1486:	60 f3       	brcs	.-40     	; 0x1460 <__mulsf3+0x174>
    1488:	2b 8f       	std	Y+27, r18	; 0x1b
    148a:	3c 8f       	std	Y+28, r19	; 0x1c
    148c:	db 01       	movw	r26, r22
    148e:	ca 01       	movw	r24, r20
    1490:	8f 77       	andi	r24, 0x7F	; 127
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	a0 70       	andi	r26, 0x00	; 0
    1496:	b0 70       	andi	r27, 0x00	; 0
    1498:	80 34       	cpi	r24, 0x40	; 64
    149a:	91 05       	cpc	r25, r1
    149c:	a1 05       	cpc	r26, r1
    149e:	b1 05       	cpc	r27, r1
    14a0:	61 f4       	brne	.+24     	; 0x14ba <__mulsf3+0x1ce>
    14a2:	47 fd       	sbrc	r20, 7
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <__mulsf3+0x1ce>
    14a6:	e1 14       	cp	r14, r1
    14a8:	f1 04       	cpc	r15, r1
    14aa:	01 05       	cpc	r16, r1
    14ac:	11 05       	cpc	r17, r1
    14ae:	29 f0       	breq	.+10     	; 0x14ba <__mulsf3+0x1ce>
    14b0:	40 5c       	subi	r20, 0xC0	; 192
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	6f 4f       	sbci	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	40 78       	andi	r20, 0x80	; 128
    14ba:	1a 8e       	std	Y+26, r1	; 0x1a
    14bc:	fe 17       	cp	r31, r30
    14be:	11 f0       	breq	.+4      	; 0x14c4 <__mulsf3+0x1d8>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	8a 8f       	std	Y+26, r24	; 0x1a
    14c4:	4d 8f       	std	Y+29, r20	; 0x1d
    14c6:	5e 8f       	std	Y+30, r21	; 0x1e
    14c8:	6f 8f       	std	Y+31, r22	; 0x1f
    14ca:	78 a3       	std	Y+32, r23	; 0x20
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	89 8f       	std	Y+25, r24	; 0x19
    14d0:	ce 01       	movw	r24, r28
    14d2:	49 96       	adiw	r24, 0x19	; 25
    14d4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__pack_f>
    14d8:	a0 96       	adiw	r28, 0x20	; 32
    14da:	e2 e1       	ldi	r30, 0x12	; 18
    14dc:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__epilogue_restores__>

000014e0 <__gtsf2>:
    14e0:	a8 e1       	ldi	r26, 0x18	; 24
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e6 e7       	ldi	r30, 0x76	; 118
    14e6:	fa e0       	ldi	r31, 0x0A	; 10
    14e8:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x18>
    14ec:	69 83       	std	Y+1, r22	; 0x01
    14ee:	7a 83       	std	Y+2, r23	; 0x02
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	3e 83       	std	Y+6, r19	; 0x06
    14f8:	4f 83       	std	Y+7, r20	; 0x07
    14fa:	58 87       	std	Y+8, r21	; 0x08
    14fc:	89 e0       	ldi	r24, 0x09	; 9
    14fe:	e8 2e       	mov	r14, r24
    1500:	f1 2c       	mov	r15, r1
    1502:	ec 0e       	add	r14, r28
    1504:	fd 1e       	adc	r15, r29
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	b7 01       	movw	r22, r14
    150c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1510:	8e 01       	movw	r16, r28
    1512:	0f 5e       	subi	r16, 0xEF	; 239
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	ce 01       	movw	r24, r28
    1518:	05 96       	adiw	r24, 0x05	; 5
    151a:	b8 01       	movw	r22, r16
    151c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	40 f0       	brcs	.+16     	; 0x1536 <__gtsf2+0x56>
    1526:	89 89       	ldd	r24, Y+17	; 0x11
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	28 f0       	brcs	.+10     	; 0x1536 <__gtsf2+0x56>
    152c:	c7 01       	movw	r24, r14
    152e:	b8 01       	movw	r22, r16
    1530:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fpcmp_parts_f>
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <__gtsf2+0x58>
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	68 96       	adiw	r28, 0x18	; 24
    153a:	e6 e0       	ldi	r30, 0x06	; 6
    153c:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x18>

00001540 <__gesf2>:
    1540:	a8 e1       	ldi	r26, 0x18	; 24
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x18>
    154c:	69 83       	std	Y+1, r22	; 0x01
    154e:	7a 83       	std	Y+2, r23	; 0x02
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	2d 83       	std	Y+5, r18	; 0x05
    1556:	3e 83       	std	Y+6, r19	; 0x06
    1558:	4f 83       	std	Y+7, r20	; 0x07
    155a:	58 87       	std	Y+8, r21	; 0x08
    155c:	89 e0       	ldi	r24, 0x09	; 9
    155e:	e8 2e       	mov	r14, r24
    1560:	f1 2c       	mov	r15, r1
    1562:	ec 0e       	add	r14, r28
    1564:	fd 1e       	adc	r15, r29
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	b7 01       	movw	r22, r14
    156c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1570:	8e 01       	movw	r16, r28
    1572:	0f 5e       	subi	r16, 0xEF	; 239
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	ce 01       	movw	r24, r28
    1578:	05 96       	adiw	r24, 0x05	; 5
    157a:	b8 01       	movw	r22, r16
    157c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	40 f0       	brcs	.+16     	; 0x1596 <__gesf2+0x56>
    1586:	89 89       	ldd	r24, Y+17	; 0x11
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	28 f0       	brcs	.+10     	; 0x1596 <__gesf2+0x56>
    158c:	c7 01       	movw	r24, r14
    158e:	b8 01       	movw	r22, r16
    1590:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fpcmp_parts_f>
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <__gesf2+0x58>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	68 96       	adiw	r28, 0x18	; 24
    159a:	e6 e0       	ldi	r30, 0x06	; 6
    159c:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x18>

000015a0 <__ltsf2>:
    15a0:	a8 e1       	ldi	r26, 0x18	; 24
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e6 ed       	ldi	r30, 0xD6	; 214
    15a6:	fa e0       	ldi	r31, 0x0A	; 10
    15a8:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x18>
    15ac:	69 83       	std	Y+1, r22	; 0x01
    15ae:	7a 83       	std	Y+2, r23	; 0x02
    15b0:	8b 83       	std	Y+3, r24	; 0x03
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	2d 83       	std	Y+5, r18	; 0x05
    15b6:	3e 83       	std	Y+6, r19	; 0x06
    15b8:	4f 83       	std	Y+7, r20	; 0x07
    15ba:	58 87       	std	Y+8, r21	; 0x08
    15bc:	89 e0       	ldi	r24, 0x09	; 9
    15be:	e8 2e       	mov	r14, r24
    15c0:	f1 2c       	mov	r15, r1
    15c2:	ec 0e       	add	r14, r28
    15c4:	fd 1e       	adc	r15, r29
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	b7 01       	movw	r22, r14
    15cc:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    15d0:	8e 01       	movw	r16, r28
    15d2:	0f 5e       	subi	r16, 0xEF	; 239
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	ce 01       	movw	r24, r28
    15d8:	05 96       	adiw	r24, 0x05	; 5
    15da:	b8 01       	movw	r22, r16
    15dc:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    15e0:	89 85       	ldd	r24, Y+9	; 0x09
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	40 f0       	brcs	.+16     	; 0x15f6 <__ltsf2+0x56>
    15e6:	89 89       	ldd	r24, Y+17	; 0x11
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <__ltsf2+0x56>
    15ec:	c7 01       	movw	r24, r14
    15ee:	b8 01       	movw	r22, r16
    15f0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fpcmp_parts_f>
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <__ltsf2+0x58>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	68 96       	adiw	r28, 0x18	; 24
    15fa:	e6 e0       	ldi	r30, 0x06	; 6
    15fc:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x18>

00001600 <__fixsfsi>:
    1600:	ac e0       	ldi	r26, 0x0C	; 12
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e6 e0       	ldi	r30, 0x06	; 6
    1606:	fb e0       	ldi	r31, 0x0B	; 11
    1608:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x20>
    160c:	69 83       	std	Y+1, r22	; 0x01
    160e:	7a 83       	std	Y+2, r23	; 0x02
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	be 01       	movw	r22, r28
    161a:	6b 5f       	subi	r22, 0xFB	; 251
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	0e 94 29 0c 	call	0x1852	; 0x1852 <__unpack_f>
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	61 f1       	breq	.+88     	; 0x1680 <__fixsfsi+0x80>
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	50 f1       	brcs	.+84     	; 0x1680 <__fixsfsi+0x80>
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	21 f4       	brne	.+8      	; 0x1638 <__fixsfsi+0x38>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	88 23       	and	r24, r24
    1634:	51 f1       	breq	.+84     	; 0x168a <__fixsfsi+0x8a>
    1636:	2e c0       	rjmp	.+92     	; 0x1694 <__fixsfsi+0x94>
    1638:	2f 81       	ldd	r18, Y+7	; 0x07
    163a:	38 85       	ldd	r19, Y+8	; 0x08
    163c:	37 fd       	sbrc	r19, 7
    163e:	20 c0       	rjmp	.+64     	; 0x1680 <__fixsfsi+0x80>
    1640:	6e 81       	ldd	r22, Y+6	; 0x06
    1642:	2f 31       	cpi	r18, 0x1F	; 31
    1644:	31 05       	cpc	r19, r1
    1646:	1c f0       	brlt	.+6      	; 0x164e <__fixsfsi+0x4e>
    1648:	66 23       	and	r22, r22
    164a:	f9 f0       	breq	.+62     	; 0x168a <__fixsfsi+0x8a>
    164c:	23 c0       	rjmp	.+70     	; 0x1694 <__fixsfsi+0x94>
    164e:	8e e1       	ldi	r24, 0x1E	; 30
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	82 1b       	sub	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	29 85       	ldd	r18, Y+9	; 0x09
    1658:	3a 85       	ldd	r19, Y+10	; 0x0a
    165a:	4b 85       	ldd	r20, Y+11	; 0x0b
    165c:	5c 85       	ldd	r21, Y+12	; 0x0c
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__fixsfsi+0x68>
    1660:	56 95       	lsr	r21
    1662:	47 95       	ror	r20
    1664:	37 95       	ror	r19
    1666:	27 95       	ror	r18
    1668:	8a 95       	dec	r24
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__fixsfsi+0x60>
    166c:	66 23       	and	r22, r22
    166e:	b1 f0       	breq	.+44     	; 0x169c <__fixsfsi+0x9c>
    1670:	50 95       	com	r21
    1672:	40 95       	com	r20
    1674:	30 95       	com	r19
    1676:	21 95       	neg	r18
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	4f 4f       	sbci	r20, 0xFF	; 255
    167c:	5f 4f       	sbci	r21, 0xFF	; 255
    167e:	0e c0       	rjmp	.+28     	; 0x169c <__fixsfsi+0x9c>
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	09 c0       	rjmp	.+18     	; 0x169c <__fixsfsi+0x9c>
    168a:	2f ef       	ldi	r18, 0xFF	; 255
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f ef       	ldi	r20, 0xFF	; 255
    1690:	5f e7       	ldi	r21, 0x7F	; 127
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__fixsfsi+0x9c>
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e8       	ldi	r21, 0x80	; 128
    169c:	b9 01       	movw	r22, r18
    169e:	ca 01       	movw	r24, r20
    16a0:	2c 96       	adiw	r28, 0x0c	; 12
    16a2:	e2 e0       	ldi	r30, 0x02	; 2
    16a4:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x20>

000016a8 <__pack_f>:
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	fc 01       	movw	r30, r24
    16b4:	e4 80       	ldd	r14, Z+4	; 0x04
    16b6:	f5 80       	ldd	r15, Z+5	; 0x05
    16b8:	06 81       	ldd	r16, Z+6	; 0x06
    16ba:	17 81       	ldd	r17, Z+7	; 0x07
    16bc:	d1 80       	ldd	r13, Z+1	; 0x01
    16be:	80 81       	ld	r24, Z
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	48 f4       	brcc	.+18     	; 0x16d6 <__pack_f+0x2e>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 e1       	ldi	r26, 0x10	; 16
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 2a       	or	r14, r24
    16ce:	f9 2a       	or	r15, r25
    16d0:	0a 2b       	or	r16, r26
    16d2:	1b 2b       	or	r17, r27
    16d4:	a5 c0       	rjmp	.+330    	; 0x1820 <__pack_f+0x178>
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	09 f4       	brne	.+2      	; 0x16dc <__pack_f+0x34>
    16da:	9f c0       	rjmp	.+318    	; 0x181a <__pack_f+0x172>
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	21 f4       	brne	.+8      	; 0x16e8 <__pack_f+0x40>
    16e0:	ee 24       	eor	r14, r14
    16e2:	ff 24       	eor	r15, r15
    16e4:	87 01       	movw	r16, r14
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <__pack_f+0x4a>
    16e8:	e1 14       	cp	r14, r1
    16ea:	f1 04       	cpc	r15, r1
    16ec:	01 05       	cpc	r16, r1
    16ee:	11 05       	cpc	r17, r1
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <__pack_f+0x50>
    16f2:	e0 e0       	ldi	r30, 0x00	; 0
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	96 c0       	rjmp	.+300    	; 0x1824 <__pack_f+0x17c>
    16f8:	62 81       	ldd	r22, Z+2	; 0x02
    16fa:	73 81       	ldd	r23, Z+3	; 0x03
    16fc:	9f ef       	ldi	r25, 0xFF	; 255
    16fe:	62 38       	cpi	r22, 0x82	; 130
    1700:	79 07       	cpc	r23, r25
    1702:	0c f0       	brlt	.+2      	; 0x1706 <__pack_f+0x5e>
    1704:	5b c0       	rjmp	.+182    	; 0x17bc <__pack_f+0x114>
    1706:	22 e8       	ldi	r18, 0x82	; 130
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	26 1b       	sub	r18, r22
    170c:	37 0b       	sbc	r19, r23
    170e:	2a 31       	cpi	r18, 0x1A	; 26
    1710:	31 05       	cpc	r19, r1
    1712:	2c f0       	brlt	.+10     	; 0x171e <__pack_f+0x76>
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	2a c0       	rjmp	.+84     	; 0x1772 <__pack_f+0xca>
    171e:	b8 01       	movw	r22, r16
    1720:	a7 01       	movw	r20, r14
    1722:	02 2e       	mov	r0, r18
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x86>
    1726:	76 95       	lsr	r23
    1728:	67 95       	ror	r22
    172a:	57 95       	ror	r21
    172c:	47 95       	ror	r20
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__pack_f+0x7e>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <__pack_f+0x9c>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	2a 95       	dec	r18
    1746:	d2 f7       	brpl	.-12     	; 0x173c <__pack_f+0x94>
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	a1 09       	sbc	r26, r1
    174c:	b1 09       	sbc	r27, r1
    174e:	8e 21       	and	r24, r14
    1750:	9f 21       	and	r25, r15
    1752:	a0 23       	and	r26, r16
    1754:	b1 23       	and	r27, r17
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	a1 05       	cpc	r26, r1
    175a:	b1 05       	cpc	r27, r1
    175c:	21 f0       	breq	.+8      	; 0x1766 <__pack_f+0xbe>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	9a 01       	movw	r18, r20
    1768:	ab 01       	movw	r20, r22
    176a:	28 2b       	or	r18, r24
    176c:	39 2b       	or	r19, r25
    176e:	4a 2b       	or	r20, r26
    1770:	5b 2b       	or	r21, r27
    1772:	da 01       	movw	r26, r20
    1774:	c9 01       	movw	r24, r18
    1776:	8f 77       	andi	r24, 0x7F	; 127
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	a0 70       	andi	r26, 0x00	; 0
    177c:	b0 70       	andi	r27, 0x00	; 0
    177e:	80 34       	cpi	r24, 0x40	; 64
    1780:	91 05       	cpc	r25, r1
    1782:	a1 05       	cpc	r26, r1
    1784:	b1 05       	cpc	r27, r1
    1786:	39 f4       	brne	.+14     	; 0x1796 <__pack_f+0xee>
    1788:	27 ff       	sbrs	r18, 7
    178a:	09 c0       	rjmp	.+18     	; 0x179e <__pack_f+0xf6>
    178c:	20 5c       	subi	r18, 0xC0	; 192
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	4f 4f       	sbci	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	04 c0       	rjmp	.+8      	; 0x179e <__pack_f+0xf6>
    1796:	21 5c       	subi	r18, 0xC1	; 193
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	4f 4f       	sbci	r20, 0xFF	; 255
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	e0 e0       	ldi	r30, 0x00	; 0
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	20 30       	cpi	r18, 0x00	; 0
    17a4:	a0 e0       	ldi	r26, 0x00	; 0
    17a6:	3a 07       	cpc	r19, r26
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	4a 07       	cpc	r20, r26
    17ac:	a0 e4       	ldi	r26, 0x40	; 64
    17ae:	5a 07       	cpc	r21, r26
    17b0:	10 f0       	brcs	.+4      	; 0x17b6 <__pack_f+0x10e>
    17b2:	e1 e0       	ldi	r30, 0x01	; 1
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	79 01       	movw	r14, r18
    17b8:	8a 01       	movw	r16, r20
    17ba:	27 c0       	rjmp	.+78     	; 0x180a <__pack_f+0x162>
    17bc:	60 38       	cpi	r22, 0x80	; 128
    17be:	71 05       	cpc	r23, r1
    17c0:	64 f5       	brge	.+88     	; 0x181a <__pack_f+0x172>
    17c2:	fb 01       	movw	r30, r22
    17c4:	e1 58       	subi	r30, 0x81	; 129
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	d8 01       	movw	r26, r16
    17ca:	c7 01       	movw	r24, r14
    17cc:	8f 77       	andi	r24, 0x7F	; 127
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	a0 70       	andi	r26, 0x00	; 0
    17d2:	b0 70       	andi	r27, 0x00	; 0
    17d4:	80 34       	cpi	r24, 0x40	; 64
    17d6:	91 05       	cpc	r25, r1
    17d8:	a1 05       	cpc	r26, r1
    17da:	b1 05       	cpc	r27, r1
    17dc:	39 f4       	brne	.+14     	; 0x17ec <__pack_f+0x144>
    17de:	e7 fe       	sbrs	r14, 7
    17e0:	0d c0       	rjmp	.+26     	; 0x17fc <__pack_f+0x154>
    17e2:	80 e4       	ldi	r24, 0x40	; 64
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__pack_f+0x14c>
    17ec:	8f e3       	ldi	r24, 0x3F	; 63
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e8 0e       	add	r14, r24
    17f6:	f9 1e       	adc	r15, r25
    17f8:	0a 1f       	adc	r16, r26
    17fa:	1b 1f       	adc	r17, r27
    17fc:	17 ff       	sbrs	r17, 7
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <__pack_f+0x162>
    1800:	16 95       	lsr	r17
    1802:	07 95       	ror	r16
    1804:	f7 94       	ror	r15
    1806:	e7 94       	ror	r14
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	87 e0       	ldi	r24, 0x07	; 7
    180c:	16 95       	lsr	r17
    180e:	07 95       	ror	r16
    1810:	f7 94       	ror	r15
    1812:	e7 94       	ror	r14
    1814:	8a 95       	dec	r24
    1816:	d1 f7       	brne	.-12     	; 0x180c <__pack_f+0x164>
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <__pack_f+0x17c>
    181a:	ee 24       	eor	r14, r14
    181c:	ff 24       	eor	r15, r15
    181e:	87 01       	movw	r16, r14
    1820:	ef ef       	ldi	r30, 0xFF	; 255
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	6e 2f       	mov	r22, r30
    1826:	67 95       	ror	r22
    1828:	66 27       	eor	r22, r22
    182a:	67 95       	ror	r22
    182c:	90 2f       	mov	r25, r16
    182e:	9f 77       	andi	r25, 0x7F	; 127
    1830:	d7 94       	ror	r13
    1832:	dd 24       	eor	r13, r13
    1834:	d7 94       	ror	r13
    1836:	8e 2f       	mov	r24, r30
    1838:	86 95       	lsr	r24
    183a:	49 2f       	mov	r20, r25
    183c:	46 2b       	or	r20, r22
    183e:	58 2f       	mov	r21, r24
    1840:	5d 29       	or	r21, r13
    1842:	b7 01       	movw	r22, r14
    1844:	ca 01       	movw	r24, r20
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	08 95       	ret

00001852 <__unpack_f>:
    1852:	fc 01       	movw	r30, r24
    1854:	db 01       	movw	r26, r22
    1856:	40 81       	ld	r20, Z
    1858:	51 81       	ldd	r21, Z+1	; 0x01
    185a:	22 81       	ldd	r18, Z+2	; 0x02
    185c:	62 2f       	mov	r22, r18
    185e:	6f 77       	andi	r22, 0x7F	; 127
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	22 1f       	adc	r18, r18
    1864:	22 27       	eor	r18, r18
    1866:	22 1f       	adc	r18, r18
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	89 2f       	mov	r24, r25
    186c:	88 0f       	add	r24, r24
    186e:	82 2b       	or	r24, r18
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	99 1f       	adc	r25, r25
    1876:	99 27       	eor	r25, r25
    1878:	99 1f       	adc	r25, r25
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	9c 93       	st	X, r25
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	a9 f5       	brne	.+106    	; 0x18f0 <__unpack_f+0x9e>
    1886:	41 15       	cp	r20, r1
    1888:	51 05       	cpc	r21, r1
    188a:	61 05       	cpc	r22, r1
    188c:	71 05       	cpc	r23, r1
    188e:	11 f4       	brne	.+4      	; 0x1894 <__unpack_f+0x42>
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	37 c0       	rjmp	.+110    	; 0x1902 <__unpack_f+0xb0>
    1894:	82 e8       	ldi	r24, 0x82	; 130
    1896:	9f ef       	ldi	r25, 0xFF	; 255
    1898:	13 96       	adiw	r26, 0x03	; 3
    189a:	9c 93       	st	X, r25
    189c:	8e 93       	st	-X, r24
    189e:	12 97       	sbiw	r26, 0x02	; 2
    18a0:	9a 01       	movw	r18, r20
    18a2:	ab 01       	movw	r20, r22
    18a4:	67 e0       	ldi	r22, 0x07	; 7
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	44 1f       	adc	r20, r20
    18ac:	55 1f       	adc	r21, r21
    18ae:	6a 95       	dec	r22
    18b0:	d1 f7       	brne	.-12     	; 0x18a6 <__unpack_f+0x54>
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	8c 93       	st	X, r24
    18b6:	0d c0       	rjmp	.+26     	; 0x18d2 <__unpack_f+0x80>
    18b8:	22 0f       	add	r18, r18
    18ba:	33 1f       	adc	r19, r19
    18bc:	44 1f       	adc	r20, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	12 96       	adiw	r26, 0x02	; 2
    18c2:	8d 91       	ld	r24, X+
    18c4:	9c 91       	ld	r25, X
    18c6:	13 97       	sbiw	r26, 0x03	; 3
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	13 96       	adiw	r26, 0x03	; 3
    18cc:	9c 93       	st	X, r25
    18ce:	8e 93       	st	-X, r24
    18d0:	12 97       	sbiw	r26, 0x02	; 2
    18d2:	20 30       	cpi	r18, 0x00	; 0
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	38 07       	cpc	r19, r24
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	48 07       	cpc	r20, r24
    18dc:	80 e4       	ldi	r24, 0x40	; 64
    18de:	58 07       	cpc	r21, r24
    18e0:	58 f3       	brcs	.-42     	; 0x18b8 <__unpack_f+0x66>
    18e2:	14 96       	adiw	r26, 0x04	; 4
    18e4:	2d 93       	st	X+, r18
    18e6:	3d 93       	st	X+, r19
    18e8:	4d 93       	st	X+, r20
    18ea:	5c 93       	st	X, r21
    18ec:	17 97       	sbiw	r26, 0x07	; 7
    18ee:	08 95       	ret
    18f0:	2f 3f       	cpi	r18, 0xFF	; 255
    18f2:	31 05       	cpc	r19, r1
    18f4:	79 f4       	brne	.+30     	; 0x1914 <__unpack_f+0xc2>
    18f6:	41 15       	cp	r20, r1
    18f8:	51 05       	cpc	r21, r1
    18fa:	61 05       	cpc	r22, r1
    18fc:	71 05       	cpc	r23, r1
    18fe:	19 f4       	brne	.+6      	; 0x1906 <__unpack_f+0xb4>
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	8c 93       	st	X, r24
    1904:	08 95       	ret
    1906:	64 ff       	sbrs	r22, 4
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <__unpack_f+0xbe>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8c 93       	st	X, r24
    190e:	12 c0       	rjmp	.+36     	; 0x1934 <__unpack_f+0xe2>
    1910:	1c 92       	st	X, r1
    1912:	10 c0       	rjmp	.+32     	; 0x1934 <__unpack_f+0xe2>
    1914:	2f 57       	subi	r18, 0x7F	; 127
    1916:	30 40       	sbci	r19, 0x00	; 0
    1918:	13 96       	adiw	r26, 0x03	; 3
    191a:	3c 93       	st	X, r19
    191c:	2e 93       	st	-X, r18
    191e:	12 97       	sbiw	r26, 0x02	; 2
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	8c 93       	st	X, r24
    1924:	87 e0       	ldi	r24, 0x07	; 7
    1926:	44 0f       	add	r20, r20
    1928:	55 1f       	adc	r21, r21
    192a:	66 1f       	adc	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	8a 95       	dec	r24
    1930:	d1 f7       	brne	.-12     	; 0x1926 <__unpack_f+0xd4>
    1932:	70 64       	ori	r23, 0x40	; 64
    1934:	14 96       	adiw	r26, 0x04	; 4
    1936:	4d 93       	st	X+, r20
    1938:	5d 93       	st	X+, r21
    193a:	6d 93       	st	X+, r22
    193c:	7c 93       	st	X, r23
    193e:	17 97       	sbiw	r26, 0x07	; 7
    1940:	08 95       	ret

00001942 <__fpcmp_parts_f>:
    1942:	1f 93       	push	r17
    1944:	dc 01       	movw	r26, r24
    1946:	fb 01       	movw	r30, r22
    1948:	9c 91       	ld	r25, X
    194a:	92 30       	cpi	r25, 0x02	; 2
    194c:	08 f4       	brcc	.+2      	; 0x1950 <__fpcmp_parts_f+0xe>
    194e:	47 c0       	rjmp	.+142    	; 0x19de <__fpcmp_parts_f+0x9c>
    1950:	80 81       	ld	r24, Z
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	08 f4       	brcc	.+2      	; 0x1958 <__fpcmp_parts_f+0x16>
    1956:	43 c0       	rjmp	.+134    	; 0x19de <__fpcmp_parts_f+0x9c>
    1958:	94 30       	cpi	r25, 0x04	; 4
    195a:	51 f4       	brne	.+20     	; 0x1970 <__fpcmp_parts_f+0x2e>
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	1c 91       	ld	r17, X
    1960:	84 30       	cpi	r24, 0x04	; 4
    1962:	99 f5       	brne	.+102    	; 0x19ca <__fpcmp_parts_f+0x88>
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	68 2f       	mov	r22, r24
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	61 1b       	sub	r22, r17
    196c:	71 09       	sbc	r23, r1
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <__fpcmp_parts_f+0xac>
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	21 f0       	breq	.+8      	; 0x197c <__fpcmp_parts_f+0x3a>
    1974:	92 30       	cpi	r25, 0x02	; 2
    1976:	31 f4       	brne	.+12     	; 0x1984 <__fpcmp_parts_f+0x42>
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	b9 f1       	breq	.+110    	; 0x19ea <__fpcmp_parts_f+0xa8>
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	88 23       	and	r24, r24
    1980:	89 f1       	breq	.+98     	; 0x19e4 <__fpcmp_parts_f+0xa2>
    1982:	2d c0       	rjmp	.+90     	; 0x19de <__fpcmp_parts_f+0x9c>
    1984:	11 96       	adiw	r26, 0x01	; 1
    1986:	1c 91       	ld	r17, X
    1988:	11 97       	sbiw	r26, 0x01	; 1
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	f1 f0       	breq	.+60     	; 0x19ca <__fpcmp_parts_f+0x88>
    198e:	81 81       	ldd	r24, Z+1	; 0x01
    1990:	18 17       	cp	r17, r24
    1992:	d9 f4       	brne	.+54     	; 0x19ca <__fpcmp_parts_f+0x88>
    1994:	12 96       	adiw	r26, 0x02	; 2
    1996:	2d 91       	ld	r18, X+
    1998:	3c 91       	ld	r19, X
    199a:	13 97       	sbiw	r26, 0x03	; 3
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	82 17       	cp	r24, r18
    19a2:	93 07       	cpc	r25, r19
    19a4:	94 f0       	brlt	.+36     	; 0x19ca <__fpcmp_parts_f+0x88>
    19a6:	28 17       	cp	r18, r24
    19a8:	39 07       	cpc	r19, r25
    19aa:	bc f0       	brlt	.+46     	; 0x19da <__fpcmp_parts_f+0x98>
    19ac:	14 96       	adiw	r26, 0x04	; 4
    19ae:	8d 91       	ld	r24, X+
    19b0:	9d 91       	ld	r25, X+
    19b2:	0d 90       	ld	r0, X+
    19b4:	bc 91       	ld	r27, X
    19b6:	a0 2d       	mov	r26, r0
    19b8:	24 81       	ldd	r18, Z+4	; 0x04
    19ba:	35 81       	ldd	r19, Z+5	; 0x05
    19bc:	46 81       	ldd	r20, Z+6	; 0x06
    19be:	57 81       	ldd	r21, Z+7	; 0x07
    19c0:	28 17       	cp	r18, r24
    19c2:	39 07       	cpc	r19, r25
    19c4:	4a 07       	cpc	r20, r26
    19c6:	5b 07       	cpc	r21, r27
    19c8:	18 f4       	brcc	.+6      	; 0x19d0 <__fpcmp_parts_f+0x8e>
    19ca:	11 23       	and	r17, r17
    19cc:	41 f0       	breq	.+16     	; 0x19de <__fpcmp_parts_f+0x9c>
    19ce:	0a c0       	rjmp	.+20     	; 0x19e4 <__fpcmp_parts_f+0xa2>
    19d0:	82 17       	cp	r24, r18
    19d2:	93 07       	cpc	r25, r19
    19d4:	a4 07       	cpc	r26, r20
    19d6:	b5 07       	cpc	r27, r21
    19d8:	40 f4       	brcc	.+16     	; 0x19ea <__fpcmp_parts_f+0xa8>
    19da:	11 23       	and	r17, r17
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <__fpcmp_parts_f+0xa2>
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <__fpcmp_parts_f+0xac>
    19e4:	6f ef       	ldi	r22, 0xFF	; 255
    19e6:	7f ef       	ldi	r23, 0xFF	; 255
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__fpcmp_parts_f+0xac>
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	cb 01       	movw	r24, r22
    19f0:	1f 91       	pop	r17
    19f2:	08 95       	ret

000019f4 <MADC_voidInit>:
#define NULL 0
void (*ADC_CallBack) (void)=NULL;
//u16 digital =0;
  //  u16 analog=0;
void MADC_voidInit (void)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
//	2- Right Adjustment
//	3- Disable Auto Trigger
//	4- Select CLK/64
//	5- Enable ADC

	CLR_BIT(ADMUX,7);
    19fc:	a7 e2       	ldi	r26, 0x27	; 39
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e7 e2       	ldi	r30, 0x27	; 39
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 77       	andi	r24, 0x7F	; 127
    1a08:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
    1a0a:	a7 e2       	ldi	r26, 0x27	; 39
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e7 e2       	ldi	r30, 0x27	; 39
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 64       	ori	r24, 0x40	; 64
    1a16:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,5);
    1a18:	a7 e2       	ldi	r26, 0x27	; 39
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e2       	ldi	r30, 0x27	; 39
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 7d       	andi	r24, 0xDF	; 223
    1a24:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,5);
    1a26:	a6 e2       	ldi	r26, 0x26	; 38
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e6 e2       	ldi	r30, 0x26	; 38
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 7d       	andi	r24, 0xDF	; 223
    1a32:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,0);
    1a34:	a6 e2       	ldi	r26, 0x26	; 38
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e6 e2       	ldi	r30, 0x26	; 38
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    1a42:	a6 e2       	ldi	r26, 0x26	; 38
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e6 e2       	ldi	r30, 0x26	; 38
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    1a50:	a6 e2       	ldi	r26, 0x26	; 38
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e6 e2       	ldi	r30, 0x26	; 38
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	84 60       	ori	r24, 0x04	; 4
    1a5c:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,7);
    1a5e:	a6 e2       	ldi	r26, 0x26	; 38
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e6 e2       	ldi	r30, 0x26	; 38
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 68       	ori	r24, 0x80	; 128
    1a6a:	8c 93       	st	X, r24
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <MADC_u16GetDigitalValue>:

u16 MADC_u16GetDigitalValue (u8 A_u8Channel)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <MADC_u16GetDigitalValue+0x6>
    1a78:	0f 92       	push	r0
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
    1a80:	1a 82       	std	Y+2, r1	; 0x02
    1a82:	19 82       	std	Y+1, r1	; 0x01
	if (A_u8Channel<32)
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	80 32       	cpi	r24, 0x20	; 32
    1a88:	70 f5       	brcc	.+92     	; 0x1ae6 <MADC_u16GetDigitalValue+0x74>
	{
		// clear the channel 5-bits
		ADMUX &= 0b11100000;
    1a8a:	a7 e2       	ldi	r26, 0x27	; 39
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e7 e2       	ldi	r30, 0x27	; 39
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	80 7e       	andi	r24, 0xE0	; 224
    1a96:	8c 93       	st	X, r24
		// Select channel
		ADMUX |= A_u8Channel;
    1a98:	a7 e2       	ldi	r26, 0x27	; 39
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e7 e2       	ldi	r30, 0x27	; 39
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	90 81       	ld	r25, Z
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	89 2b       	or	r24, r25
    1aa6:	8c 93       	st	X, r24
		// start Conversion
		SET_BIT(ADCSRA,6);
    1aa8:	a6 e2       	ldi	r26, 0x26	; 38
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e2       	ldi	r30, 0x26	; 38
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 64       	ori	r24, 0x40	; 64
    1ab4:	8c 93       	st	X, r24
		// Polling on ADC Complete Flag
		while (GET_BIT(ADCSRA,4)==0);
    1ab6:	e6 e2       	ldi	r30, 0x26	; 38
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	82 95       	swap	r24
    1abe:	8f 70       	andi	r24, 0x0F	; 15
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	a9 f3       	breq	.-22     	; 0x1ab6 <MADC_u16GetDigitalValue+0x44>
		// Clear INT Flag
		SET_BIT(ADCSRA,4);
    1acc:	a6 e2       	ldi	r26, 0x26	; 38
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e6 e2       	ldi	r30, 0x26	; 38
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 61       	ori	r24, 0x10	; 16
    1ad8:	8c 93       	st	X, r24
		// Read Conversion value
		local_u16DigitalValue = ADCLH;
    1ada:	e4 e2       	ldi	r30, 0x24	; 36
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u16DigitalValue;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <MADC_voidStartConversion>:

void MADC_voidStartConversion(u8 A_u8Channel)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8Channel<32)
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	80 32       	cpi	r24, 0x20	; 32
    1b06:	b0 f4       	brcc	.+44     	; 0x1b34 <MADC_voidStartConversion+0x3e>
		{
			// clear the channel 5-bits
			ADMUX &= 0b11100000;
    1b08:	a7 e2       	ldi	r26, 0x27	; 39
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e7 e2       	ldi	r30, 0x27	; 39
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 7e       	andi	r24, 0xE0	; 224
    1b14:	8c 93       	st	X, r24
			// Select channel
			ADMUX |= A_u8Channel;
    1b16:	a7 e2       	ldi	r26, 0x27	; 39
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e7 e2       	ldi	r30, 0x27	; 39
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	90 81       	ld	r25, Z
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	89 2b       	or	r24, r25
    1b24:	8c 93       	st	X, r24
			// start Conversion
			SET_BIT(ADCSRA,6);
    1b26:	a6 e2       	ldi	r26, 0x26	; 38
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e6 e2       	ldi	r30, 0x26	; 38
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 64       	ori	r24, 0x40	; 64
    1b32:	8c 93       	st	X, r24
		}
}
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <MADC_u16GetDigitalValueTrigger>:

u16 MADC_u16GetDigitalValueTrigger (void)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62

	return ADCLH;
    1b44:	e4 e2       	ldi	r30, 0x24	; 36
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <MADC_voidInterruptEnable>:


void MADC_voidInterruptEnable(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,3);
    1b5a:	a6 e2       	ldi	r26, 0x26	; 38
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e6 e2       	ldi	r30, 0x26	; 38
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,5);
    1b68:	a6 e2       	ldi	r26, 0x26	; 38
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e6 e2       	ldi	r30, 0x26	; 38
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 62       	ori	r24, 0x20	; 32
    1b74:	8c 93       	st	X, r24
// AUTO TRIGGER
	CLR_BIT(SFIOR,4);
    1b76:	a0 e5       	ldi	r26, 0x50	; 80
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e0 e5       	ldi	r30, 0x50	; 80
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7e       	andi	r24, 0xEF	; 239
    1b82:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,5);
    1b84:	a0 e5       	ldi	r26, 0x50	; 80
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e0 e5       	ldi	r30, 0x50	; 80
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7d       	andi	r24, 0xDF	; 223
    1b90:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,6);
    1b92:	a0 e5       	ldi	r26, 0x50	; 80
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e0 e5       	ldi	r30, 0x50	; 80
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7b       	andi	r24, 0xBF	; 191
    1b9e:	8c 93       	st	X, r24
	SET_BIT(SFIOR,7);
    1ba0:	a0 e5       	ldi	r26, 0x50	; 80
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e0 e5       	ldi	r30, 0x50	; 80
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 68       	ori	r24, 0x80	; 128
    1bac:	8c 93       	st	X, r24
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <MADC_voidSetToCallback>:

void MADC_voidSetToCallback(void (*ptrToFunc)(void))
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <MADC_voidSetToCallback+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc!=NULL)
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	31 f0       	breq	.+12     	; 0x1bd6 <MADC_voidSetToCallback+0x22>
	{
		ADC_CallBack=ptrToFunc;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	90 93 69 00 	sts	0x0069, r25
    1bd2:	80 93 68 00 	sts	0x0068, r24
	}
}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1be0:	1f 92       	push	r1
    1be2:	0f 92       	push	r0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	0f 92       	push	r0
    1be8:	11 24       	eor	r1, r1
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	if (ADC_CallBack != NULL)
    1c0a:	80 91 68 00 	lds	r24, 0x0068
    1c0e:	90 91 69 00 	lds	r25, 0x0069
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	29 f0       	breq	.+10     	; 0x1c20 <__vector_16+0x40>
	{
		ADC_CallBack();
    1c16:	e0 91 68 00 	lds	r30, 0x0068
    1c1a:	f0 91 69 00 	lds	r31, 0x0069
    1c1e:	09 95       	icall
//				}
//
//				HLCD_voidDisplayNumber(analog);
//				_delay_ms(5000);
//				HLCD_voidClearDisplay();
}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	ff 91       	pop	r31
    1c26:	ef 91       	pop	r30
    1c28:	bf 91       	pop	r27
    1c2a:	af 91       	pop	r26
    1c2c:	9f 91       	pop	r25
    1c2e:	8f 91       	pop	r24
    1c30:	7f 91       	pop	r23
    1c32:	6f 91       	pop	r22
    1c34:	5f 91       	pop	r21
    1c36:	4f 91       	pop	r20
    1c38:	3f 91       	pop	r19
    1c3a:	2f 91       	pop	r18
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti

00001c46 <MDIO_voidInit>:
#include "..\Include\LIB\BIT_MATH.h"
#include "..\Include\MCAL\DIO\DIO_Interface.h"
#include "..\Include\MCAL\DIO\DIO_private.h"
#include "..\Include\MCAL\DIO\DIO_Configurations.h"
void MDIO_voidInit(void)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);
    1c4e:	ea e3       	ldi	r30, 0x3A	; 58
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 ee       	ldi	r24, 0xE0	; 224
    1c54:	80 83       	st	Z, r24
	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);
    1c56:	e7 e3       	ldi	r30, 0x37	; 55
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	80 83       	st	Z, r24
	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);
    1c5e:	e4 e3       	ldi	r30, 0x34	; 52
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	80 83       	st	Z, r24
	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);
    1c66:	e1 e3       	ldi	r30, 0x31	; 49
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8f ef       	ldi	r24, 0xFF	; 255
    1c6c:	80 83       	st	Z, r24
	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	10 82       	st	Z, r1
	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
    1c74:	e8 e3       	ldi	r30, 0x38	; 56
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	10 82       	st	Z, r1
	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
    1c7a:	e5 e3       	ldi	r30, 0x35	; 53
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	80 83       	st	Z, r24
	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
    1c82:	e2 e3       	ldi	r30, 0x32	; 50
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	80 83       	st	Z, r24
}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <MDIO_voidSetPinValue>:
//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
//Value  :- PIN_HIGH - PIN_LOW

void MDIO_voidSetPinValue (u8 A_u8PortId , u8 A_u8PinId , u8 A_u8Value)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2d 97       	sbiw	r28, 0x0d	; 13
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	6a 83       	std	Y+2, r22	; 0x02
    1ca8:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3d 87       	std	Y+13, r19	; 0x0d
    1cb2:	2c 87       	std	Y+12, r18	; 0x0c
    1cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <MDIO_voidSetPinValue+0x30>
    1cbe:	4f c0       	rjmp	.+158    	; 0x1d5e <MDIO_voidSetPinValue+0xce>
    1cc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <MDIO_voidSetPinValue+0x44>
    1cca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ccc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <MDIO_voidSetPinValue+0x5e>
    1cd2:	eb c0       	rjmp	.+470    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
    1cd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cd6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <MDIO_voidSetPinValue+0x50>
    1cde:	77 c0       	rjmp	.+238    	; 0x1dce <MDIO_voidSetPinValue+0x13e>
    1ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ce4:	83 30       	cpi	r24, 0x03	; 3
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <MDIO_voidSetPinValue+0x5c>
    1cea:	a9 c0       	rjmp	.+338    	; 0x1e3e <MDIO_voidSetPinValue+0x1ae>
    1cec:	de c0       	rjmp	.+444    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
	{
	case PORTA :
		switch (A_u8Value)
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	3b 87       	std	Y+11, r19	; 0x0b
    1cf6:	2a 87       	std	Y+10, r18	; 0x0a
    1cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	d1 f0       	breq	.+52     	; 0x1d34 <MDIO_voidSetPinValue+0xa4>
    1d00:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d02:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d04:	21 30       	cpi	r18, 0x01	; 1
    1d06:	31 05       	cpc	r19, r1
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <MDIO_voidSetPinValue+0x7c>
    1d0a:	cf c0       	rjmp	.+414    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTA_REG,A_u8PinId);
    1d0c:	ab e3       	ldi	r26, 0x3B	; 59
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	eb e3       	ldi	r30, 0x3B	; 59
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <MDIO_voidSetPinValue+0x9a>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <MDIO_voidSetPinValue+0x96>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	bb c0       	rjmp	.+374    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTA_REG,A_u8PinId);
    1d34:	ab e3       	ldi	r26, 0x3B	; 59
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	eb e3       	ldi	r30, 0x3B	; 59
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <MDIO_voidSetPinValue+0xc2>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <MDIO_voidSetPinValue+0xbe>
    1d56:	80 95       	com	r24
    1d58:	84 23       	and	r24, r20
    1d5a:	8c 93       	st	X, r24
    1d5c:	a6 c0       	rjmp	.+332    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTB :
		switch (A_u8Value)
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	39 87       	std	Y+9, r19	; 0x09
    1d66:	28 87       	std	Y+8, r18	; 0x08
    1d68:	88 85       	ldd	r24, Y+8	; 0x08
    1d6a:	99 85       	ldd	r25, Y+9	; 0x09
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	d1 f0       	breq	.+52     	; 0x1da4 <MDIO_voidSetPinValue+0x114>
    1d70:	28 85       	ldd	r18, Y+8	; 0x08
    1d72:	39 85       	ldd	r19, Y+9	; 0x09
    1d74:	21 30       	cpi	r18, 0x01	; 1
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <MDIO_voidSetPinValue+0xec>
    1d7a:	97 c0       	rjmp	.+302    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTB_REG,A_u8PinId);
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <MDIO_voidSetPinValue+0x10a>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <MDIO_voidSetPinValue+0x106>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	83 c0       	rjmp	.+262    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTB_REG,A_u8PinId);
    1da4:	a8 e3       	ldi	r26, 0x38	; 56
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 e3       	ldi	r30, 0x38	; 56
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <MDIO_voidSetPinValue+0x132>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <MDIO_voidSetPinValue+0x12e>
    1dc6:	80 95       	com	r24
    1dc8:	84 23       	and	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	6e c0       	rjmp	.+220    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTC :
		switch (A_u8Value)
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3f 83       	std	Y+7, r19	; 0x07
    1dd6:	2e 83       	std	Y+6, r18	; 0x06
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <MDIO_voidSetPinValue+0x184>
    1de0:	2e 81       	ldd	r18, Y+6	; 0x06
    1de2:	3f 81       	ldd	r19, Y+7	; 0x07
    1de4:	21 30       	cpi	r18, 0x01	; 1
    1de6:	31 05       	cpc	r19, r1
    1de8:	09 f0       	breq	.+2      	; 0x1dec <MDIO_voidSetPinValue+0x15c>
    1dea:	5f c0       	rjmp	.+190    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTC_REG,A_u8PinId);
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <MDIO_voidSetPinValue+0x17a>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <MDIO_voidSetPinValue+0x176>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	4b c0       	rjmp	.+150    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTC_REG,A_u8PinId);
    1e14:	a5 e3       	ldi	r26, 0x35	; 53
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e3       	ldi	r30, 0x35	; 53
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <MDIO_voidSetPinValue+0x1a2>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <MDIO_voidSetPinValue+0x19e>
    1e36:	80 95       	com	r24
    1e38:	84 23       	and	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	36 c0       	rjmp	.+108    	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTD :
		switch (A_u8Value)
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3d 83       	std	Y+5, r19	; 0x05
    1e46:	2c 83       	std	Y+4, r18	; 0x04
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	c9 f0       	breq	.+50     	; 0x1e82 <MDIO_voidSetPinValue+0x1f2>
    1e50:	2c 81       	ldd	r18, Y+4	; 0x04
    1e52:	3d 81       	ldd	r19, Y+5	; 0x05
    1e54:	21 30       	cpi	r18, 0x01	; 1
    1e56:	31 05       	cpc	r19, r1
    1e58:	41 f5       	brne	.+80     	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTD_REG,A_u8PinId);
    1e5a:	a2 e3       	ldi	r26, 0x32	; 50
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e2 e3       	ldi	r30, 0x32	; 50
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <MDIO_voidSetPinValue+0x1e8>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <MDIO_voidSetPinValue+0x1e4>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTD_REG,A_u8PinId);
    1e82:	a2 e3       	ldi	r26, 0x32	; 50
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e2 e3       	ldi	r30, 0x32	; 50
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <MDIO_voidSetPinValue+0x210>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <MDIO_voidSetPinValue+0x20c>
    1ea4:	80 95       	com	r24
    1ea6:	84 23       	and	r24, r20
    1ea8:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    1eaa:	2d 96       	adiw	r28, 0x0d	; 13
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <MDIO_voidSetPinDirection>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
//Value  :- OUTPUT_PIN - INPUT_PIN
void MDIO_voidSetPinDirection (u8 A_u8PortId , u8 A_u8PinId , u8 A_u8Direction)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	2d 97       	sbiw	r28, 0x0d	; 13
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	6a 83       	std	Y+2, r22	; 0x02
    1ed4:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	3d 87       	std	Y+13, r19	; 0x0d
    1ede:	2c 87       	std	Y+12, r18	; 0x0c
    1ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ee2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <MDIO_voidSetPinDirection+0x30>
    1eea:	4f c0       	rjmp	.+158    	; 0x1f8a <MDIO_voidSetPinDirection+0xce>
    1eec:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eee:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <MDIO_voidSetPinDirection+0x44>
    1ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	71 f0       	breq	.+28     	; 0x1f1a <MDIO_voidSetPinDirection+0x5e>
    1efe:	eb c0       	rjmp	.+470    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
    1f00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <MDIO_voidSetPinDirection+0x50>
    1f0a:	77 c0       	rjmp	.+238    	; 0x1ffa <MDIO_voidSetPinDirection+0x13e>
    1f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	91 05       	cpc	r25, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <MDIO_voidSetPinDirection+0x5c>
    1f16:	a9 c0       	rjmp	.+338    	; 0x206a <MDIO_voidSetPinDirection+0x1ae>
    1f18:	de c0       	rjmp	.+444    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
	{
	case PORTA :
		switch (A_u8Direction)
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3b 87       	std	Y+11, r19	; 0x0b
    1f22:	2a 87       	std	Y+10, r18	; 0x0a
    1f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	d1 f0       	breq	.+52     	; 0x1f60 <MDIO_voidSetPinDirection+0xa4>
    1f2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f2e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f30:	21 30       	cpi	r18, 0x01	; 1
    1f32:	31 05       	cpc	r19, r1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <MDIO_voidSetPinDirection+0x7c>
    1f36:	cf c0       	rjmp	.+414    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRA_REG,A_u8PinId);
    1f38:	aa e3       	ldi	r26, 0x3A	; 58
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ea e3       	ldi	r30, 0x3A	; 58
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <MDIO_voidSetPinDirection+0x9a>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <MDIO_voidSetPinDirection+0x96>
    1f5a:	84 2b       	or	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	bb c0       	rjmp	.+374    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRA_REG,A_u8PinId);
    1f60:	aa e3       	ldi	r26, 0x3A	; 58
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ea e3       	ldi	r30, 0x3A	; 58
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <MDIO_voidSetPinDirection+0xc2>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <MDIO_voidSetPinDirection+0xbe>
    1f82:	80 95       	com	r24
    1f84:	84 23       	and	r24, r20
    1f86:	8c 93       	st	X, r24
    1f88:	a6 c0       	rjmp	.+332    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTB :
		switch (A_u8Direction)
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	39 87       	std	Y+9, r19	; 0x09
    1f92:	28 87       	std	Y+8, r18	; 0x08
    1f94:	88 85       	ldd	r24, Y+8	; 0x08
    1f96:	99 85       	ldd	r25, Y+9	; 0x09
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	d1 f0       	breq	.+52     	; 0x1fd0 <MDIO_voidSetPinDirection+0x114>
    1f9c:	28 85       	ldd	r18, Y+8	; 0x08
    1f9e:	39 85       	ldd	r19, Y+9	; 0x09
    1fa0:	21 30       	cpi	r18, 0x01	; 1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <MDIO_voidSetPinDirection+0xec>
    1fa6:	97 c0       	rjmp	.+302    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRB_REG,A_u8PinId);
    1fa8:	a7 e3       	ldi	r26, 0x37	; 55
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e7 e3       	ldi	r30, 0x37	; 55
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <MDIO_voidSetPinDirection+0x10a>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <MDIO_voidSetPinDirection+0x106>
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	83 c0       	rjmp	.+262    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRB_REG,A_u8PinId);
    1fd0:	a7 e3       	ldi	r26, 0x37	; 55
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e7 e3       	ldi	r30, 0x37	; 55
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <MDIO_voidSetPinDirection+0x132>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <MDIO_voidSetPinDirection+0x12e>
    1ff2:	80 95       	com	r24
    1ff4:	84 23       	and	r24, r20
    1ff6:	8c 93       	st	X, r24
    1ff8:	6e c0       	rjmp	.+220    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTC :
		switch (A_u8Direction)
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	3f 83       	std	Y+7, r19	; 0x07
    2002:	2e 83       	std	Y+6, r18	; 0x06
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	d1 f0       	breq	.+52     	; 0x2040 <MDIO_voidSetPinDirection+0x184>
    200c:	2e 81       	ldd	r18, Y+6	; 0x06
    200e:	3f 81       	ldd	r19, Y+7	; 0x07
    2010:	21 30       	cpi	r18, 0x01	; 1
    2012:	31 05       	cpc	r19, r1
    2014:	09 f0       	breq	.+2      	; 0x2018 <MDIO_voidSetPinDirection+0x15c>
    2016:	5f c0       	rjmp	.+190    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRC_REG,A_u8PinId);
    2018:	a4 e3       	ldi	r26, 0x34	; 52
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e4 e3       	ldi	r30, 0x34	; 52
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	48 2f       	mov	r20, r24
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <MDIO_voidSetPinDirection+0x17a>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <MDIO_voidSetPinDirection+0x176>
    203a:	84 2b       	or	r24, r20
    203c:	8c 93       	st	X, r24
    203e:	4b c0       	rjmp	.+150    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRC_REG,A_u8PinId);
    2040:	a4 e3       	ldi	r26, 0x34	; 52
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e4 e3       	ldi	r30, 0x34	; 52
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <MDIO_voidSetPinDirection+0x1a2>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <MDIO_voidSetPinDirection+0x19e>
    2062:	80 95       	com	r24
    2064:	84 23       	and	r24, r20
    2066:	8c 93       	st	X, r24
    2068:	36 c0       	rjmp	.+108    	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTD :
		switch (A_u8Direction)
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	3d 83       	std	Y+5, r19	; 0x05
    2072:	2c 83       	std	Y+4, r18	; 0x04
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	c9 f0       	breq	.+50     	; 0x20ae <MDIO_voidSetPinDirection+0x1f2>
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	21 30       	cpi	r18, 0x01	; 1
    2082:	31 05       	cpc	r19, r1
    2084:	41 f5       	brne	.+80     	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRD_REG,A_u8PinId);
    2086:	a1 e3       	ldi	r26, 0x31	; 49
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e1 e3       	ldi	r30, 0x31	; 49
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <MDIO_voidSetPinDirection+0x1e8>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <MDIO_voidSetPinDirection+0x1e4>
    20a8:	84 2b       	or	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRD_REG,A_u8PinId);
    20ae:	a1 e3       	ldi	r26, 0x31	; 49
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e1 e3       	ldi	r30, 0x31	; 49
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <MDIO_voidSetPinDirection+0x210>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <MDIO_voidSetPinDirection+0x20c>
    20d0:	80 95       	com	r24
    20d2:	84 23       	and	r24, r20
    20d4:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    20d6:	2d 96       	adiw	r28, 0x0d	; 13
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <MDIO_u8GetPinValue>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
u8 MDIO_u8GetPinValue (u8 A_u8PortId , u8 A_u8PinId)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <MDIO_u8GetPinValue+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <MDIO_u8GetPinValue+0x8>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue = 0;
    20fa:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortId)
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	3d 83       	std	Y+5, r19	; 0x05
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	4c 81       	ldd	r20, Y+4	; 0x04
    2108:	5d 81       	ldd	r21, Y+5	; 0x05
    210a:	41 30       	cpi	r20, 0x01	; 1
    210c:	51 05       	cpc	r21, r1
    210e:	41 f1       	breq	.+80     	; 0x2160 <MDIO_u8GetPinValue+0x78>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	91 05       	cpc	r25, r1
    2118:	34 f4       	brge	.+12     	; 0x2126 <MDIO_u8GetPinValue+0x3e>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	21 15       	cp	r18, r1
    2120:	31 05       	cpc	r19, r1
    2122:	61 f0       	breq	.+24     	; 0x213c <MDIO_u8GetPinValue+0x54>
    2124:	52 c0       	rjmp	.+164    	; 0x21ca <MDIO_u8GetPinValue+0xe2>
    2126:	4c 81       	ldd	r20, Y+4	; 0x04
    2128:	5d 81       	ldd	r21, Y+5	; 0x05
    212a:	42 30       	cpi	r20, 0x02	; 2
    212c:	51 05       	cpc	r21, r1
    212e:	51 f1       	breq	.+84     	; 0x2184 <MDIO_u8GetPinValue+0x9c>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	91 05       	cpc	r25, r1
    2138:	b9 f1       	breq	.+110    	; 0x21a8 <MDIO_u8GetPinValue+0xc0>
    213a:	47 c0       	rjmp	.+142    	; 0x21ca <MDIO_u8GetPinValue+0xe2>
	{
	case PORTA :
		local_u8PinValue = GET_BIT (PINA_REG , A_u8PinId);
    213c:	e9 e3       	ldi	r30, 0x39	; 57
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <MDIO_u8GetPinValue+0x6c>
    2150:	55 95       	asr	r21
    2152:	47 95       	ror	r20
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <MDIO_u8GetPinValue+0x68>
    2158:	ca 01       	movw	r24, r20
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	35 c0       	rjmp	.+106    	; 0x21ca <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTB :
		local_u8PinValue = GET_BIT (PINB_REG , A_u8PinId);
    2160:	e6 e3       	ldi	r30, 0x36	; 54
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a9 01       	movw	r20, r18
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <MDIO_u8GetPinValue+0x90>
    2174:	55 95       	asr	r21
    2176:	47 95       	ror	r20
    2178:	8a 95       	dec	r24
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <MDIO_u8GetPinValue+0x8c>
    217c:	ca 01       	movw	r24, r20
    217e:	81 70       	andi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	23 c0       	rjmp	.+70     	; 0x21ca <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTC :
		local_u8PinValue = GET_BIT (PINC_REG , A_u8PinId);
    2184:	e3 e3       	ldi	r30, 0x33	; 51
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <MDIO_u8GetPinValue+0xb4>
    2198:	55 95       	asr	r21
    219a:	47 95       	ror	r20
    219c:	8a 95       	dec	r24
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <MDIO_u8GetPinValue+0xb0>
    21a0:	ca 01       	movw	r24, r20
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	11 c0       	rjmp	.+34     	; 0x21ca <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTD :
		local_u8PinValue = GET_BIT (PIND_REG , A_u8PinId);
    21a8:	e0 e3       	ldi	r30, 0x30	; 48
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <MDIO_u8GetPinValue+0xd8>
    21bc:	55 95       	asr	r21
    21be:	47 95       	ror	r20
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <MDIO_u8GetPinValue+0xd4>
    21c4:	ca 01       	movw	r24, r20
    21c6:	81 70       	andi	r24, 0x01	; 1
    21c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_u8PinValue;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <MDIO_voidSetPortValue>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PortValue :- u8
void MDIO_voidSetPortValue (u8 A_u8PortId , u8 A_u8PortValue)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <MDIO_voidSetPortValue+0x6>
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <MDIO_voidSetPortValue+0x8>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3c 83       	std	Y+4, r19	; 0x04
    21f4:	2b 83       	std	Y+3, r18	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	d1 f0       	breq	.+52     	; 0x2234 <MDIO_voidSetPortValue+0x58>
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	2c f4       	brge	.+10     	; 0x2214 <MDIO_voidSetPortValue+0x38>
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 f0       	breq	.+24     	; 0x222a <MDIO_voidSetPortValue+0x4e>
    2212:	1e c0       	rjmp	.+60     	; 0x2250 <MDIO_voidSetPortValue+0x74>
    2214:	2b 81       	ldd	r18, Y+3	; 0x03
    2216:	3c 81       	ldd	r19, Y+4	; 0x04
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	81 f0       	breq	.+32     	; 0x223e <MDIO_voidSetPortValue+0x62>
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	81 f0       	breq	.+32     	; 0x2248 <MDIO_voidSetPortValue+0x6c>
    2228:	13 c0       	rjmp	.+38     	; 0x2250 <MDIO_voidSetPortValue+0x74>
	{
	case PORTA :
		PORTA_REG = A_u8PortValue;
    222a:	eb e3       	ldi	r30, 0x3B	; 59
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	80 83       	st	Z, r24
    2232:	0e c0       	rjmp	.+28     	; 0x2250 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTB :
		PORTB_REG = A_u8PortValue;
    2234:	e8 e3       	ldi	r30, 0x38	; 56
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	80 83       	st	Z, r24
    223c:	09 c0       	rjmp	.+18     	; 0x2250 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTC :
		PORTC_REG = A_u8PortValue;
    223e:	e5 e3       	ldi	r30, 0x35	; 53
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	80 83       	st	Z, r24
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTD :
		PORTD_REG = A_u8PortValue;
    2248:	e2 e3       	ldi	r30, 0x32	; 50
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	80 83       	st	Z, r24
		break;
	}
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortId , u8 A_u8PortDirection)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <MDIO_voidSetPortDirection+0x6>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <MDIO_voidSetPortDirection+0x8>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3c 83       	std	Y+4, r19	; 0x04
    2276:	2b 83       	std	Y+3, r18	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	91 05       	cpc	r25, r1
    2280:	d1 f0       	breq	.+52     	; 0x22b6 <MDIO_voidSetPortDirection+0x58>
    2282:	2b 81       	ldd	r18, Y+3	; 0x03
    2284:	3c 81       	ldd	r19, Y+4	; 0x04
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	2c f4       	brge	.+10     	; 0x2296 <MDIO_voidSetPortDirection+0x38>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	61 f0       	breq	.+24     	; 0x22ac <MDIO_voidSetPortDirection+0x4e>
    2294:	1e c0       	rjmp	.+60     	; 0x22d2 <MDIO_voidSetPortDirection+0x74>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	81 f0       	breq	.+32     	; 0x22c0 <MDIO_voidSetPortDirection+0x62>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	91 05       	cpc	r25, r1
    22a8:	81 f0       	breq	.+32     	; 0x22ca <MDIO_voidSetPortDirection+0x6c>
    22aa:	13 c0       	rjmp	.+38     	; 0x22d2 <MDIO_voidSetPortDirection+0x74>
	{
	case PORTA :
		DDRA_REG = A_u8PortDirection;
    22ac:	ea e3       	ldi	r30, 0x3A	; 58
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	80 83       	st	Z, r24
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTB :
		DDRB_REG = A_u8PortDirection;
    22b6:	e7 e3       	ldi	r30, 0x37	; 55
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	80 83       	st	Z, r24
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTC :
		DDRC_REG = A_u8PortDirection;
    22c0:	e4 e3       	ldi	r30, 0x34	; 52
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	80 83       	st	Z, r24
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTD :
		DDRD_REG = A_u8PortDirection;
    22ca:	e1 e3       	ldi	r30, 0x31	; 49
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 83       	st	Z, r24
		break;
	}
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <EEPROM_voidSendDataByte>:

#include <util/delay.h>


void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	62 97       	sbiw	r28, 0x12	; 18
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	99 8b       	std	Y+17, r25	; 0x11
    22f6:	88 8b       	std	Y+16, r24	; 0x10
    22f8:	6a 8b       	std	Y+18, r22	; 0x12
	u8 local_u8DataPacket;
	local_u8DataPacket=EEPROM_FIXED_ADDRESS | (A2_CONNECTION<<2) | (u8)(Copy_u16LocationAddress>>8);
    22fa:	88 89       	ldd	r24, Y+16	; 0x10
    22fc:	99 89       	ldd	r25, Y+17	; 0x11
    22fe:	89 2f       	mov	r24, r25
    2300:	99 27       	eor	r25, r25
    2302:	80 65       	ori	r24, 0x50	; 80
    2304:	8f 87       	std	Y+15, r24	; 0x0f
	//send start condition
	TWI_u8SendStartCondition();
    2306:	0e 94 03 1c 	call	0x3806	; 0x3806 <TWI_u8SendStartCondition>
	//send slave address with write operation
	TWI_u8SendSlaveAddressWithWrite(local_u8DataPacket);
    230a:	8f 85       	ldd	r24, Y+15	; 0x0f
    230c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <TWI_u8SendSlaveAddressWithWrite>
	//send the rest of the byte
	TWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16LocationAddress);
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send data
	TWI_ErrorStatusMasterWriteDataByte(Copy_u8DataByte);
    2316:	8a 89       	ldd	r24, Y+18	; 0x12
    2318:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send stop condition
	TWI_voidSendStopCondition();
    231c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <TWI_voidSendStopCondition>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 e2       	ldi	r26, 0x20	; 32
    2326:	b1 e4       	ldi	r27, 0x41	; 65
    2328:	8b 87       	std	Y+11, r24	; 0x0b
    232a:	9c 87       	std	Y+12, r25	; 0x0c
    232c:	ad 87       	std	Y+13, r26	; 0x0d
    232e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2330:	6b 85       	ldd	r22, Y+11	; 0x0b
    2332:	7c 85       	ldd	r23, Y+12	; 0x0c
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a ef       	ldi	r20, 0xFA	; 250
    233e:	54 e4       	ldi	r21, 0x44	; 68
    2340:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	8f 83       	std	Y+7, r24	; 0x07
    234a:	98 87       	std	Y+8, r25	; 0x08
    234c:	a9 87       	std	Y+9, r26	; 0x09
    234e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2350:	6f 81       	ldd	r22, Y+7	; 0x07
    2352:	78 85       	ldd	r23, Y+8	; 0x08
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
    2370:	3f c0       	rjmp	.+126    	; 0x23f0 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	4c f5       	brge	.+82     	; 0x23dc <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	6b 85       	ldd	r22, Y+11	; 0x0b
    238c:	7c 85       	ldd	r23, Y+12	; 0x0c
    238e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2390:	9e 85       	ldd	r25, Y+14	; 0x0e
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <EEPROM_voidSendDataByte+0xf2>
    23b4:	88 ec       	ldi	r24, 0xC8	; 200
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <EEPROM_voidSendDataByte+0xe0>
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <EEPROM_voidSendDataByte+0xd4>
    23da:	14 c0       	rjmp	.+40     	; 0x2404 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	6f 81       	ldd	r22, Y+7	; 0x07
    23de:	78 85       	ldd	r23, Y+8	; 0x08
    23e0:	89 85       	ldd	r24, Y+9	; 0x09
    23e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e4:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <EEPROM_voidSendDataByte+0x11c>
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2404:	62 96       	adiw	r28, 0x12	; 18
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <EEPROM32_voidSendDataByte>:

void EEPROM32_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	62 97       	sbiw	r28, 0x12	; 18
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	99 8b       	std	Y+17, r25	; 0x11
    242c:	88 8b       	std	Y+16, r24	; 0x10
    242e:	6a 8b       	std	Y+18, r22	; 0x12
	u8 local_u8DataPacket;
	local_u8DataPacket=EEPROM_FIXED_ADDRESS | (A1_CONNECTION<<2) | (A0_CONNECTION<<1);
    2430:	80 e5       	ldi	r24, 0x50	; 80
    2432:	8f 87       	std	Y+15, r24	; 0x0f
	//send start condition
	TWI_u8SendStartCondition();
    2434:	0e 94 03 1c 	call	0x3806	; 0x3806 <TWI_u8SendStartCondition>
	//send slave address with write operation
	TWI_u8SendSlaveAddressWithWrite(local_u8DataPacket);
    2438:	8f 85       	ldd	r24, Y+15	; 0x0f
    243a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <TWI_u8SendSlaveAddressWithWrite>
	//send the MSB of the address byte
	TWI_ErrorStatusMasterWriteDataByte((u8)(Copy_u16LocationAddress>>8));
    243e:	88 89       	ldd	r24, Y+16	; 0x10
    2440:	99 89       	ldd	r25, Y+17	; 0x11
    2442:	89 2f       	mov	r24, r25
    2444:	99 27       	eor	r25, r25
    2446:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send the LSB of the address byte
	TWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16LocationAddress);
    244a:	88 89       	ldd	r24, Y+16	; 0x10
    244c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send data
	TWI_ErrorStatusMasterWriteDataByte(Copy_u8DataByte);
    2450:	8a 89       	ldd	r24, Y+18	; 0x12
    2452:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send stop condition
	TWI_voidSendStopCondition();
    2456:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <TWI_voidSendStopCondition>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e2       	ldi	r26, 0x20	; 32
    2460:	b1 e4       	ldi	r27, 0x41	; 65
    2462:	8b 87       	std	Y+11, r24	; 0x0b
    2464:	9c 87       	std	Y+12, r25	; 0x0c
    2466:	ad 87       	std	Y+13, r26	; 0x0d
    2468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	98 87       	std	Y+8, r25	; 0x08
    2486:	a9 87       	std	Y+9, r26	; 0x09
    2488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <EEPROM32_voidSendDataByte+0x96>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <EEPROM32_voidSendDataByte+0x114>
	else if (__tmp > 65535)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <EEPROM32_voidSendDataByte+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <EEPROM32_voidSendDataByte+0xf6>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <EEPROM32_voidSendDataByte+0xe4>
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <EEPROM32_voidSendDataByte+0xd8>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <EEPROM32_voidSendDataByte+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <EEPROM32_voidSendDataByte+0x120>
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    253e:	62 96       	adiw	r28, 0x12	; 18
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <EEPROM_u8ReadDataByte>:


u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <EEPROM_u8ReadDataByte+0x6>
    2556:	00 d0       	rcall	.+0      	; 0x2558 <EEPROM_u8ReadDataByte+0x8>
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8Data;
	u8 local_u8DataPacket;
	local_u8DataPacket=EEPROM_FIXED_ADDRESS | (A2_CONNECTION<<2) | (u8)(Copy_u16LocationAddress>>8);
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	89 2f       	mov	r24, r25
    2566:	99 27       	eor	r25, r25
    2568:	80 65       	ori	r24, 0x50	; 80
    256a:	89 83       	std	Y+1, r24	; 0x01
	//send start condition
	TWI_u8SendStartCondition();
    256c:	0e 94 03 1c 	call	0x3806	; 0x3806 <TWI_u8SendStartCondition>
	//send slave address with write operation
	TWI_u8SendSlaveAddressWithWrite(local_u8DataPacket);
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <TWI_u8SendSlaveAddressWithWrite>
	//send the rest of the byte
	TWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16LocationAddress);
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send repeated start condition
	TWI_u8SendReStartCondition();
    257c:	0e 94 2e 1c 	call	0x385c	; 0x385c <TWI_u8SendReStartCondition>
	//send slave address with read operation
	TWI_u8SendSlaveAddressWithRead(local_u8DataPacket);
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	0e 94 92 1c 	call	0x3924	; 0x3924 <TWI_u8SendSlaveAddressWithRead>
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByte(&local_u8Data);
    2586:	ce 01       	movw	r24, r28
    2588:	02 96       	adiw	r24, 0x02	; 2
    258a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <TWI_ErrorStatusMasterReadDataByte>
	/*send the stop condition*/
	TWI_voidSendStopCondition();
    258e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <TWI_voidSendStopCondition>

	return local_u8Data;
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <EEPROM32_u8ReadDataByte>:

u8 EEPROM32_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <EEPROM32_u8ReadDataByte+0x6>
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <EEPROM32_u8ReadDataByte+0x8>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8Data;
	u8 local_u8DataPacket;
	local_u8DataPacket=EEPROM_FIXED_ADDRESS | (A1_CONNECTION<<2) | (A0_CONNECTION<<1);
    25b2:	80 e5       	ldi	r24, 0x50	; 80
    25b4:	89 83       	std	Y+1, r24	; 0x01
	//send start condition
	TWI_u8SendStartCondition();
    25b6:	0e 94 03 1c 	call	0x3806	; 0x3806 <TWI_u8SendStartCondition>
	//send slave address with write operation
	TWI_u8SendSlaveAddressWithWrite(local_u8DataPacket);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <TWI_u8SendSlaveAddressWithWrite>
	//send the MSB of the address byte
	TWI_ErrorStatusMasterWriteDataByte((u8)(Copy_u16LocationAddress>>8));
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	89 2f       	mov	r24, r25
    25c6:	99 27       	eor	r25, r25
    25c8:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send the LSB of the address byte
	TWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16LocationAddress);
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	0e 94 cb 1c 	call	0x3996	; 0x3996 <TWI_ErrorStatusMasterWriteDataByte>
	//send repeated start condition
	TWI_u8SendReStartCondition();
    25d2:	0e 94 2e 1c 	call	0x385c	; 0x385c <TWI_u8SendReStartCondition>
	//send slave address with read operation
	TWI_u8SendSlaveAddressWithRead(local_u8DataPacket);
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	0e 94 92 1c 	call	0x3924	; 0x3924 <TWI_u8SendSlaveAddressWithRead>
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByte(&local_u8Data);
    25dc:	ce 01       	movw	r24, r28
    25de:	02 96       	adiw	r24, 0x02	; 2
    25e0:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <TWI_ErrorStatusMasterReadDataByte>
	/*send the stop condition*/
	TWI_voidSendStopCondition();
    25e4:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <TWI_voidSendStopCondition>

	return local_u8Data;
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_Configurations.h"


void MGI_voidEnable (void)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_FLAG);
    2600:	af e5       	ldi	r26, 0x5F	; 95
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	ef e5       	ldi	r30, 0x5F	; 95
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	80 68       	ori	r24, 0x80	; 128
    260c:	8c 93       	st	X, r24
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <MGI_voidDisable>:

void MGI_voidDisable (void)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_FLAG);
    261c:	af e5       	ldi	r26, 0x5F	; 95
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	ef e5       	ldi	r30, 0x5F	; 95
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8f 77       	andi	r24, 0x7F	; 127
    2628:	8c 93       	st	X, r24
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <HLCD_voidSendCommand>:
	#define FUNCTION_SET 0b00111000
#elif (LCD_MODE == Four_bit)
	#define FUNCTION_SET 0b00101000
#endif
void HLCD_voidSendCommand (u8 A_u8Command)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	2f 97       	sbiw	r28, 0x0f	; 15
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	8f 87       	std	Y+15, r24	; 0x0f
#if (LCD_MODE == Eight_bit)
	//RS -> LOW
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , RS_PIN , PIN_LOW);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	62 e0       	ldi	r22, 0x02	; 2
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//RW-> LOW
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , RW_PIN , PIN_LOW);
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	63 e0       	ldi	r22, 0x03	; 3
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT , A_u8Command);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	6f 85       	ldd	r22, Y+15	; 0x0f
    265e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <MDIO_voidSetPortValue>
	//Send Pulse to LCD With 2ms
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_HIGH);
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	64 e0       	ldi	r22, 0x04	; 4
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e4       	ldi	r27, 0x40	; 64
    2674:	8b 87       	std	Y+11, r24	; 0x0b
    2676:	9c 87       	std	Y+12, r25	; 0x0c
    2678:	ad 87       	std	Y+13, r26	; 0x0d
    267a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8f 83       	std	Y+7, r24	; 0x07
    2696:	98 87       	std	Y+8, r25	; 0x08
    2698:	a9 87       	std	Y+9, r26	; 0x09
    269a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <HLCD_voidSendCommand+0xee>
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <HLCD_voidSendCommand+0xdc>
    2710:	9c 83       	std	Y+4, r25	; 0x04
    2712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <HLCD_voidSendCommand+0xd0>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <HLCD_voidSendCommand+0x118>
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_LOW);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	64 e0       	ldi	r22, 0x04	; 4
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//Send Pulse to LCD With 2ms
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_HIGH);
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_LOW);
#endif
}
    275a:	2f 96       	adiw	r28, 0x0f	; 15
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	2f 97       	sbiw	r28, 0x0f	; 15
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	8f 87       	std	Y+15, r24	; 0x0f
#if (LCD_MODE == Eight_bit)
	//RS -> HIGH
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , RS_PIN , PIN_HIGH);
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//RW-> LOW
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , RW_PIN , PIN_LOW);
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	63 e0       	ldi	r22, 0x03	; 3
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT , A_u8Data);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	6f 85       	ldd	r22, Y+15	; 0x0f
    279a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <MDIO_voidSetPortValue>
	//Send Pulse to LCD With 2ms
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_HIGH);
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e4       	ldi	r27, 0x40	; 64
    27b0:	8b 87       	std	Y+11, r24	; 0x0b
    27b2:	9c 87       	std	Y+12, r25	; 0x0c
    27b4:	ad 87       	std	Y+13, r26	; 0x0d
    27b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    27bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27be:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a ef       	ldi	r20, 0xFA	; 250
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8f 83       	std	Y+7, r24	; 0x07
    27d2:	98 87       	std	Y+8, r25	; 0x08
    27d4:	a9 87       	std	Y+9, r26	; 0x09
    27d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <HLCD_voidSendData+0x8e>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    27fa:	6f 81       	ldd	r22, Y+7	; 0x07
    27fc:	78 85       	ldd	r23, Y+8	; 0x08
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	6b 85       	ldd	r22, Y+11	; 0x0b
    2814:	7c 85       	ldd	r23, Y+12	; 0x0c
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	0f c0       	rjmp	.+30     	; 0x285a <HLCD_voidSendData+0xee>
    283c:	88 ec       	ldi	r24, 0xC8	; 200
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 83       	std	Y+4, r25	; 0x04
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <HLCD_voidSendData+0xdc>
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <HLCD_voidSendData+0xd0>
    2862:	14 c0       	rjmp	.+40     	; 0x288c <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <HLCD_voidSendData+0x118>
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_LOW);
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	64 e0       	ldi	r22, 0x04	; 4
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
	//Send Pulse to LCD With 2ms
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_HIGH);
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT , E_PIN , PIN_LOW);
#endif
}
    2896:	2f 96       	adiw	r28, 0x0f	; 15
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <HLCD_voidInit>:

#define DISPLAY_CLEAR 0b00000001
#define ENTRY_MODE_SET 0b00000010

void HLCD_voidInit (void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	e8 97       	sbiw	r28, 0x38	; 56
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 ef       	ldi	r26, 0xF0	; 240
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	8d ab       	std	Y+53, r24	; 0x35
    28c6:	9e ab       	std	Y+54, r25	; 0x36
    28c8:	af ab       	std	Y+55, r26	; 0x37
    28ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6d a9       	ldd	r22, Y+53	; 0x35
    28ce:	7e a9       	ldd	r23, Y+54	; 0x36
    28d0:	8f a9       	ldd	r24, Y+55	; 0x37
    28d2:	98 ad       	ldd	r25, Y+56	; 0x38
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	89 ab       	std	Y+49, r24	; 0x31
    28e6:	9a ab       	std	Y+50, r25	; 0x32
    28e8:	ab ab       	std	Y+51, r26	; 0x33
    28ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <HLCD_voidInit+0x66>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	98 ab       	std	Y+48, r25	; 0x30
    290a:	8f a7       	std	Y+47, r24	; 0x2f
    290c:	3f c0       	rjmp	.+126    	; 0x298c <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    290e:	69 a9       	ldd	r22, Y+49	; 0x31
    2910:	7a a9       	ldd	r23, Y+50	; 0x32
    2912:	8b a9       	ldd	r24, Y+51	; 0x33
    2914:	9c a9       	ldd	r25, Y+52	; 0x34
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	0f c0       	rjmp	.+30     	; 0x296e <HLCD_voidInit+0xc6>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9e a7       	std	Y+46, r25	; 0x2e
    2956:	8d a7       	std	Y+45, r24	; 0x2d
    2958:	8d a5       	ldd	r24, Y+45	; 0x2d
    295a:	9e a5       	ldd	r25, Y+46	; 0x2e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <HLCD_voidInit+0xb4>
    2960:	9e a7       	std	Y+46, r25	; 0x2e
    2962:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	98 a9       	ldd	r25, Y+48	; 0x30
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <HLCD_voidInit+0xa8>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	9c a7       	std	Y+44, r25	; 0x2c
    2992:	8b a7       	std	Y+43, r24	; 0x2b
    2994:	8b a5       	ldd	r24, Y+43	; 0x2b
    2996:	9c a5       	ldd	r25, Y+44	; 0x2c
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <HLCD_voidInit+0xf0>
    299c:	9c a7       	std	Y+44, r25	; 0x2c
    299e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	//Send Function Set
#if (LCD_MODE == Four_bit)
	HLCD_voidSendCommand(0b00000010);
#endif
	HLCD_voidSendCommand(FUNCTION_SET);
    29a0:	88 e3       	ldi	r24, 0x38	; 56
    29a2:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8f a3       	std	Y+39, r24	; 0x27
    29b0:	98 a7       	std	Y+40, r25	; 0x28
    29b2:	a9 a7       	std	Y+41, r26	; 0x29
    29b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6f a1       	ldd	r22, Y+39	; 0x27
    29b8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ba:	89 a5       	ldd	r24, Y+41	; 0x29
    29bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8b a3       	std	Y+35, r24	; 0x23
    29d0:	9c a3       	std	Y+36, r25	; 0x24
    29d2:	ad a3       	std	Y+37, r26	; 0x25
    29d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29d6:	6b a1       	ldd	r22, Y+35	; 0x23
    29d8:	7c a1       	ldd	r23, Y+36	; 0x24
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <HLCD_voidInit+0x150>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	89 a3       	std	Y+33, r24	; 0x21
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <HLCD_voidInit+0x1b0>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	98 a3       	std	Y+32, r25	; 0x20
    2a40:	8f 8f       	std	Y+31, r24	; 0x1f
    2a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a44:	98 a1       	ldd	r25, Y+32	; 0x20
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <HLCD_voidInit+0x19e>
    2a4a:	98 a3       	std	Y+32, r25	; 0x20
    2a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <HLCD_voidInit+0x192>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	89 a1       	ldd	r24, Y+33	; 0x21
    2a78:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <HLCD_voidInit+0x1da>
    2a86:	9e 8f       	std	Y+30, r25	; 0x1e
    2a88:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for more than 39us
	_delay_ms(1);
	//Send Display On/Off Control
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    2a8a:	8f e0       	ldi	r24, 0x0F	; 15
    2a8c:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	a0 e8       	ldi	r26, 0x80	; 128
    2a96:	bf e3       	ldi	r27, 0x3F	; 63
    2a98:	89 8f       	std	Y+25, r24	; 0x19
    2a9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	4a ef       	ldi	r20, 0xFA	; 250
    2aae:	54 e4       	ldi	r21, 0x44	; 68
    2ab0:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	8d 8b       	std	Y+21, r24	; 0x15
    2aba:	9e 8b       	std	Y+22, r25	; 0x16
    2abc:	af 8b       	std	Y+23, r26	; 0x17
    2abe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e8       	ldi	r20, 0x80	; 128
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2ad4:	88 23       	and	r24, r24
    2ad6:	2c f4       	brge	.+10     	; 0x2ae2 <HLCD_voidInit+0x23a>
		__ticks = 1;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
    2ae0:	3f c0       	rjmp	.+126    	; 0x2b60 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	4c f5       	brge	.+82     	; 0x2b4c <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afa:	69 8d       	ldd	r22, Y+25	; 0x19
    2afc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9c 8b       	std	Y+20, r25	; 0x14
    2b20:	8b 8b       	std	Y+19, r24	; 0x13
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <HLCD_voidInit+0x29a>
    2b24:	88 ec       	ldi	r24, 0xC8	; 200
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9a 8b       	std	Y+18, r25	; 0x12
    2b2a:	89 8b       	std	Y+17, r24	; 0x11
    2b2c:	89 89       	ldd	r24, Y+17	; 0x11
    2b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <HLCD_voidInit+0x288>
    2b34:	9a 8b       	std	Y+18, r25	; 0x12
    2b36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	9c 8b       	std	Y+20, r25	; 0x14
    2b40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	8b 89       	ldd	r24, Y+19	; 0x13
    2b44:	9c 89       	ldd	r25, Y+20	; 0x14
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	69 f7       	brne	.-38     	; 0x2b24 <HLCD_voidInit+0x27c>
    2b4a:	14 c0       	rjmp	.+40     	; 0x2b74 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	98 8d       	ldd	r25, Y+24	; 0x18
    2b54:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9c 8b       	std	Y+20, r25	; 0x14
    2b5e:	8b 8b       	std	Y+19, r24	; 0x13
    2b60:	8b 89       	ldd	r24, Y+19	; 0x13
    2b62:	9c 89       	ldd	r25, Y+20	; 0x14
    2b64:	98 8b       	std	Y+16, r25	; 0x10
    2b66:	8f 87       	std	Y+15, r24	; 0x0f
    2b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6a:	98 89       	ldd	r25, Y+16	; 0x10
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <HLCD_voidInit+0x2c4>
    2b70:	98 8b       	std	Y+16, r25	; 0x10
    2b72:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for more than 39us
	_delay_ms(1);
	//Send Clear Display
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e4       	ldi	r27, 0x40	; 64
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <HLCD_voidInit+0x324>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <HLCD_voidInit+0x384>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <HLCD_voidInit+0x372>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <HLCD_voidInit+0x366>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <HLCD_voidInit+0x3ae>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 1.53ms
	_delay_ms(2);
	//Send Entry Mode Set
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
}
    2c64:	e8 96       	adiw	r28, 0x38	; 56
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <HLCD_voidClearDisplay>:


void HLCD_voidClearDisplay (void)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	2e 97       	sbiw	r28, 0x0e	; 14
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
	//Send Clear Display
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	a0 e0       	ldi	r26, 0x00	; 0
    2c96:	b0 e4       	ldi	r27, 0x40	; 64
    2c98:	8b 87       	std	Y+11, r24	; 0x0b
    2c9a:	9c 87       	std	Y+12, r25	; 0x0c
    2c9c:	ad 87       	std	Y+13, r26	; 0x0d
    2c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	8f 83       	std	Y+7, r24	; 0x07
    2cba:	98 87       	std	Y+8, r25	; 0x08
    2cbc:	a9 87       	std	Y+9, r26	; 0x09
    2cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e8       	ldi	r20, 0x80	; 128
    2cce:	5f e3       	ldi	r21, 0x3F	; 63
    2cd0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2cd4:	88 23       	and	r24, r24
    2cd6:	2c f4       	brge	.+10     	; 0x2ce2 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	3f c0       	rjmp	.+126    	; 0x2d60 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	3f ef       	ldi	r19, 0xFF	; 255
    2cee:	4f e7       	ldi	r20, 0x7F	; 127
    2cf0:	57 e4       	ldi	r21, 0x47	; 71
    2cf2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2cf6:	18 16       	cp	r1, r24
    2cf8:	4c f5       	brge	.+82     	; 0x2d4c <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e2       	ldi	r20, 0x20	; 32
    2d08:	51 e4       	ldi	r21, 0x41	; 65
    2d0a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	0f c0       	rjmp	.+30     	; 0x2d42 <HLCD_voidClearDisplay+0xcc>
    2d24:	88 ec       	ldi	r24, 0xC8	; 200
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <HLCD_voidClearDisplay+0xba>
    2d34:	9c 83       	std	Y+4, r25	; 0x04
    2d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d38:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	9e 83       	std	Y+6, r25	; 0x06
    2d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	69 f7       	brne	.-38     	; 0x2d24 <HLCD_voidClearDisplay+0xae>
    2d4a:	14 c0       	rjmp	.+40     	; 0x2d74 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <HLCD_voidClearDisplay+0xf6>
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 1.53ms
	_delay_ms(2);
}
    2d74:	2e 96       	adiw	r28, 0x0e	; 14
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <HLCD_voidSendString>:


void HLCD_voidSendString (u8 *A_u8Ptr)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <HLCD_voidSendString+0x6>
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <HLCD_voidSendString+0x8>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0 ; A_u8Ptr[i]!='\0'; i++)
    2d96:	1a 82       	std	Y+2, r1	; 0x02
    2d98:	19 82       	std	Y+1, r1	; 0x01
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <HLCD_voidSendString+0x34>
	{
		HLCD_voidSendData(A_u8Ptr[i]);
    2d9c:	29 81       	ldd	r18, Y+1	; 0x01
    2d9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	fc 01       	movw	r30, r24
    2da6:	e2 0f       	add	r30, r18
    2da8:	f3 1f       	adc	r31, r19
    2daa:	80 81       	ld	r24, Z
    2dac:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
}


void HLCD_voidSendString (u8 *A_u8Ptr)
{
	for (int i = 0 ; A_u8Ptr[i]!='\0'; i++)
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	01 96       	adiw	r24, 0x01	; 1
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	29 81       	ldd	r18, Y+1	; 0x01
    2dbc:	3a 81       	ldd	r19, Y+2	; 0x02
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e2 0f       	add	r30, r18
    2dc6:	f3 1f       	adc	r31, r19
    2dc8:	80 81       	ld	r24, Z
    2dca:	88 23       	and	r24, r24
    2dcc:	39 f7       	brne	.-50     	; 0x2d9c <HLCD_voidSendString+0x16>
	{
		HLCD_voidSendData(A_u8Ptr[i]);
	}
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <HLCD_voidSendNumber>:

void HLCD_voidSendNumber (u32 A_u32Number)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <HLCD_voidSendNumber+0x6>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <HLCD_voidSendNumber+0x8>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
	if (A_u32Number == 0)
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <HLCD_voidSendNumber+0x20>
	{
		HLCD_voidSendData('0');
    2df4:	80 e3       	ldi	r24, 0x30	; 48
    2df6:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
    2dfa:	45 c0       	rjmp	.+138    	; 0x2e86 <HLCD_voidSendNumber+0xaa>
	}
	else
	{
		u32 local_u32Number = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9a 83       	std	Y+2, r25	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	22 c0       	rjmp	.+68     	; 0x2e4a <HLCD_voidSendNumber+0x6e>
		while (A_u32Number!=0)
		{
			local_u32Number = ((local_u32Number*10)+(A_u32Number%10));
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	c9 01       	movw	r24, r18
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	e8 0f       	add	r30, r24
    2e1e:	f9 1f       	adc	r31, r25
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	2a e0       	ldi	r18, 0x0A	; 10
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	b9 01       	movw	r22, r18
    2e2a:	0e 94 96 20 	call	0x412c	; 0x412c <__udivmodhi4>
    2e2e:	8e 0f       	add	r24, r30
    2e30:	9f 1f       	adc	r25, r31
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
			A_u32Number=A_u32Number/10;
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	2a e0       	ldi	r18, 0x0A	; 10
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	b9 01       	movw	r22, r18
    2e40:	0e 94 96 20 	call	0x412c	; 0x412c <__udivmodhi4>
    2e44:	cb 01       	movw	r24, r22
    2e46:	9c 83       	std	Y+4, r25	; 0x04
    2e48:	8b 83       	std	Y+3, r24	; 0x03
		HLCD_voidSendData('0');
	}
	else
	{
		u32 local_u32Number = 1;
		while (A_u32Number!=0)
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	d1 f6       	brne	.-76     	; 0x2e06 <HLCD_voidSendNumber+0x2a>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <HLCD_voidSendNumber+0xa0>
			local_u32Number = ((local_u32Number*10)+(A_u32Number%10));
			A_u32Number=A_u32Number/10;
		}
		while (local_u32Number!=1)
		{
			HLCD_voidSendData((local_u32Number%10)+48);
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	2a e0       	ldi	r18, 0x0A	; 10
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	b9 01       	movw	r22, r18
    2e5e:	0e 94 96 20 	call	0x412c	; 0x412c <__udivmodhi4>
    2e62:	80 5d       	subi	r24, 0xD0	; 208
    2e64:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
			local_u32Number	= local_u32Number/10;
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	2a e0       	ldi	r18, 0x0A	; 10
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	b9 01       	movw	r22, r18
    2e72:	0e 94 96 20 	call	0x412c	; 0x412c <__udivmodhi4>
    2e76:	cb 01       	movw	r24, r22
    2e78:	9a 83       	std	Y+2, r25	; 0x02
    2e7a:	89 83       	std	Y+1, r24	; 0x01
		while (A_u32Number!=0)
		{
			local_u32Number = ((local_u32Number*10)+(A_u32Number%10));
			A_u32Number=A_u32Number/10;
		}
		while (local_u32Number!=1)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	91 05       	cpc	r25, r1
    2e84:	39 f7       	brne	.-50     	; 0x2e54 <HLCD_voidSendNumber+0x78>
		{
			HLCD_voidSendData((local_u32Number%10)+48);
			local_u32Number	= local_u32Number/10;
		}
	}
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <HLCD_voidGoTo>:



void HLCD_voidGoTo (u8 A_u8Row , u8 A_u8Col)
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	63 97       	sbiw	r28, 0x13	; 19
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	88 8b       	std	Y+16, r24	; 0x10
    2eaa:	69 8b       	std	Y+17, r22	; 0x11
	u8 local_u8Address;
	switch (A_u8Row)
    2eac:	88 89       	ldd	r24, Y+16	; 0x10
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3b 8b       	std	Y+19, r19	; 0x13
    2eb4:	2a 8b       	std	Y+18, r18	; 0x12
    2eb6:	8a 89       	ldd	r24, Y+18	; 0x12
    2eb8:	9b 89       	ldd	r25, Y+19	; 0x13
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <HLCD_voidGoTo+0x38>
    2ec0:	2a 89       	ldd	r18, Y+18	; 0x12
    2ec2:	3b 89       	ldd	r19, Y+19	; 0x13
    2ec4:	22 30       	cpi	r18, 0x02	; 2
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	29 f0       	breq	.+10     	; 0x2ed4 <HLCD_voidGoTo+0x40>
    2eca:	07 c0       	rjmp	.+14     	; 0x2eda <HLCD_voidGoTo+0x46>
	{
	case ROW_ONE :
		local_u8Address = ROW_ONE_ADD + A_u8Col-1;
    2ecc:	89 89       	ldd	r24, Y+17	; 0x11
    2ece:	81 50       	subi	r24, 0x01	; 1
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <HLCD_voidGoTo+0x46>
		break;
	case ROW_TWO :
		local_u8Address = ROW_TWO_ADD + A_u8Col-1;
    2ed4:	89 89       	ldd	r24, Y+17	; 0x11
    2ed6:	81 5c       	subi	r24, 0xC1	; 193
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	}
	SET_BIT(local_u8Address,PIN7);
    2eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2edc:	80 68       	ori	r24, 0x80	; 128
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_voidSendCommand(local_u8Address);
    2ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee2:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a0 e8       	ldi	r26, 0x80	; 128
    2eec:	bf e3       	ldi	r27, 0x3F	; 63
    2eee:	8b 87       	std	Y+11, r24	; 0x0b
    2ef0:	9c 87       	std	Y+12, r25	; 0x0c
    2ef2:	ad 87       	std	Y+13, r26	; 0x0d
    2ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	4a ef       	ldi	r20, 0xFA	; 250
    2f04:	54 e4       	ldi	r21, 0x44	; 68
    2f06:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	8f 83       	std	Y+7, r24	; 0x07
    2f10:	98 87       	std	Y+8, r25	; 0x08
    2f12:	a9 87       	std	Y+9, r26	; 0x09
    2f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	2c f4       	brge	.+10     	; 0x2f38 <HLCD_voidGoTo+0xa4>
		__ticks = 1;
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	3f c0       	rjmp	.+126    	; 0x2fb6 <HLCD_voidGoTo+0x122>
	else if (__tmp > 65535)
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	3f ef       	ldi	r19, 0xFF	; 255
    2f44:	4f e7       	ldi	r20, 0x7F	; 127
    2f46:	57 e4       	ldi	r21, 0x47	; 71
    2f48:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    2f4c:	18 16       	cp	r1, r24
    2f4e:	4c f5       	brge	.+82     	; 0x2fa2 <HLCD_voidGoTo+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e2       	ldi	r20, 0x20	; 32
    2f5e:	51 e4       	ldi	r21, 0x41	; 65
    2f60:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9e 83       	std	Y+6, r25	; 0x06
    2f76:	8d 83       	std	Y+5, r24	; 0x05
    2f78:	0f c0       	rjmp	.+30     	; 0x2f98 <HLCD_voidGoTo+0x104>
    2f7a:	88 ec       	ldi	r24, 0xC8	; 200
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <HLCD_voidGoTo+0xf2>
    2f8a:	9c 83       	std	Y+4, r25	; 0x04
    2f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	69 f7       	brne	.-38     	; 0x2f7a <HLCD_voidGoTo+0xe6>
    2fa0:	14 c0       	rjmp	.+40     	; 0x2fca <HLCD_voidGoTo+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa4:	78 85       	ldd	r23, Y+8	; 0x08
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2faa:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <HLCD_voidGoTo+0x12e>
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2fca:	63 96       	adiw	r28, 0x13	; 19
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <HLCD_voidCreateChar>:

void HLCD_voidCreateChar (u8 A_u8Number , u8* A_u8Ptr)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <HLCD_voidCreateChar+0x6>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <HLCD_voidCreateChar+0x8>
    2fe4:	0f 92       	push	r0
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	8b 83       	std	Y+3, r24	; 0x03
    2fec:	7d 83       	std	Y+5, r23	; 0x05
    2fee:	6c 83       	std	Y+4, r22	; 0x04
	A_u8Number *= 8;
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(A_u8Number,PIN6);
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	80 64       	ori	r24, 0x40	; 64
    3008:	8b 83       	std	Y+3, r24	; 0x03
	HLCD_voidSendCommand(A_u8Number);
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	0e 94 18 13 	call	0x2630	; 0x2630 <HLCD_voidSendCommand>
	for (int i = 0 ; i < 8 ; i++)
    3010:	1a 82       	std	Y+2, r1	; 0x02
    3012:	19 82       	std	Y+1, r1	; 0x01
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <HLCD_voidCreateChar+0x58>
	{
		HLCD_voidSendData(A_u8Ptr[i]);
    3016:	29 81       	ldd	r18, Y+1	; 0x01
    3018:	3a 81       	ldd	r19, Y+2	; 0x02
    301a:	8c 81       	ldd	r24, Y+4	; 0x04
    301c:	9d 81       	ldd	r25, Y+5	; 0x05
    301e:	fc 01       	movw	r30, r24
    3020:	e2 0f       	add	r30, r18
    3022:	f3 1f       	adc	r31, r19
    3024:	80 81       	ld	r24, Z
    3026:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
void HLCD_voidCreateChar (u8 A_u8Number , u8* A_u8Ptr)
{
	A_u8Number *= 8;
	SET_BIT(A_u8Number,PIN6);
	HLCD_voidSendCommand(A_u8Number);
	for (int i = 0 ; i < 8 ; i++)
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	9a 81       	ldd	r25, Y+2	; 0x02
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	88 30       	cpi	r24, 0x08	; 8
    303a:	91 05       	cpc	r25, r1
    303c:	64 f3       	brlt	.-40     	; 0x3016 <HLCD_voidCreateChar+0x3a>
	{
		HLCD_voidSendData(A_u8Ptr[i]);
	}
	HLCD_voidGoTo(1,1);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <HLCD_voidGoTo>
}
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <HLCD_voidPattern>:


void HLCD_voidPattern (u8 A_u8Char , u8 A_u8Start , u8 A_u8End)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	a1 97       	sbiw	r28, 0x21	; 33
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	8f 8f       	std	Y+31, r24	; 0x1f
    306c:	68 a3       	std	Y+32, r22	; 0x20
    306e:	49 a3       	std	Y+33, r20	; 0x21
	HLCD_voidGoTo(1,A_u8Start);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	68 a1       	ldd	r22, Y+32	; 0x20
    3074:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <HLCD_voidGoTo>
	HLCD_voidSendData(A_u8Char);
    3078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    307a:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a6 e9       	ldi	r26, 0x96	; 150
    3084:	b3 e4       	ldi	r27, 0x43	; 67
    3086:	89 8f       	std	Y+25, r24	; 0x19
    3088:	9a 8f       	std	Y+26, r25	; 0x1a
    308a:	ab 8f       	std	Y+27, r26	; 0x1b
    308c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308e:	69 8d       	ldd	r22, Y+25	; 0x19
    3090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	4a ef       	ldi	r20, 0xFA	; 250
    309c:	54 e4       	ldi	r21, 0x44	; 68
    309e:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8d 8b       	std	Y+21, r24	; 0x15
    30a8:	9e 8b       	std	Y+22, r25	; 0x16
    30aa:	af 8b       	std	Y+23, r26	; 0x17
    30ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ae:	6d 89       	ldd	r22, Y+21	; 0x15
    30b0:	7e 89       	ldd	r23, Y+22	; 0x16
    30b2:	8f 89       	ldd	r24, Y+23	; 0x17
    30b4:	98 8d       	ldd	r25, Y+24	; 0x18
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	2c f4       	brge	.+10     	; 0x30d0 <HLCD_voidPattern+0x7a>
		__ticks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9c 8b       	std	Y+20, r25	; 0x14
    30cc:	8b 8b       	std	Y+19, r24	; 0x13
    30ce:	3f c0       	rjmp	.+126    	; 0x314e <HLCD_voidPattern+0xf8>
	else if (__tmp > 65535)
    30d0:	6d 89       	ldd	r22, Y+21	; 0x15
    30d2:	7e 89       	ldd	r23, Y+22	; 0x16
    30d4:	8f 89       	ldd	r24, Y+23	; 0x17
    30d6:	98 8d       	ldd	r25, Y+24	; 0x18
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	4f e7       	ldi	r20, 0x7F	; 127
    30de:	57 e4       	ldi	r21, 0x47	; 71
    30e0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    30e4:	18 16       	cp	r1, r24
    30e6:	4c f5       	brge	.+82     	; 0x313a <HLCD_voidPattern+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e2       	ldi	r20, 0x20	; 32
    30f6:	51 e4       	ldi	r21, 0x41	; 65
    30f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	0f c0       	rjmp	.+30     	; 0x3130 <HLCD_voidPattern+0xda>
    3112:	88 ec       	ldi	r24, 0xC8	; 200
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9a 8b       	std	Y+18, r25	; 0x12
    3118:	89 8b       	std	Y+17, r24	; 0x11
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	9a 89       	ldd	r25, Y+18	; 0x12
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <HLCD_voidPattern+0xc8>
    3122:	9a 8b       	std	Y+18, r25	; 0x12
    3124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3126:	8b 89       	ldd	r24, Y+19	; 0x13
    3128:	9c 89       	ldd	r25, Y+20	; 0x14
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	9c 8b       	std	Y+20, r25	; 0x14
    312e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	69 f7       	brne	.-38     	; 0x3112 <HLCD_voidPattern+0xbc>
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <HLCD_voidPattern+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	98 8b       	std	Y+16, r25	; 0x10
    3154:	8f 87       	std	Y+15, r24	; 0x0f
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	98 89       	ldd	r25, Y+16	; 0x10
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <HLCD_voidPattern+0x104>
    315e:	98 8b       	std	Y+16, r25	; 0x10
    3160:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	for (int i = A_u8Start ; i < A_u8End ; i++)
    3162:	88 a1       	ldd	r24, Y+32	; 0x20
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9e 8f       	std	Y+30, r25	; 0x1e
    316a:	8d 8f       	std	Y+29, r24	; 0x1d
    316c:	89 c0       	rjmp	.+274    	; 0x3280 <HLCD_voidPattern+0x22a>
	{
		HLCD_voidGoTo(1,i);
    316e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	69 2f       	mov	r22, r25
    3174:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <HLCD_voidGoTo>
		HLCD_voidSendData(' ');
    3178:	80 e2       	ldi	r24, 0x20	; 32
    317a:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
		HLCD_voidGoTo(1,i+1);
    317e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3180:	98 2f       	mov	r25, r24
    3182:	9f 5f       	subi	r25, 0xFF	; 255
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	69 2f       	mov	r22, r25
    3188:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <HLCD_voidGoTo>
		HLCD_voidSendData(A_u8Char);
    318c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    318e:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	a6 e9       	ldi	r26, 0x96	; 150
    3198:	b3 e4       	ldi	r27, 0x43	; 67
    319a:	8b 87       	std	Y+11, r24	; 0x0b
    319c:	9c 87       	std	Y+12, r25	; 0x0c
    319e:	ad 87       	std	Y+13, r26	; 0x0d
    31a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8f 83       	std	Y+7, r24	; 0x07
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	a9 87       	std	Y+9, r26	; 0x09
    31c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <HLCD_voidPattern+0x18e>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <HLCD_voidPattern+0x20c>
	else if (__tmp > 65535)
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <HLCD_voidPattern+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <HLCD_voidPattern+0x1ee>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <HLCD_voidPattern+0x1dc>
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <HLCD_voidPattern+0x1d0>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <HLCD_voidPattern+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <HLCD_voidPattern+0x218>
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
void HLCD_voidPattern (u8 A_u8Char , u8 A_u8Start , u8 A_u8End)
{
	HLCD_voidGoTo(1,A_u8Start);
	HLCD_voidSendData(A_u8Char);
	_delay_ms(300);
	for (int i = A_u8Start ; i < A_u8End ; i++)
    3276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3278:	9e 8d       	ldd	r25, Y+30	; 0x1e
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	9e 8f       	std	Y+30, r25	; 0x1e
    327e:	8d 8f       	std	Y+29, r24	; 0x1d
    3280:	89 a1       	ldd	r24, Y+33	; 0x21
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3288:	9e 8d       	ldd	r25, Y+30	; 0x1e
    328a:	82 17       	cp	r24, r18
    328c:	93 07       	cpc	r25, r19
    328e:	0c f4       	brge	.+2      	; 0x3292 <HLCD_voidPattern+0x23c>
    3290:	6e cf       	rjmp	.-292    	; 0x316e <HLCD_voidPattern+0x118>
		HLCD_voidSendData(' ');
		HLCD_voidGoTo(1,i+1);
		HLCD_voidSendData(A_u8Char);
		_delay_ms(300);
	}
	HLCD_voidGoTo(1,A_u8End);
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	69 a1       	ldd	r22, Y+33	; 0x21
    3296:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <HLCD_voidGoTo>
	HLCD_voidSendData(' ');
    329a:	80 e2       	ldi	r24, 0x20	; 32
    329c:	0e 94 b6 13 	call	0x276c	; 0x276c <HLCD_voidSendData>
}
    32a0:	a1 96       	adiw	r28, 0x21	; 33
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <MSPI_voidInit>:
#include "..\Include\MCAL\SPI\SPI_private.h"
#include "..\Include\MCAL\SPI\SPI_Configurations.h"


void MSPI_voidInit (void)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
		SPCR = CONC_BIT(SPI_INTERRUPT_ENABLE,
    32ba:	ed e2       	ldi	r30, 0x2D	; 45
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 e1       	ldi	r24, 0x10	; 16
    32c0:	80 83       	st	Z, r24
						CLK_POLARIZATION,
						CLK_PHASE,
						0,
						0);
		//Select Clock Rate
		SPCR |= (CLK_RATE<<CLK_RATE_B1);
    32c2:	ad e2       	ldi	r26, 0x2D	; 45
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	ed e2       	ldi	r30, 0x2D	; 45
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	8c 93       	st	X, r24
		//Select Double Speed Mode
#if (DOUBLE_SPEED == ON)
		SET_BIT(SPSR , SPI2X);
#else
		CLR_BIT(SPSR , SPI2X);
    32ce:	ae e2       	ldi	r26, 0x2E	; 46
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ee e2       	ldi	r30, 0x2E	; 46
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	8e 7f       	andi	r24, 0xFE	; 254
    32da:	8c 93       	st	X, r24
#endif
		SET_BIT(SPCR , SPI_ENABLE);
    32dc:	ad e2       	ldi	r26, 0x2D	; 45
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	ed e2       	ldi	r30, 0x2D	; 45
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	80 64       	ori	r24, 0x40	; 64
    32e8:	8c 93       	st	X, r24
}
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <MSPI_u8SendAndReceive>:


u8 MSPI_u8SendAndReceive (u8 A_u8Data)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	89 83       	std	Y+1, r24	; 0x01
	SPDR = A_u8Data;
    32fc:	ef e2       	ldi	r30, 0x2F	; 47
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	80 83       	st	Z, r24
	while (GET_BIT(SPSR , SPIF) == 0);
    3304:	ee e2       	ldi	r30, 0x2E	; 46
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	88 23       	and	r24, r24
    330c:	dc f7       	brge	.-10     	; 0x3304 <MSPI_u8SendAndReceive+0x14>
	return SPDR;
    330e:	ef e2       	ldi	r30, 0x2F	; 47
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
}
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <MTIMER0_voidInit>:

void (*TIMER0_OVF_CallBack) (void) = NULL;
void (*TIMER0_CTC_CallBack) (void) = NULL;

void MTIMER0_voidInit (void)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	//Select TIMER0 Mode
	CLR_BIT(TCCR0 , WGM00);
    3324:	a3 e5       	ldi	r26, 0x53	; 83
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e3 e5       	ldi	r30, 0x53	; 83
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	87 7f       	andi	r24, 0xF7	; 247
    3330:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , WGM01);
    3332:	a3 e5       	ldi	r26, 0x53	; 83
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	e3 e5       	ldi	r30, 0x53	; 83
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	80 81       	ld	r24, Z
    333c:	8f 7b       	andi	r24, 0xBF	; 191
    333e:	8c 93       	st	X, r24
	//Select Compare Match Output Mode
	TCCR0 &= ~(TWO_BIT_MASK<<COM0_B0);
    3340:	a3 e5       	ldi	r26, 0x53	; 83
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e3 e5       	ldi	r30, 0x53	; 83
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	8f 7c       	andi	r24, 0xCF	; 207
    334c:	8c 93       	st	X, r24
	TCCR0 |= (OC0_MODE<<COM0_B0);
    334e:	a3 e5       	ldi	r26, 0x53	; 83
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	e3 e5       	ldi	r30, 0x53	; 83
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	8c 93       	st	X, r24
	//Enable TIMER0 Interrupts
	SET_BIT(TIMSK , TOIE0);
    335a:	a9 e5       	ldi	r26, 0x59	; 89
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	e9 e5       	ldi	r30, 0x59	; 89
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	81 60       	ori	r24, 0x01	; 1
    3366:	8c 93       	st	X, r24
	//Clear CLK Bits
	TCCR0 &= ~(THREE_BIT_MASK<<CS_B0);
    3368:	a3 e5       	ldi	r26, 0x53	; 83
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e3 e5       	ldi	r30, 0x53	; 83
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	88 7f       	andi	r24, 0xF8	; 248
    3374:	8c 93       	st	X, r24
	//Select CLK Source
	TCCR0 |= (CLK_CONFIG<<CS_B0);
    3376:	a3 e5       	ldi	r26, 0x53	; 83
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	e3 e5       	ldi	r30, 0x53	; 83
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	81 60       	ori	r24, 0x01	; 1
    3382:	8c 93       	st	X, r24
	TCCR0 |= (CLK_CONFIG<<CS_B0);
#else
	#error  Wrong TIMER0 Mode Configuration
#endif

}
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <MTIMER0_voidSetPreLoadValue>:

void MTIMER0_voidSetPreLoadValue (u8 A_u8PreLoadValue)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	0f 92       	push	r0
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreLoadValue;
    3396:	e2 e5       	ldi	r30, 0x52	; 82
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	80 83       	st	Z, r24
}
    339e:	0f 90       	pop	r0
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <MTIMER0_voidSetCallBackOVF>:
void MTIMER0_voidSetCallBackOVF (void (*Ptr_Function)(void))
{
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <MTIMER0_voidSetCallBackOVF+0x6>
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	9a 83       	std	Y+2, r25	; 0x02
    33b2:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	31 f0       	breq	.+12     	; 0x33c8 <MTIMER0_voidSetCallBackOVF+0x22>
	{
		TIMER0_OVF_CallBack = Ptr_Function;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	90 93 6b 00 	sts	0x006B, r25
    33c4:	80 93 6a 00 	sts	0x006A, r24
	}
}
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <MTIMER0_voidSetCallBackCTC>:
void MTIMER0_voidSetCallBackCTC (void (*Ptr_Function)(void))
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <MTIMER0_voidSetCallBackCTC+0x6>
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <MTIMER0_voidSetCallBackCTC+0x22>
	{
		TIMER0_CTC_CallBack = Ptr_Function;
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	90 93 6d 00 	sts	0x006D, r25
    33f0:	80 93 6c 00 	sts	0x006C, r24
	}
}
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	0f 92       	push	r0
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    340a:	ec e5       	ldi	r30, 0x5C	; 92
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	80 83       	st	Z, r24
}
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <MTIMER0_voidStopClock>:

void MTIMER0_voidStopClock (void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	//Clear CLK Bits
	TCCR0 &= ~(THREE_BIT_MASK<<CS_B0);
    3422:	a3 e5       	ldi	r26, 0x53	; 83
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e3 e5       	ldi	r30, 0x53	; 83
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	88 7f       	andi	r24, 0xF8	; 248
    342e:	8c 93       	st	X, r24
}
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <__vector_11>:

void __vector_11 (void)  __attribute__ ((signal));
void __vector_11 (void)
{
    3436:	1f 92       	push	r1
    3438:	0f 92       	push	r0
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	0f 92       	push	r0
    343e:	11 24       	eor	r1, r1
    3440:	2f 93       	push	r18
    3442:	3f 93       	push	r19
    3444:	4f 93       	push	r20
    3446:	5f 93       	push	r21
    3448:	6f 93       	push	r22
    344a:	7f 93       	push	r23
    344c:	8f 93       	push	r24
    344e:	9f 93       	push	r25
    3450:	af 93       	push	r26
    3452:	bf 93       	push	r27
    3454:	ef 93       	push	r30
    3456:	ff 93       	push	r31
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CallBack!= NULL)
    3460:	80 91 6a 00 	lds	r24, 0x006A
    3464:	90 91 6b 00 	lds	r25, 0x006B
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	29 f0       	breq	.+10     	; 0x3476 <__vector_11+0x40>
	{
		TIMER0_OVF_CallBack();
    346c:	e0 91 6a 00 	lds	r30, 0x006A
    3470:	f0 91 6b 00 	lds	r31, 0x006B
    3474:	09 95       	icall
	}
}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	bf 91       	pop	r27
    3480:	af 91       	pop	r26
    3482:	9f 91       	pop	r25
    3484:	8f 91       	pop	r24
    3486:	7f 91       	pop	r23
    3488:	6f 91       	pop	r22
    348a:	5f 91       	pop	r21
    348c:	4f 91       	pop	r20
    348e:	3f 91       	pop	r19
    3490:	2f 91       	pop	r18
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

0000349c <__vector_10>:

void __vector_10 (void)  __attribute__ ((signal));
void __vector_10 (void)
{
    349c:	1f 92       	push	r1
    349e:	0f 92       	push	r0
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	0f 92       	push	r0
    34a4:	11 24       	eor	r1, r1
    34a6:	2f 93       	push	r18
    34a8:	3f 93       	push	r19
    34aa:	4f 93       	push	r20
    34ac:	5f 93       	push	r21
    34ae:	6f 93       	push	r22
    34b0:	7f 93       	push	r23
    34b2:	8f 93       	push	r24
    34b4:	9f 93       	push	r25
    34b6:	af 93       	push	r26
    34b8:	bf 93       	push	r27
    34ba:	ef 93       	push	r30
    34bc:	ff 93       	push	r31
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CallBack!= NULL)
    34c6:	80 91 6c 00 	lds	r24, 0x006C
    34ca:	90 91 6d 00 	lds	r25, 0x006D
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	29 f0       	breq	.+10     	; 0x34dc <__vector_10+0x40>
	{
		TIMER0_CTC_CallBack();
    34d2:	e0 91 6c 00 	lds	r30, 0x006C
    34d6:	f0 91 6d 00 	lds	r31, 0x006D
    34da:	09 95       	icall
	}
}
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	ff 91       	pop	r31
    34e2:	ef 91       	pop	r30
    34e4:	bf 91       	pop	r27
    34e6:	af 91       	pop	r26
    34e8:	9f 91       	pop	r25
    34ea:	8f 91       	pop	r24
    34ec:	7f 91       	pop	r23
    34ee:	6f 91       	pop	r22
    34f0:	5f 91       	pop	r21
    34f2:	4f 91       	pop	r20
    34f4:	3f 91       	pop	r19
    34f6:	2f 91       	pop	r18
    34f8:	0f 90       	pop	r0
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	0f 90       	pop	r0
    34fe:	1f 90       	pop	r1
    3500:	18 95       	reti

00003502 <MTIMER_voidSetEdgeForICU>:
#include "../Include/MCAL/TIMER1/TIMER1_Interface.h"
#include "../Include/MCAL/TIMER1/TIMER1_private.h"
#include "../Include/MCAL/TIMER1/TIMER1_Configurations.h"
void (*TIMER1_OVF_CallBack) (void) = 0;
void MTIMER_voidSetEdgeForICU (u8 A_u8Edge)
{
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	0f 92       	push	r0
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8Edge == FALLINGEDGE)
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	88 23       	and	r24, r24
    3512:	41 f4       	brne	.+16     	; 0x3524 <MTIMER_voidSetEdgeForICU+0x22>
	{
		CLR_BIT(TCCR1B , ICES1);
    3514:	ae e4       	ldi	r26, 0x4E	; 78
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	ee e4       	ldi	r30, 0x4E	; 78
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	8f 7b       	andi	r24, 0xBF	; 191
    3520:	8c 93       	st	X, r24
    3522:	07 c0       	rjmp	.+14     	; 0x3532 <MTIMER_voidSetEdgeForICU+0x30>
	}
	else
	{
		SET_BIT(TCCR1B , ICES1);
    3524:	ae e4       	ldi	r26, 0x4E	; 78
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	ee e4       	ldi	r30, 0x4E	; 78
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	80 64       	ori	r24, 0x40	; 64
    3530:	8c 93       	st	X, r24

	}
}
    3532:	0f 90       	pop	r0
    3534:	cf 91       	pop	r28
    3536:	df 91       	pop	r29
    3538:	08 95       	ret

0000353a <MTIMER_u16GetICR1Value>:

u16 MTIMER_u16GetICR1Value (void)
{
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	00 d0       	rcall	.+0      	; 0x3540 <MTIMER_u16GetICR1Value+0x6>
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16ICR1 = ICR1;
    3544:	e6 e4       	ldi	r30, 0x46	; 70
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT (TIFR , ICF1);
    3550:	a8 e5       	ldi	r26, 0x58	; 88
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e8 e5       	ldi	r30, 0x58	; 88
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	80 62       	ori	r24, 0x20	; 32
    355c:	8c 93       	st	X, r24
	return local_u16ICR1;
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <MTIMER1_voidInit>:
void MTIMER1_voidInit (void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	//Clear Compare OutPut Mode Bits
	TCCR1A &= ~(TWO_BIT_MASK<<COM1A_B1);
    3574:	af e4       	ldi	r26, 0x4F	; 79
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	ef e4       	ldi	r30, 0x4F	; 79
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	8f 73       	andi	r24, 0x3F	; 63
    3580:	8c 93       	st	X, r24
	TCCR1A &= ~(TWO_BIT_MASK<<COM1B_B1);
    3582:	af e4       	ldi	r26, 0x4F	; 79
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	ef e4       	ldi	r30, 0x4F	; 79
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	8f 7c       	andi	r24, 0xCF	; 207
    358e:	8c 93       	st	X, r24
	//Select Compare OutPut Mode
	TCCR1A |= (COM1A_MODE<<COM1A_B1);
    3590:	af e4       	ldi	r26, 0x4F	; 79
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	ef e4       	ldi	r30, 0x4F	; 79
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	80 68       	ori	r24, 0x80	; 128
    359c:	8c 93       	st	X, r24
	TCCR1A |= (COM1B_MODE<<COM1B_B1);
    359e:	af e4       	ldi	r26, 0x4F	; 79
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	ef e4       	ldi	r30, 0x4F	; 79
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	80 61       	ori	r24, 0x10	; 16
    35aa:	8c 93       	st	X, r24
	//Clear Wave Generation Mode First Two Bits
	TCCR1A &= ~(TWO_BIT_MASK<<WGM_B1);
    35ac:	af e4       	ldi	r26, 0x4F	; 79
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	ef e4       	ldi	r30, 0x4F	; 79
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	8c 7f       	andi	r24, 0xFC	; 252
    35b8:	8c 93       	st	X, r24
	//Set Wave Generation Mode First Two Bits
	TCCR1A |= ((TIMER1_MODE&TWO_BIT_MASK)<<WGM_B1);
    35ba:	af e4       	ldi	r26, 0x4F	; 79
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	ef e4       	ldi	r30, 0x4F	; 79
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	81 60       	ori	r24, 0x01	; 1
    35c6:	8c 93       	st	X, r24
	//Clear Wave Generation Mode Last Two Bits
	TCCR1B &= ~(TWO_BIT_MASK<<WGM_B3);
    35c8:	ae e4       	ldi	r26, 0x4E	; 78
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	ee e4       	ldi	r30, 0x4E	; 78
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	87 7e       	andi	r24, 0xE7	; 231
    35d4:	8c 93       	st	X, r24
	//Set Wave Generation Mode Last Two Bits
	TCCR1B |=  ((TIMER1_MODE>>2)<<WGM_B3);
    35d6:	ae e4       	ldi	r26, 0x4E	; 78
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	ee e4       	ldi	r30, 0x4E	; 78
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	88 60       	ori	r24, 0x08	; 8
    35e2:	8c 93       	st	X, r24
	//Set The Initial Values of OCR1A & OCR1B
	OCR1A = OC1A_VALUE;
    35e4:	ea e4       	ldi	r30, 0x4A	; 74
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	11 82       	std	Z+1, r1	; 0x01
    35ea:	10 82       	st	Z, r1
	OCR1B = OC1B_VALUE;
    35ec:	e8 e4       	ldi	r30, 0x48	; 72
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	11 82       	std	Z+1, r1	; 0x01
    35f2:	10 82       	st	Z, r1
	//Set The Initial Value of ICR1
	ICR1 = ICR1_VALUE;
    35f4:	e6 e4       	ldi	r30, 0x46	; 70
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	11 82       	std	Z+1, r1	; 0x01
    35fa:	10 82       	st	Z, r1
	//Enable Or Disable The Interrupt Flags
#if (INPUT_CAPUTRE_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , TICIE1);
#else
	CLR_BIT(TIMSK , TICIE1);
    35fc:	a9 e5       	ldi	r26, 0x59	; 89
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e9 e5       	ldi	r30, 0x59	; 89
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	8f 7d       	andi	r24, 0xDF	; 223
    3608:	8c 93       	st	X, r24
#endif
#if (OUTPUT_COMPARE_A_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , OCIE1A);
#else
	CLR_BIT(TIMSK , OCIE1A);
    360a:	a9 e5       	ldi	r26, 0x59	; 89
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e9 e5       	ldi	r30, 0x59	; 89
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	8f 7e       	andi	r24, 0xEF	; 239
    3616:	8c 93       	st	X, r24
#endif
#if (OUTPUT_COMPARE_B_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , OCIE1B);
#else
	CLR_BIT(TIMSK , OCIE1B);
    3618:	a9 e5       	ldi	r26, 0x59	; 89
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	e9 e5       	ldi	r30, 0x59	; 89
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	87 7f       	andi	r24, 0xF7	; 247
    3624:	8c 93       	st	X, r24
#endif
#if (OVER_FLOW_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , TOIE1);
    3626:	a9 e5       	ldi	r26, 0x59	; 89
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e9 e5       	ldi	r30, 0x59	; 89
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	84 60       	ori	r24, 0x04	; 4
    3632:	8c 93       	st	X, r24
#else
	CLR_BIT(TIMSK , TOIE1);
#endif
	//Set The Clock OF TIMER1
	TCCR1B &= ~(THREE_BIT_MASK<<CS1_B1);
    3634:	ae e4       	ldi	r26, 0x4E	; 78
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	ee e4       	ldi	r30, 0x4E	; 78
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	88 7f       	andi	r24, 0xF8	; 248
    3640:	8c 93       	st	X, r24
	TCCR1B |= (CLK_CONFIG<<CS1_B1);
    3642:	ae e4       	ldi	r26, 0x4E	; 78
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	ee e4       	ldi	r30, 0x4E	; 78
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	81 60       	ori	r24, 0x01	; 1
    364e:	8c 93       	st	X, r24
}
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <MTIMERS_voidTimer1Stop>:

void MTIMERS_voidTimer1Stop(void)
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,2);
    365e:	ae e4       	ldi	r26, 0x4E	; 78
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	ee e4       	ldi	r30, 0x4E	; 78
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8b 7f       	andi	r24, 0xFB	; 251
    366a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    366c:	ae e4       	ldi	r26, 0x4E	; 78
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	ee e4       	ldi	r30, 0x4E	; 78
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	80 81       	ld	r24, Z
    3676:	8d 7f       	andi	r24, 0xFD	; 253
    3678:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    367a:	ae e4       	ldi	r26, 0x4E	; 78
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	ee e4       	ldi	r30, 0x4E	; 78
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	8e 7f       	andi	r24, 0xFE	; 254
    3686:	8c 93       	st	X, r24
}
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <MTIMER1_voidSetICR1>:


void MTIMER1_voidSetICR1 (u16 A_u16ICR1Value)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <MTIMER1_voidSetICR1+0x6>
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = A_u16ICR1Value;
    369c:	e6 e4       	ldi	r30, 0x46	; 70
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
}
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <MTIMER_voidSetOCR1A>:

void MTIMER_voidSetOCR1A (u16 A_u16OCR1AValue)
{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	00 d0       	rcall	.+0      	; 0x36b8 <MTIMER_voidSetOCR1A+0x6>
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16OCR1AValue;
    36c0:	ea e4       	ldi	r30, 0x4A	; 74
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	80 83       	st	Z, r24
}
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <MTIMER1_voidSetCallBackOVF>:

void MTIMER1_voidSetCallBackOVF (void (*Ptr_Function)(void))
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	00 d0       	rcall	.+0      	; 0x36dc <MTIMER1_voidSetCallBackOVF+0x6>
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	9a 83       	std	Y+2, r25	; 0x02
    36e2:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != 0)
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	31 f0       	breq	.+12     	; 0x36f8 <MTIMER1_voidSetCallBackOVF+0x22>
	{
		TIMER1_OVF_CallBack = Ptr_Function;
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	90 93 6f 00 	sts	0x006F, r25
    36f4:	80 93 6e 00 	sts	0x006E, r24
	}
}
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <__vector_9>:

void __vector_9 (void)  __attribute__ ((signal));
void __vector_9 (void)
{
    3702:	1f 92       	push	r1
    3704:	0f 92       	push	r0
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	0f 92       	push	r0
    370a:	11 24       	eor	r1, r1
    370c:	2f 93       	push	r18
    370e:	3f 93       	push	r19
    3710:	4f 93       	push	r20
    3712:	5f 93       	push	r21
    3714:	6f 93       	push	r22
    3716:	7f 93       	push	r23
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	af 93       	push	r26
    371e:	bf 93       	push	r27
    3720:	ef 93       	push	r30
    3722:	ff 93       	push	r31
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_OVF_CallBack!= 0)
    372c:	80 91 6e 00 	lds	r24, 0x006E
    3730:	90 91 6f 00 	lds	r25, 0x006F
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	29 f0       	breq	.+10     	; 0x3742 <__vector_9+0x40>
	{
		TIMER1_OVF_CallBack();
    3738:	e0 91 6e 00 	lds	r30, 0x006E
    373c:	f0 91 6f 00 	lds	r31, 0x006F
    3740:	09 95       	icall
	}
}
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	ff 91       	pop	r31
    3748:	ef 91       	pop	r30
    374a:	bf 91       	pop	r27
    374c:	af 91       	pop	r26
    374e:	9f 91       	pop	r25
    3750:	8f 91       	pop	r24
    3752:	7f 91       	pop	r23
    3754:	6f 91       	pop	r22
    3756:	5f 91       	pop	r21
    3758:	4f 91       	pop	r20
    375a:	3f 91       	pop	r19
    375c:	2f 91       	pop	r18
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	0f 90       	pop	r0
    3764:	1f 90       	pop	r1
    3766:	18 95       	reti

00003768 <TWI_voidMasterInit>:
#include "../Include/MCAL/TWI/TWI_private.h"
#include "../Include/MCAL/TWI/TWI_configuration.h"


void TWI_voidMasterInit(u8 copy_u8Address)
{
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	0f 92       	push	r0
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	89 83       	std	Y+1, r24	; 0x01
	//set acknowledge bit
	SET_BIT(TWCR,TWCR_TWEA);
    3774:	a6 e5       	ldi	r26, 0x56	; 86
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	e6 e5       	ldi	r30, 0x56	; 86
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	80 64       	ori	r24, 0x40	; 64
    3780:	8c 93       	st	X, r24
	//set frequency
	TWBR=12;
    3782:	e0 e2       	ldi	r30, 0x20	; 32
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	8c e0       	ldi	r24, 0x0C	; 12
    3788:	80 83       	st	Z, r24
	//set prescaler
	CLR_BIT(TWSR,TWSR_TWPS0);
    378a:	a1 e2       	ldi	r26, 0x21	; 33
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e1 e2       	ldi	r30, 0x21	; 33
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	8e 7f       	andi	r24, 0xFE	; 254
    3796:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    3798:	a1 e2       	ldi	r26, 0x21	; 33
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e1 e2       	ldi	r30, 0x21	; 33
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	8d 7f       	andi	r24, 0xFD	; 253
    37a4:	8c 93       	st	X, r24

	if (copy_u8Address==0)
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	88 23       	and	r24, r24
    37aa:	29 f0       	breq	.+10     	; 0x37b6 <TWI_voidMasterInit+0x4e>
	{
		//do nothing
	}
	else
	{
		TWAR=(copy_u8Address<<1);
    37ac:	e2 e2       	ldi	r30, 0x22	; 34
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	88 0f       	add	r24, r24
    37b4:	80 83       	st	Z, r24
	}

	//Enable TWI
	SET_BIT(TWCR,TWCR_TWEN);
    37b6:	a6 e5       	ldi	r26, 0x56	; 86
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e6 e5       	ldi	r30, 0x56	; 86
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	84 60       	ori	r24, 0x04	; 4
    37c2:	8c 93       	st	X, r24

}
    37c4:	0f 90       	pop	r0
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 A_u8Address)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	0f 92       	push	r0
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	89 83       	std	Y+1, r24	; 0x01
	//Set Address
	TWAR=(A_u8Address<<1);
    37d8:	e2 e2       	ldi	r30, 0x22	; 34
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	88 0f       	add	r24, r24
    37e0:	80 83       	st	Z, r24
	//set acknowledge bit
	SET_BIT(TWCR,TWCR_TWEA);
    37e2:	a6 e5       	ldi	r26, 0x56	; 86
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e6 e5       	ldi	r30, 0x56	; 86
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	80 64       	ori	r24, 0x40	; 64
    37ee:	8c 93       	st	X, r24
	//Enable TWI
	SET_BIT(TWCR,TWCR_TWEN);
    37f0:	a6 e5       	ldi	r26, 0x56	; 86
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	e6 e5       	ldi	r30, 0x56	; 86
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	84 60       	ori	r24, 0x04	; 4
    37fc:	8c 93       	st	X, r24
}
    37fe:	0f 90       	pop	r0
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <TWI_u8SendStartCondition>:


TWI_ErrorStatus TWI_u8SendStartCondition(void)
{
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	0f 92       	push	r0
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	89 83       	std	Y+1, r24	; 0x01
	//send start condition bit
	SET_BIT(TWCR,TWCR_TWSTA);
    3814:	a6 e5       	ldi	r26, 0x56	; 86
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e6 e5       	ldi	r30, 0x56	; 86
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	80 62       	ori	r24, 0x20	; 32
    3820:	8c 93       	st	X, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    3822:	a6 e5       	ldi	r26, 0x56	; 86
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	e6 e5       	ldi	r30, 0x56	; 86
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	80 81       	ld	r24, Z
    382c:	80 68       	ori	r24, 0x80	; 128
    382e:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    3830:	e6 e5       	ldi	r30, 0x56	; 86
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	88 23       	and	r24, r24
    3838:	dc f7       	brge	.-10     	; 0x3830 <TWI_u8SendStartCondition+0x2a>
	if ((TWSR & STATUS_BIT_MASK)!=START_ACK)
    383a:	e1 e2       	ldi	r30, 0x21	; 33
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	88 2f       	mov	r24, r24
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	88 7f       	andi	r24, 0xF8	; 248
    3846:	90 70       	andi	r25, 0x00	; 0
    3848:	88 30       	cpi	r24, 0x08	; 8
    384a:	91 05       	cpc	r25, r1
    384c:	11 f0       	breq	.+4      	; 0x3852 <TWI_u8SendStartCondition+0x4c>
	{
		local_ErrorStatus=TWI_SC_ERROR;
    384e:	83 e0       	ldi	r24, 0x03	; 3
    3850:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return local_ErrorStatus;
    3852:	89 81       	ldd	r24, Y+1	; 0x01
}
    3854:	0f 90       	pop	r0
    3856:	cf 91       	pop	r28
    3858:	df 91       	pop	r29
    385a:	08 95       	ret

0000385c <TWI_u8SendReStartCondition>:

TWI_ErrorStatus TWI_u8SendReStartCondition(void)
{
    385c:	df 93       	push	r29
    385e:	cf 93       	push	r28
    3860:	0f 92       	push	r0
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	89 83       	std	Y+1, r24	; 0x01
	//send start condition bit
	SET_BIT(TWCR,TWCR_TWSTA);
    386a:	a6 e5       	ldi	r26, 0x56	; 86
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	e6 e5       	ldi	r30, 0x56	; 86
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	80 81       	ld	r24, Z
    3874:	80 62       	ori	r24, 0x20	; 32
    3876:	8c 93       	st	X, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    3878:	a6 e5       	ldi	r26, 0x56	; 86
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e6 e5       	ldi	r30, 0x56	; 86
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	80 68       	ori	r24, 0x80	; 128
    3884:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    3886:	e6 e5       	ldi	r30, 0x56	; 86
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	88 23       	and	r24, r24
    388e:	dc f7       	brge	.-10     	; 0x3886 <TWI_u8SendReStartCondition+0x2a>
	if ((TWSR & STATUS_BIT_MASK)!=REP_START_ACK)
    3890:	e1 e2       	ldi	r30, 0x21	; 33
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	88 7f       	andi	r24, 0xF8	; 248
    389c:	90 70       	andi	r25, 0x00	; 0
    389e:	80 31       	cpi	r24, 0x10	; 16
    38a0:	91 05       	cpc	r25, r1
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <TWI_u8SendReStartCondition+0x4c>
	{
		local_ErrorStatus=TWI_RSC_ERROR;
    38a4:	84 e0       	ldi	r24, 0x04	; 4
    38a6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return local_ErrorStatus;
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    38aa:	0f 90       	pop	r0
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	08 95       	ret

000038b2 <TWI_u8SendSlaveAddressWithWrite>:

TWI_ErrorStatus TWI_u8SendSlaveAddressWithWrite(u8 A_u8SlaveAddress)
{
    38b2:	df 93       	push	r29
    38b4:	cf 93       	push	r28
    38b6:	00 d0       	rcall	.+0      	; 0x38b8 <TWI_u8SendSlaveAddressWithWrite+0x6>
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	89 83       	std	Y+1, r24	; 0x01
	//send slave address
	TWDR=A_u8SlaveAddress<<1;
    38c2:	e3 e2       	ldi	r30, 0x23	; 35
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	8a 81       	ldd	r24, Y+2	; 0x02
    38c8:	88 0f       	add	r24, r24
    38ca:	80 83       	st	Z, r24
	//set write operation
	CLR_BIT(TWDR,TWDR_TWD0);
    38cc:	a3 e2       	ldi	r26, 0x23	; 35
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e3 e2       	ldi	r30, 0x23	; 35
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	8e 7f       	andi	r24, 0xFE	; 254
    38d8:	8c 93       	st	X, r24
	//clear start condition bit
	CLR_BIT(TWCR,TWCR_TWSTA);
    38da:	a6 e5       	ldi	r26, 0x56	; 86
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e6 e5       	ldi	r30, 0x56	; 86
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	8f 7d       	andi	r24, 0xDF	; 223
    38e6:	8c 93       	st	X, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    38e8:	a6 e5       	ldi	r26, 0x56	; 86
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	e6 e5       	ldi	r30, 0x56	; 86
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	80 68       	ori	r24, 0x80	; 128
    38f4:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    38f6:	e6 e5       	ldi	r30, 0x56	; 86
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	88 23       	and	r24, r24
    38fe:	dc f7       	brge	.-10     	; 0x38f6 <TWI_u8SendSlaveAddressWithWrite+0x44>
	if ((TWSR & STATUS_BIT_MASK)!=SLAVE_ADD_AND_WR_ACK )
    3900:	e1 e2       	ldi	r30, 0x21	; 33
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	88 2f       	mov	r24, r24
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	88 7f       	andi	r24, 0xF8	; 248
    390c:	90 70       	andi	r25, 0x00	; 0
    390e:	88 31       	cpi	r24, 0x18	; 24
    3910:	91 05       	cpc	r25, r1
    3912:	11 f0       	breq	.+4      	; 0x3918 <TWI_u8SendSlaveAddressWithWrite+0x66>
	{
		local_ErrorStatus=TWI_SLA_W_ERROR;
    3914:	85 e0       	ldi	r24, 0x05	; 5
    3916:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_ErrorStatus;
    3918:	89 81       	ldd	r24, Y+1	; 0x01
}
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	08 95       	ret

00003924 <TWI_u8SendSlaveAddressWithRead>:

TWI_ErrorStatus TWI_u8SendSlaveAddressWithRead(u8 A_u8SlaveAddress)
{
    3924:	df 93       	push	r29
    3926:	cf 93       	push	r28
    3928:	00 d0       	rcall	.+0      	; 0x392a <TWI_u8SendSlaveAddressWithRead+0x6>
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	89 83       	std	Y+1, r24	; 0x01
	//send slave address
	TWDR=A_u8SlaveAddress<<1;
    3934:	e3 e2       	ldi	r30, 0x23	; 35
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	88 0f       	add	r24, r24
    393c:	80 83       	st	Z, r24
	//set read operation
	SET_BIT(TWDR,TWDR_TWD0);
    393e:	a3 e2       	ldi	r26, 0x23	; 35
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e3 e2       	ldi	r30, 0x23	; 35
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	81 60       	ori	r24, 0x01	; 1
    394a:	8c 93       	st	X, r24
	//clear start condition bit
	CLR_BIT(TWCR,TWCR_TWSTA);
    394c:	a6 e5       	ldi	r26, 0x56	; 86
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e6 e5       	ldi	r30, 0x56	; 86
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	8f 7d       	andi	r24, 0xDF	; 223
    3958:	8c 93       	st	X, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    395a:	a6 e5       	ldi	r26, 0x56	; 86
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e6 e5       	ldi	r30, 0x56	; 86
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	80 68       	ori	r24, 0x80	; 128
    3966:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    3968:	e6 e5       	ldi	r30, 0x56	; 86
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	88 23       	and	r24, r24
    3970:	dc f7       	brge	.-10     	; 0x3968 <TWI_u8SendSlaveAddressWithRead+0x44>
	if ((TWSR & STATUS_BIT_MASK)!=SLAVE_ADD_AND_RD_ACK )
    3972:	e1 e2       	ldi	r30, 0x21	; 33
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	88 2f       	mov	r24, r24
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	88 7f       	andi	r24, 0xF8	; 248
    397e:	90 70       	andi	r25, 0x00	; 0
    3980:	80 34       	cpi	r24, 0x40	; 64
    3982:	91 05       	cpc	r25, r1
    3984:	11 f0       	breq	.+4      	; 0x398a <TWI_u8SendSlaveAddressWithRead+0x66>
	{
		local_ErrorStatus=TWI_SLA_R_ERROR;
    3986:	86 e0       	ldi	r24, 0x06	; 6
    3988:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_ErrorStatus;
    398a:	89 81       	ldd	r24, Y+1	; 0x01
}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <TWI_ErrorStatusMasterWriteDataByte>:

TWI_ErrorStatus TWI_ErrorStatusMasterWriteDataByte(u8 Copy_u8DataByte)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	00 d0       	rcall	.+0      	; 0x399c <TWI_ErrorStatusMasterWriteDataByte+0x6>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Copy_u8DataByte;
    39a6:	e3 e2       	ldi	r30, 0x23	; 35
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	80 83       	st	Z, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    39ae:	a6 e5       	ldi	r26, 0x56	; 86
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	e6 e5       	ldi	r30, 0x56	; 86
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	80 68       	ori	r24, 0x80	; 128
    39ba:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    39bc:	e6 e5       	ldi	r30, 0x56	; 86
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	88 23       	and	r24, r24
    39c4:	dc f7       	brge	.-10     	; 0x39bc <TWI_ErrorStatusMasterWriteDataByte+0x26>
	if ((TWSR & STATUS_BIT_MASK)!=MSTR_WR_BYTE_ACK )
    39c6:	e1 e2       	ldi	r30, 0x21	; 33
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	88 2f       	mov	r24, r24
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	88 7f       	andi	r24, 0xF8	; 248
    39d2:	90 70       	andi	r25, 0x00	; 0
    39d4:	88 32       	cpi	r24, 0x28	; 40
    39d6:	91 05       	cpc	r25, r1
    39d8:	11 f0       	breq	.+4      	; 0x39de <TWI_ErrorStatusMasterWriteDataByte+0x48>
	{
		local_ErrorStatus=TWI_MT_DATA_ERROR;;
    39da:	87 e0       	ldi	r24, 0x07	; 7
    39dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_ErrorStatus;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	08 95       	ret

000039ea <TWI_ErrorStatusMasterReadDataByte>:

TWI_ErrorStatus TWI_ErrorStatusMasterReadDataByte(u8 * Copy_pu8ReceivedByte)
{
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	00 d0       	rcall	.+0      	; 0x39f0 <TWI_ErrorStatusMasterReadDataByte+0x6>
    39f0:	0f 92       	push	r0
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	9b 83       	std	Y+3, r25	; 0x03
    39f8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus local_ErrorStatus=TWI_OK;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	89 83       	std	Y+1, r24	; 0x01
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    39fe:	a6 e5       	ldi	r26, 0x56	; 86
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e6 e5       	ldi	r30, 0x56	; 86
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	80 68       	ori	r24, 0x80	; 128
    3a0a:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWCR_TWINT)==0);
    3a0c:	e6 e5       	ldi	r30, 0x56	; 86
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	88 23       	and	r24, r24
    3a14:	dc f7       	brge	.-10     	; 0x3a0c <TWI_ErrorStatusMasterReadDataByte+0x22>

	if ((TWSR & STATUS_BIT_MASK)!=MSTR_RD_BYTE_WITH_ACK)
    3a16:	e1 e2       	ldi	r30, 0x21	; 33
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	88 7f       	andi	r24, 0xF8	; 248
    3a22:	90 70       	andi	r25, 0x00	; 0
    3a24:	80 35       	cpi	r24, 0x50	; 80
    3a26:	91 05       	cpc	r25, r1
    3a28:	19 f0       	breq	.+6      	; 0x3a30 <TWI_ErrorStatusMasterReadDataByte+0x46>
	{
		local_ErrorStatus=TWI_MR_DATA_ERROR;;
    3a2a:	88 e0       	ldi	r24, 0x08	; 8
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	06 c0       	rjmp	.+12     	; 0x3a3c <TWI_ErrorStatusMasterReadDataByte+0x52>
	}
	else
	{
		*Copy_pu8ReceivedByte=TWDR;
    3a30:	e3 e2       	ldi	r30, 0x23	; 35
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	ea 81       	ldd	r30, Y+2	; 0x02
    3a38:	fb 81       	ldd	r31, Y+3	; 0x03
    3a3a:	80 83       	st	Z, r24
	}
	return local_ErrorStatus;
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <TWI_voidSendStopCondition>:

/*TWI_ErrorStatus local_ErrorStatus=TWI_OK;
	return local_ErrorStatus;*/
void TWI_voidSendStopCondition(void)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
	//send stop condition bit
	SET_BIT(TWCR,TWCR_TWSTO);
    3a52:	a6 e5       	ldi	r26, 0x56	; 86
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	e6 e5       	ldi	r30, 0x56	; 86
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	80 61       	ori	r24, 0x10	; 16
    3a5e:	8c 93       	st	X, r24
	//CLR INTERRUPT FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    3a60:	a6 e5       	ldi	r26, 0x56	; 86
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	e6 e5       	ldi	r30, 0x56	; 86
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 81       	ld	r24, Z
    3a6a:	80 68       	ori	r24, 0x80	; 128
    3a6c:	8c 93       	st	X, r24

}
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <main>:




void main (void)
{
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	cd 54       	subi	r28, 0x4D	; 77
    3a7e:	d0 40       	sbci	r29, 0x00	; 0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
	// local variable to return data in
	u16 digital[5] = { 0, 0, 0, 0, 0 };
    3a8a:	8a e0       	ldi	r24, 0x0A	; 10
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	fa 96       	adiw	r30, 0x3a	; 58
    3a90:	df 01       	movw	r26, r30
    3a92:	28 2f       	mov	r18, r24
    3a94:	1d 92       	st	X+, r1
    3a96:	2a 95       	dec	r18
    3a98:	e9 f7       	brne	.-6      	; 0x3a94 <main+0x20>
	u16 analog[5] = { 0, 0, 0, 0, 0 };
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	8c 5b       	subi	r24, 0xBC	; 188
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	2a e0       	ldi	r18, 0x0A	; 10
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	df 01       	movw	r26, r30
    3aa6:	82 2f       	mov	r24, r18
    3aa8:	1d 92       	st	X+, r1
    3aaa:	8a 95       	dec	r24
    3aac:	e9 f7       	brne	.-6      	; 0x3aa8 <main+0x34>

	u8 local_u8Data = 0;
    3aae:	19 ae       	std	Y+57, r1	; 0x39

	MDIO_voidInit();
    3ab0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <MDIO_voidInit>
	MGI_voidEnable();
    3ab4:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <MGI_voidEnable>
	HLCD_voidInit();
    3ab8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <HLCD_voidInit>
	MADC_voidInit();
    3abc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <MADC_voidInit>
	TWI_voidMasterInit(0);
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	0e 94 b4 1b 	call	0x3768	; 0x3768 <TWI_voidMasterInit>



	while (1)
	{
		digital[0] = MADC_u16GetDigitalValue(ADC0);
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <MADC_u16GetDigitalValue>
    3acc:	9b af       	std	Y+59, r25	; 0x3b
    3ace:	8a af       	std	Y+58, r24	; 0x3a
		analog[0] = (u16) ((digital[0] * 5000UL) / 1024);
    3ad0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ad2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ad4:	cc 01       	movw	r24, r24
    3ad6:	a0 e0       	ldi	r26, 0x00	; 0
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	28 e8       	ldi	r18, 0x88	; 136
    3adc:	33 e1       	ldi	r19, 0x13	; 19
    3ade:	40 e0       	ldi	r20, 0x00	; 0
    3ae0:	50 e0       	ldi	r21, 0x00	; 0
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	0e 94 77 20 	call	0x40ee	; 0x40ee <__mulsi3>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	07 2e       	mov	r0, r23
    3af0:	7a e0       	ldi	r23, 0x0A	; 10
    3af2:	b6 95       	lsr	r27
    3af4:	a7 95       	ror	r26
    3af6:	97 95       	ror	r25
    3af8:	87 95       	ror	r24
    3afa:	7a 95       	dec	r23
    3afc:	d1 f7       	brne	.-12     	; 0x3af2 <main+0x7e>
    3afe:	70 2d       	mov	r23, r0
    3b00:	fe 01       	movw	r30, r28
    3b02:	ec 5b       	subi	r30, 0xBC	; 188
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	a8 ec       	ldi	r26, 0xC8	; 200
    3b10:	b2 e4       	ldi	r27, 0x42	; 66
    3b12:	8d ab       	std	Y+53, r24	; 0x35
    3b14:	9e ab       	std	Y+54, r25	; 0x36
    3b16:	af ab       	std	Y+55, r26	; 0x37
    3b18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1a:	6d a9       	ldd	r22, Y+53	; 0x35
    3b1c:	7e a9       	ldd	r23, Y+54	; 0x36
    3b1e:	8f a9       	ldd	r24, Y+55	; 0x37
    3b20:	98 ad       	ldd	r25, Y+56	; 0x38
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	4a ef       	ldi	r20, 0xFA	; 250
    3b28:	54 e4       	ldi	r21, 0x44	; 68
    3b2a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	89 ab       	std	Y+49, r24	; 0x31
    3b34:	9a ab       	std	Y+50, r25	; 0x32
    3b36:	ab ab       	std	Y+51, r26	; 0x33
    3b38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b3a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b3c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b3e:	8b a9       	ldd	r24, Y+51	; 0x33
    3b40:	9c a9       	ldd	r25, Y+52	; 0x34
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e8       	ldi	r20, 0x80	; 128
    3b48:	5f e3       	ldi	r21, 0x3F	; 63
    3b4a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    3b4e:	88 23       	and	r24, r24
    3b50:	2c f4       	brge	.+10     	; 0x3b5c <main+0xe8>
		__ticks = 1;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	98 ab       	std	Y+48, r25	; 0x30
    3b58:	8f a7       	std	Y+47, r24	; 0x2f
    3b5a:	3f c0       	rjmp	.+126    	; 0x3bda <main+0x166>
	else if (__tmp > 65535)
    3b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    3b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    3b60:	8b a9       	ldd	r24, Y+51	; 0x33
    3b62:	9c a9       	ldd	r25, Y+52	; 0x34
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	3f ef       	ldi	r19, 0xFF	; 255
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	57 e4       	ldi	r21, 0x47	; 71
    3b6c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    3b70:	18 16       	cp	r1, r24
    3b72:	4c f5       	brge	.+82     	; 0x3bc6 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b74:	6d a9       	ldd	r22, Y+53	; 0x35
    3b76:	7e a9       	ldd	r23, Y+54	; 0x36
    3b78:	8f a9       	ldd	r24, Y+55	; 0x37
    3b7a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e2       	ldi	r20, 0x20	; 32
    3b82:	51 e4       	ldi	r21, 0x41	; 65
    3b84:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	cd 01       	movw	r24, r26
    3b90:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	98 ab       	std	Y+48, r25	; 0x30
    3b9a:	8f a7       	std	Y+47, r24	; 0x2f
    3b9c:	0f c0       	rjmp	.+30     	; 0x3bbc <main+0x148>
    3b9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9e a7       	std	Y+46, r25	; 0x2e
    3ba4:	8d a7       	std	Y+45, r24	; 0x2d
    3ba6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ba8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <main+0x136>
    3bae:	9e a7       	std	Y+46, r25	; 0x2e
    3bb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	98 ab       	std	Y+48, r25	; 0x30
    3bba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	69 f7       	brne	.-38     	; 0x3b9e <main+0x12a>
    3bc4:	14 c0       	rjmp	.+40     	; 0x3bee <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    3bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    3bca:	8b a9       	ldd	r24, Y+51	; 0x33
    3bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    3bce:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	98 ab       	std	Y+48, r25	; 0x30
    3bd8:	8f a7       	std	Y+47, r24	; 0x2f
    3bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    3bde:	9c a7       	std	Y+44, r25	; 0x2c
    3be0:	8b a7       	std	Y+43, r24	; 0x2b
    3be2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3be4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <main+0x172>
    3bea:	9c a7       	std	Y+44, r25	; 0x2c
    3bec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		digital[1] = MADC_u16GetDigitalValue(ADC1);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <MADC_u16GetDigitalValue>
    3bf4:	9d af       	std	Y+61, r25	; 0x3d
    3bf6:	8c af       	std	Y+60, r24	; 0x3c
		analog[1] = (u16) ((digital[1] * 5000UL) / 1024);
    3bf8:	8c ad       	ldd	r24, Y+60	; 0x3c
    3bfa:	9d ad       	ldd	r25, Y+61	; 0x3d
    3bfc:	cc 01       	movw	r24, r24
    3bfe:	a0 e0       	ldi	r26, 0x00	; 0
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	28 e8       	ldi	r18, 0x88	; 136
    3c04:	33 e1       	ldi	r19, 0x13	; 19
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 77 20 	call	0x40ee	; 0x40ee <__mulsi3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	07 2e       	mov	r0, r23
    3c18:	7a e0       	ldi	r23, 0x0A	; 10
    3c1a:	b6 95       	lsr	r27
    3c1c:	a7 95       	ror	r26
    3c1e:	97 95       	ror	r25
    3c20:	87 95       	ror	r24
    3c22:	7a 95       	dec	r23
    3c24:	d1 f7       	brne	.-12     	; 0x3c1a <main+0x1a6>
    3c26:	70 2d       	mov	r23, r0
    3c28:	fe 01       	movw	r30, r28
    3c2a:	ec 5b       	subi	r30, 0xBC	; 188
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	93 83       	std	Z+3, r25	; 0x03
    3c30:	82 83       	std	Z+2, r24	; 0x02
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	a8 ec       	ldi	r26, 0xC8	; 200
    3c38:	b2 e4       	ldi	r27, 0x42	; 66
    3c3a:	8f a3       	std	Y+39, r24	; 0x27
    3c3c:	98 a7       	std	Y+40, r25	; 0x28
    3c3e:	a9 a7       	std	Y+41, r26	; 0x29
    3c40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c42:	6f a1       	ldd	r22, Y+39	; 0x27
    3c44:	78 a5       	ldd	r23, Y+40	; 0x28
    3c46:	89 a5       	ldd	r24, Y+41	; 0x29
    3c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	4a ef       	ldi	r20, 0xFA	; 250
    3c50:	54 e4       	ldi	r21, 0x44	; 68
    3c52:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	8b a3       	std	Y+35, r24	; 0x23
    3c5c:	9c a3       	std	Y+36, r25	; 0x24
    3c5e:	ad a3       	std	Y+37, r26	; 0x25
    3c60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c62:	6b a1       	ldd	r22, Y+35	; 0x23
    3c64:	7c a1       	ldd	r23, Y+36	; 0x24
    3c66:	8d a1       	ldd	r24, Y+37	; 0x25
    3c68:	9e a1       	ldd	r25, Y+38	; 0x26
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e8       	ldi	r20, 0x80	; 128
    3c70:	5f e3       	ldi	r21, 0x3F	; 63
    3c72:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    3c76:	88 23       	and	r24, r24
    3c78:	2c f4       	brge	.+10     	; 0x3c84 <main+0x210>
		__ticks = 1;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	9a a3       	std	Y+34, r25	; 0x22
    3c80:	89 a3       	std	Y+33, r24	; 0x21
    3c82:	3f c0       	rjmp	.+126    	; 0x3d02 <main+0x28e>
	else if (__tmp > 65535)
    3c84:	6b a1       	ldd	r22, Y+35	; 0x23
    3c86:	7c a1       	ldd	r23, Y+36	; 0x24
    3c88:	8d a1       	ldd	r24, Y+37	; 0x25
    3c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	3f ef       	ldi	r19, 0xFF	; 255
    3c90:	4f e7       	ldi	r20, 0x7F	; 127
    3c92:	57 e4       	ldi	r21, 0x47	; 71
    3c94:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    3c98:	18 16       	cp	r1, r24
    3c9a:	4c f5       	brge	.+82     	; 0x3cee <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    3c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    3ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e2       	ldi	r20, 0x20	; 32
    3caa:	51 e4       	ldi	r21, 0x41	; 65
    3cac:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9a a3       	std	Y+34, r25	; 0x22
    3cc2:	89 a3       	std	Y+33, r24	; 0x21
    3cc4:	0f c0       	rjmp	.+30     	; 0x3ce4 <main+0x270>
    3cc6:	88 ec       	ldi	r24, 0xC8	; 200
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	98 a3       	std	Y+32, r25	; 0x20
    3ccc:	8f 8f       	std	Y+31, r24	; 0x1f
    3cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cd0:	98 a1       	ldd	r25, Y+32	; 0x20
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	f1 f7       	brne	.-4      	; 0x3cd2 <main+0x25e>
    3cd6:	98 a3       	std	Y+32, r25	; 0x20
    3cd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cda:	89 a1       	ldd	r24, Y+33	; 0x21
    3cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	9a a3       	std	Y+34, r25	; 0x22
    3ce2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	69 f7       	brne	.-38     	; 0x3cc6 <main+0x252>
    3cec:	14 c0       	rjmp	.+40     	; 0x3d16 <main+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cee:	6b a1       	ldd	r22, Y+35	; 0x23
    3cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    3cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    3cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    3cf6:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9a a3       	std	Y+34, r25	; 0x22
    3d00:	89 a3       	std	Y+33, r24	; 0x21
    3d02:	89 a1       	ldd	r24, Y+33	; 0x21
    3d04:	9a a1       	ldd	r25, Y+34	; 0x22
    3d06:	9e 8f       	std	Y+30, r25	; 0x1e
    3d08:	8d 8f       	std	Y+29, r24	; 0x1d
    3d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <main+0x29a>
    3d12:	9e 8f       	std	Y+30, r25	; 0x1e
    3d14:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		digital[2] = MADC_u16GetDigitalValue(ADC2);
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <MADC_u16GetDigitalValue>
    3d1c:	9f af       	std	Y+63, r25	; 0x3f
    3d1e:	8e af       	std	Y+62, r24	; 0x3e
		analog[2] = (u16) ((digital[2] * 5000UL) / 1024);
    3d20:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d22:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d24:	cc 01       	movw	r24, r24
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	28 e8       	ldi	r18, 0x88	; 136
    3d2c:	33 e1       	ldi	r19, 0x13	; 19
    3d2e:	40 e0       	ldi	r20, 0x00	; 0
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 77 20 	call	0x40ee	; 0x40ee <__mulsi3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	07 2e       	mov	r0, r23
    3d40:	7a e0       	ldi	r23, 0x0A	; 10
    3d42:	b6 95       	lsr	r27
    3d44:	a7 95       	ror	r26
    3d46:	97 95       	ror	r25
    3d48:	87 95       	ror	r24
    3d4a:	7a 95       	dec	r23
    3d4c:	d1 f7       	brne	.-12     	; 0x3d42 <main+0x2ce>
    3d4e:	70 2d       	mov	r23, r0
    3d50:	fe 01       	movw	r30, r28
    3d52:	ec 5b       	subi	r30, 0xBC	; 188
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	95 83       	std	Z+5, r25	; 0x05
    3d58:	84 83       	std	Z+4, r24	; 0x04
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	a8 ec       	ldi	r26, 0xC8	; 200
    3d60:	b2 e4       	ldi	r27, 0x42	; 66
    3d62:	89 8f       	std	Y+25, r24	; 0x19
    3d64:	9a 8f       	std	Y+26, r25	; 0x1a
    3d66:	ab 8f       	std	Y+27, r26	; 0x1b
    3d68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	4a ef       	ldi	r20, 0xFA	; 250
    3d78:	54 e4       	ldi	r21, 0x44	; 68
    3d7a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	8d 8b       	std	Y+21, r24	; 0x15
    3d84:	9e 8b       	std	Y+22, r25	; 0x16
    3d86:	af 8b       	std	Y+23, r26	; 0x17
    3d88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d90:	98 8d       	ldd	r25, Y+24	; 0x18
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e8       	ldi	r20, 0x80	; 128
    3d98:	5f e3       	ldi	r21, 0x3F	; 63
    3d9a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    3d9e:	88 23       	and	r24, r24
    3da0:	2c f4       	brge	.+10     	; 0x3dac <main+0x338>
		__ticks = 1;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	9c 8b       	std	Y+20, r25	; 0x14
    3da8:	8b 8b       	std	Y+19, r24	; 0x13
    3daa:	3f c0       	rjmp	.+126    	; 0x3e2a <main+0x3b6>
	else if (__tmp > 65535)
    3dac:	6d 89       	ldd	r22, Y+21	; 0x15
    3dae:	7e 89       	ldd	r23, Y+22	; 0x16
    3db0:	8f 89       	ldd	r24, Y+23	; 0x17
    3db2:	98 8d       	ldd	r25, Y+24	; 0x18
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	3f ef       	ldi	r19, 0xFF	; 255
    3db8:	4f e7       	ldi	r20, 0x7F	; 127
    3dba:	57 e4       	ldi	r21, 0x47	; 71
    3dbc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    3dc0:	18 16       	cp	r1, r24
    3dc2:	4c f5       	brge	.+82     	; 0x3e16 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    3dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e2       	ldi	r20, 0x20	; 32
    3dd2:	51 e4       	ldi	r21, 0x41	; 65
    3dd4:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9c 8b       	std	Y+20, r25	; 0x14
    3dea:	8b 8b       	std	Y+19, r24	; 0x13
    3dec:	0f c0       	rjmp	.+30     	; 0x3e0c <main+0x398>
    3dee:	88 ec       	ldi	r24, 0xC8	; 200
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	9a 8b       	std	Y+18, r25	; 0x12
    3df4:	89 8b       	std	Y+17, r24	; 0x11
    3df6:	89 89       	ldd	r24, Y+17	; 0x11
    3df8:	9a 89       	ldd	r25, Y+18	; 0x12
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <main+0x386>
    3dfe:	9a 8b       	std	Y+18, r25	; 0x12
    3e00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e02:	8b 89       	ldd	r24, Y+19	; 0x13
    3e04:	9c 89       	ldd	r25, Y+20	; 0x14
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	9c 8b       	std	Y+20, r25	; 0x14
    3e0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	69 f7       	brne	.-38     	; 0x3dee <main+0x37a>
    3e14:	14 c0       	rjmp	.+40     	; 0x3e3e <main+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e16:	6d 89       	ldd	r22, Y+21	; 0x15
    3e18:	7e 89       	ldd	r23, Y+22	; 0x16
    3e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e1e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	9c 8b       	std	Y+20, r25	; 0x14
    3e28:	8b 8b       	std	Y+19, r24	; 0x13
    3e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e2e:	98 8b       	std	Y+16, r25	; 0x10
    3e30:	8f 87       	std	Y+15, r24	; 0x0f
    3e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e34:	98 89       	ldd	r25, Y+16	; 0x10
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <main+0x3c2>
    3e3a:	98 8b       	std	Y+16, r25	; 0x10
    3e3c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		MADC_voidInit();
    3e3e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <MADC_voidInit>
		digital[3] = MADC_u16GetDigitalValue(ADC3);
    3e42:	83 e0       	ldi	r24, 0x03	; 3
    3e44:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <MADC_u16GetDigitalValue>
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e0 5c       	subi	r30, 0xC0	; 192
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
		analog[3] = (u16) ((digital[3] * 5000UL) / 1024);
    3e52:	fe 01       	movw	r30, r28
    3e54:	e0 5c       	subi	r30, 0xC0	; 192
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	cc 01       	movw	r24, r24
    3e5e:	a0 e0       	ldi	r26, 0x00	; 0
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	28 e8       	ldi	r18, 0x88	; 136
    3e64:	33 e1       	ldi	r19, 0x13	; 19
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	bc 01       	movw	r22, r24
    3e6c:	cd 01       	movw	r24, r26
    3e6e:	0e 94 77 20 	call	0x40ee	; 0x40ee <__mulsi3>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	07 2e       	mov	r0, r23
    3e78:	7a e0       	ldi	r23, 0x0A	; 10
    3e7a:	b6 95       	lsr	r27
    3e7c:	a7 95       	ror	r26
    3e7e:	97 95       	ror	r25
    3e80:	87 95       	ror	r24
    3e82:	7a 95       	dec	r23
    3e84:	d1 f7       	brne	.-12     	; 0x3e7a <main+0x406>
    3e86:	70 2d       	mov	r23, r0
    3e88:	fe 01       	movw	r30, r28
    3e8a:	ec 5b       	subi	r30, 0xBC	; 188
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	97 83       	std	Z+7, r25	; 0x07
    3e90:	86 83       	std	Z+6, r24	; 0x06
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	a8 ec       	ldi	r26, 0xC8	; 200
    3e98:	b2 e4       	ldi	r27, 0x42	; 66
    3e9a:	8b 87       	std	Y+11, r24	; 0x0b
    3e9c:	9c 87       	std	Y+12, r25	; 0x0c
    3e9e:	ad 87       	std	Y+13, r26	; 0x0d
    3ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eaa:	20 e0       	ldi	r18, 0x00	; 0
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	4a ef       	ldi	r20, 0xFA	; 250
    3eb0:	54 e4       	ldi	r21, 0x44	; 68
    3eb2:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	8f 83       	std	Y+7, r24	; 0x07
    3ebc:	98 87       	std	Y+8, r25	; 0x08
    3ebe:	a9 87       	std	Y+9, r26	; 0x09
    3ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec4:	78 85       	ldd	r23, Y+8	; 0x08
    3ec6:	89 85       	ldd	r24, Y+9	; 0x09
    3ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	40 e8       	ldi	r20, 0x80	; 128
    3ed0:	5f e3       	ldi	r21, 0x3F	; 63
    3ed2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ltsf2>
    3ed6:	88 23       	and	r24, r24
    3ed8:	2c f4       	brge	.+10     	; 0x3ee4 <main+0x470>
		__ticks = 1;
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	9e 83       	std	Y+6, r25	; 0x06
    3ee0:	8d 83       	std	Y+5, r24	; 0x05
    3ee2:	3f c0       	rjmp	.+126    	; 0x3f62 <main+0x4ee>
	else if (__tmp > 65535)
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	3f ef       	ldi	r19, 0xFF	; 255
    3ef0:	4f e7       	ldi	r20, 0x7F	; 127
    3ef2:	57 e4       	ldi	r21, 0x47	; 71
    3ef4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gtsf2>
    3ef8:	18 16       	cp	r1, r24
    3efa:	4c f5       	brge	.+82     	; 0x3f4e <main+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e2       	ldi	r20, 0x20	; 32
    3f0a:	51 e4       	ldi	r21, 0x41	; 65
    3f0c:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	bc 01       	movw	r22, r24
    3f16:	cd 01       	movw	r24, r26
    3f18:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	9e 83       	std	Y+6, r25	; 0x06
    3f22:	8d 83       	std	Y+5, r24	; 0x05
    3f24:	0f c0       	rjmp	.+30     	; 0x3f44 <main+0x4d0>
    3f26:	88 ec       	ldi	r24, 0xC8	; 200
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	9c 83       	std	Y+4, r25	; 0x04
    3f2c:	8b 83       	std	Y+3, r24	; 0x03
    3f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f30:	9c 81       	ldd	r25, Y+4	; 0x04
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	f1 f7       	brne	.-4      	; 0x3f32 <main+0x4be>
    3f36:	9c 83       	std	Y+4, r25	; 0x04
    3f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	9e 83       	std	Y+6, r25	; 0x06
    3f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f44:	8d 81       	ldd	r24, Y+5	; 0x05
    3f46:	9e 81       	ldd	r25, Y+6	; 0x06
    3f48:	00 97       	sbiw	r24, 0x00	; 0
    3f4a:	69 f7       	brne	.-38     	; 0x3f26 <main+0x4b2>
    3f4c:	14 c0       	rjmp	.+40     	; 0x3f76 <main+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f50:	78 85       	ldd	r23, Y+8	; 0x08
    3f52:	89 85       	ldd	r24, Y+9	; 0x09
    3f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f56:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixunssfsi>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	9e 83       	std	Y+6, r25	; 0x06
    3f60:	8d 83       	std	Y+5, r24	; 0x05
    3f62:	8d 81       	ldd	r24, Y+5	; 0x05
    3f64:	9e 81       	ldd	r25, Y+6	; 0x06
    3f66:	9a 83       	std	Y+2, r25	; 0x02
    3f68:	89 83       	std	Y+1, r24	; 0x01
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <main+0x4fa>
    3f72:	9a 83       	std	Y+2, r25	; 0x02
    3f74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		digital[4] = MADC_u16GetDigitalValue(ADC4);
    3f76:	84 e0       	ldi	r24, 0x04	; 4
    3f78:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <MADC_u16GetDigitalValue>
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	ee 5b       	subi	r30, 0xBE	; 190
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	80 83       	st	Z, r24
		analog[4] = (u16) ((digital[4] * 5000UL) / 1024);
    3f86:	fe 01       	movw	r30, r28
    3f88:	ee 5b       	subi	r30, 0xBE	; 190
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	cc 01       	movw	r24, r24
    3f92:	a0 e0       	ldi	r26, 0x00	; 0
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	28 e8       	ldi	r18, 0x88	; 136
    3f98:	33 e1       	ldi	r19, 0x13	; 19
    3f9a:	40 e0       	ldi	r20, 0x00	; 0
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 77 20 	call	0x40ee	; 0x40ee <__mulsi3>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	07 2e       	mov	r0, r23
    3fac:	7a e0       	ldi	r23, 0x0A	; 10
    3fae:	b6 95       	lsr	r27
    3fb0:	a7 95       	ror	r26
    3fb2:	97 95       	ror	r25
    3fb4:	87 95       	ror	r24
    3fb6:	7a 95       	dec	r23
    3fb8:	d1 f7       	brne	.-12     	; 0x3fae <main+0x53a>
    3fba:	70 2d       	mov	r23, r0
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	ec 5b       	subi	r30, 0xBC	; 188
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	91 87       	std	Z+9, r25	; 0x09
    3fc4:	80 87       	std	Z+8, r24	; 0x08


		if ((digital[0]<1500 || digital[0]>1400) || (digital[1]<1100 || digital[1]>1000) || (digital[2]<2050 || digital[2]>1950) || (digital[3]<700 || digital[3]>600) || (digital[4]<900 || digital[4]>800))
    3fc6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3fc8:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fca:	a5 e0       	ldi	r26, 0x05	; 5
    3fcc:	8c 3d       	cpi	r24, 0xDC	; 220
    3fce:	9a 07       	cpc	r25, r26
    3fd0:	08 f4       	brcc	.+2      	; 0x3fd4 <main+0x560>
    3fd2:	44 c0       	rjmp	.+136    	; 0x405c <main+0x5e8>
    3fd4:	8a ad       	ldd	r24, Y+58	; 0x3a
    3fd6:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fd8:	b5 e0       	ldi	r27, 0x05	; 5
    3fda:	89 37       	cpi	r24, 0x79	; 121
    3fdc:	9b 07       	cpc	r25, r27
    3fde:	08 f0       	brcs	.+2      	; 0x3fe2 <main+0x56e>
    3fe0:	3d c0       	rjmp	.+122    	; 0x405c <main+0x5e8>
    3fe2:	8c ad       	ldd	r24, Y+60	; 0x3c
    3fe4:	9d ad       	ldd	r25, Y+61	; 0x3d
    3fe6:	24 e0       	ldi	r18, 0x04	; 4
    3fe8:	8c 34       	cpi	r24, 0x4C	; 76
    3fea:	92 07       	cpc	r25, r18
    3fec:	b8 f1       	brcs	.+110    	; 0x405c <main+0x5e8>
    3fee:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ff0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ff2:	a3 e0       	ldi	r26, 0x03	; 3
    3ff4:	89 3e       	cpi	r24, 0xE9	; 233
    3ff6:	9a 07       	cpc	r25, r26
    3ff8:	88 f5       	brcc	.+98     	; 0x405c <main+0x5e8>
    3ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ffe:	b8 e0       	ldi	r27, 0x08	; 8
    4000:	82 30       	cpi	r24, 0x02	; 2
    4002:	9b 07       	cpc	r25, r27
    4004:	58 f1       	brcs	.+86     	; 0x405c <main+0x5e8>
    4006:	8e ad       	ldd	r24, Y+62	; 0x3e
    4008:	9f ad       	ldd	r25, Y+63	; 0x3f
    400a:	27 e0       	ldi	r18, 0x07	; 7
    400c:	8f 39       	cpi	r24, 0x9F	; 159
    400e:	92 07       	cpc	r25, r18
    4010:	28 f5       	brcc	.+74     	; 0x405c <main+0x5e8>
    4012:	fe 01       	movw	r30, r28
    4014:	e0 5c       	subi	r30, 0xC0	; 192
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	a2 e0       	ldi	r26, 0x02	; 2
    401e:	8c 3b       	cpi	r24, 0xBC	; 188
    4020:	9a 07       	cpc	r25, r26
    4022:	e0 f0       	brcs	.+56     	; 0x405c <main+0x5e8>
    4024:	fe 01       	movw	r30, r28
    4026:	e0 5c       	subi	r30, 0xC0	; 192
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	91 81       	ldd	r25, Z+1	; 0x01
    402e:	b2 e0       	ldi	r27, 0x02	; 2
    4030:	89 35       	cpi	r24, 0x59	; 89
    4032:	9b 07       	cpc	r25, r27
    4034:	98 f4       	brcc	.+38     	; 0x405c <main+0x5e8>
    4036:	fe 01       	movw	r30, r28
    4038:	ee 5b       	subi	r30, 0xBE	; 190
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	80 81       	ld	r24, Z
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	23 e0       	ldi	r18, 0x03	; 3
    4042:	84 38       	cpi	r24, 0x84	; 132
    4044:	92 07       	cpc	r25, r18
    4046:	50 f0       	brcs	.+20     	; 0x405c <main+0x5e8>
    4048:	fe 01       	movw	r30, r28
    404a:	ee 5b       	subi	r30, 0xBE	; 190
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	a3 e0       	ldi	r26, 0x03	; 3
    4054:	81 32       	cpi	r24, 0x21	; 33
    4056:	9a 07       	cpc	r25, r26
    4058:	08 f4       	brcc	.+2      	; 0x405c <main+0x5e8>
    405a:	35 cd       	rjmp	.-1430   	; 0x3ac6 <main+0x52>
		{
			MDIO_voidSetPinValue(PORT_A, PIN6, PIN_HIGH);
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	66 e0       	ldi	r22, 0x06	; 6
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MDIO_voidSetPinValue>
			MTIMER0_voidSetCallBackOVF(TIMER_voidSetPWM);
    4066:	8c e3       	ldi	r24, 0x3C	; 60
    4068:	90 e2       	ldi	r25, 0x20	; 32
    406a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <MTIMER0_voidSetCallBackOVF>
			MTIMER1_voidInit();
    406e:	0e 94 b6 1a 	call	0x356c	; 0x356c <MTIMER1_voidInit>
			MTIMER0_voidInit();
    4072:	0e 94 8e 19 	call	0x331c	; 0x331c <MTIMER0_voidInit>
    4076:	27 cd       	rjmp	.-1458   	; 0x3ac6 <main+0x52>

00004078 <TIMER_voidSetPWM>:
//
//}


void TIMER_voidSetPWM(void)
{
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
	static u16 sample = 0;
	static u8 counter = 0;
	static u8 det=0;
	counter ++;
    4080:	80 91 71 00 	lds	r24, 0x0071
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	80 93 71 00 	sts	0x0071, r24
	if (counter == 4)
    408a:	80 91 71 00 	lds	r24, 0x0071
    408e:	84 30       	cpi	r24, 0x04	; 4
    4090:	c9 f4       	brne	.+50     	; 0x40c4 <TIMER_voidSetPWM+0x4c>
	{
		det= EEPROM32_u8ReadDataByte(sample);
    4092:	80 91 72 00 	lds	r24, 0x0072
    4096:	90 91 73 00 	lds	r25, 0x0073
    409a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EEPROM32_u8ReadDataByte>
    409e:	80 93 70 00 	sts	0x0070, r24
		MTIMER_voidSetOCR1A((det)*1);
    40a2:	80 91 70 00 	lds	r24, 0x0070
    40a6:	88 2f       	mov	r24, r24
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <MTIMER_voidSetOCR1A>
		sample ++;
    40ae:	80 91 72 00 	lds	r24, 0x0072
    40b2:	90 91 73 00 	lds	r25, 0x0073
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	90 93 73 00 	sts	0x0073, r25
    40bc:	80 93 72 00 	sts	0x0072, r24
		counter = 0;
    40c0:	10 92 71 00 	sts	0x0071, r1
	}
	if (sample>=anenglen)
    40c4:	80 91 72 00 	lds	r24, 0x0072
    40c8:	90 91 73 00 	lds	r25, 0x0073
    40cc:	26 e1       	ldi	r18, 0x16	; 22
    40ce:	80 3a       	cpi	r24, 0xA0	; 160
    40d0:	92 07       	cpc	r25, r18
    40d2:	50 f0       	brcs	.+20     	; 0x40e8 <TIMER_voidSetPWM+0x70>
	{
		sample = 0;
    40d4:	10 92 73 00 	sts	0x0073, r1
    40d8:	10 92 72 00 	sts	0x0072, r1
		MTIMERS_voidTimer1Stop();
    40dc:	0e 94 2b 1b 	call	0x3656	; 0x3656 <MTIMERS_voidTimer1Stop>
		HLCD_voidSendNumber(25);
    40e0:	89 e1       	ldi	r24, 0x19	; 25
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <HLCD_voidSendNumber>
	}

}
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <__mulsi3>:
    40ee:	62 9f       	mul	r22, r18
    40f0:	d0 01       	movw	r26, r0
    40f2:	73 9f       	mul	r23, r19
    40f4:	f0 01       	movw	r30, r0
    40f6:	82 9f       	mul	r24, r18
    40f8:	e0 0d       	add	r30, r0
    40fa:	f1 1d       	adc	r31, r1
    40fc:	64 9f       	mul	r22, r20
    40fe:	e0 0d       	add	r30, r0
    4100:	f1 1d       	adc	r31, r1
    4102:	92 9f       	mul	r25, r18
    4104:	f0 0d       	add	r31, r0
    4106:	83 9f       	mul	r24, r19
    4108:	f0 0d       	add	r31, r0
    410a:	74 9f       	mul	r23, r20
    410c:	f0 0d       	add	r31, r0
    410e:	65 9f       	mul	r22, r21
    4110:	f0 0d       	add	r31, r0
    4112:	99 27       	eor	r25, r25
    4114:	72 9f       	mul	r23, r18
    4116:	b0 0d       	add	r27, r0
    4118:	e1 1d       	adc	r30, r1
    411a:	f9 1f       	adc	r31, r25
    411c:	63 9f       	mul	r22, r19
    411e:	b0 0d       	add	r27, r0
    4120:	e1 1d       	adc	r30, r1
    4122:	f9 1f       	adc	r31, r25
    4124:	bd 01       	movw	r22, r26
    4126:	cf 01       	movw	r24, r30
    4128:	11 24       	eor	r1, r1
    412a:	08 95       	ret

0000412c <__udivmodhi4>:
    412c:	aa 1b       	sub	r26, r26
    412e:	bb 1b       	sub	r27, r27
    4130:	51 e1       	ldi	r21, 0x11	; 17
    4132:	07 c0       	rjmp	.+14     	; 0x4142 <__udivmodhi4_ep>

00004134 <__udivmodhi4_loop>:
    4134:	aa 1f       	adc	r26, r26
    4136:	bb 1f       	adc	r27, r27
    4138:	a6 17       	cp	r26, r22
    413a:	b7 07       	cpc	r27, r23
    413c:	10 f0       	brcs	.+4      	; 0x4142 <__udivmodhi4_ep>
    413e:	a6 1b       	sub	r26, r22
    4140:	b7 0b       	sbc	r27, r23

00004142 <__udivmodhi4_ep>:
    4142:	88 1f       	adc	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	5a 95       	dec	r21
    4148:	a9 f7       	brne	.-22     	; 0x4134 <__udivmodhi4_loop>
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	08 95       	ret

00004154 <__prologue_saves__>:
    4154:	2f 92       	push	r2
    4156:	3f 92       	push	r3
    4158:	4f 92       	push	r4
    415a:	5f 92       	push	r5
    415c:	6f 92       	push	r6
    415e:	7f 92       	push	r7
    4160:	8f 92       	push	r8
    4162:	9f 92       	push	r9
    4164:	af 92       	push	r10
    4166:	bf 92       	push	r11
    4168:	cf 92       	push	r12
    416a:	df 92       	push	r13
    416c:	ef 92       	push	r14
    416e:	ff 92       	push	r15
    4170:	0f 93       	push	r16
    4172:	1f 93       	push	r17
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	ca 1b       	sub	r28, r26
    417e:	db 0b       	sbc	r29, r27
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
    418a:	09 94       	ijmp

0000418c <__epilogue_restores__>:
    418c:	2a 88       	ldd	r2, Y+18	; 0x12
    418e:	39 88       	ldd	r3, Y+17	; 0x11
    4190:	48 88       	ldd	r4, Y+16	; 0x10
    4192:	5f 84       	ldd	r5, Y+15	; 0x0f
    4194:	6e 84       	ldd	r6, Y+14	; 0x0e
    4196:	7d 84       	ldd	r7, Y+13	; 0x0d
    4198:	8c 84       	ldd	r8, Y+12	; 0x0c
    419a:	9b 84       	ldd	r9, Y+11	; 0x0b
    419c:	aa 84       	ldd	r10, Y+10	; 0x0a
    419e:	b9 84       	ldd	r11, Y+9	; 0x09
    41a0:	c8 84       	ldd	r12, Y+8	; 0x08
    41a2:	df 80       	ldd	r13, Y+7	; 0x07
    41a4:	ee 80       	ldd	r14, Y+6	; 0x06
    41a6:	fd 80       	ldd	r15, Y+5	; 0x05
    41a8:	0c 81       	ldd	r16, Y+4	; 0x04
    41aa:	1b 81       	ldd	r17, Y+3	; 0x03
    41ac:	aa 81       	ldd	r26, Y+2	; 0x02
    41ae:	b9 81       	ldd	r27, Y+1	; 0x01
    41b0:	ce 0f       	add	r28, r30
    41b2:	d1 1d       	adc	r29, r1
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
    41be:	ed 01       	movw	r28, r26
    41c0:	08 95       	ret

000041c2 <_exit>:
    41c2:	f8 94       	cli

000041c4 <__stop_program>:
    41c4:	ff cf       	rjmp	.-2      	; 0x41c4 <__stop_program>
